<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://localhost:4000/</title>
   
   <link>http://localhost:4000/</link>
   <description>얼큰우동TV, 쉽게배우는 IT(Programming,Machine Learning,금융)</description>
   <language>en-uk</language>
   
   <title>
   <![CDATA[ IT Technical Training ]]>
   </title>
   <description>
   <![CDATA[ 얼큰우동TV, 쉽게배우는 IT(Programming,Machine Learning,금융) ]]>
   </description>
   <link>http://localhost:4000/</link>
   <image>
   <url>http://localhost:4000/assets/built/images/favicon.jpg</url>
   <title>IT Technical Training</title>
   <link>http://localhost:4000/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="http://localhost:4000/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Angular 강좌(20) - Component LifeCycle</title>
	  <link>http://localhost:4000/angular-lecture-lifecycle</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-19T00:55:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-lifecycle</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Component Lifecycle</strong></p>

<p>이번 포스트에서는 Angular의 <code class="highlighter-rouge">Lifecycle</code>에 대해서 알아보겠습니다. 다른 Framework과 마찬가지로 Angular 역시
여러 단계의 lifecycle을 관리합니다. Component와 Directive가 이 lifecycle의 영향을 받게 되며 각 lifecycle마다 제공되는
hook method를 이용하여 특정 작업을 처리할 수 있습니다.</p>

<p>이런 hook method는 interface형태로 우리에게 제공됩니다. Component 혹은 Directive class가 이 interface를 구현하고
그 안의 특정 method를 overriding하는 식으로 hook method를 이용할 수 있습니다.</p>

<p>Component를 대상으로 객체가 생성되고 소멸되기까지 호출되는 hook method를 순서대로 나열하면 다음과 같습니다. Directive는
View를 가지고 있지 않기 때문에 ngAfter로 시작되는 hook method는 호출되지 않습니다.</p>

<ul>
  <li>constructor</li>
  <li>ngOnChanges</li>
  <li>ngOnInit</li>
  <li>ngDoCheck</li>
  <li>ngAfterContentInit</li>
  <li>ngAfterContentChecked</li>
  <li>ngAfterViewInit</li>
  <li>ngAfterViewChecked</li>
  <li>ngOnDestroy</li>
</ul>

<p>간단하게 Project를 하나 생성해서 각 lifecycle단계에서 해당 hook method가 호출되는지 확인하는 식으로 진행하시면 됩니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">constructor</strong></p>

<p>Component 혹은 Directive가 생성될 때 호출됩니다. 사실 constructor는 Angular의 lifecycle의 단계에 포함될 내용은 아닙니다.</p>

<p>TypeScript에서는 일반적으로 constructor에서 초기화를 진행합니다. 하지만 Angular에서 사용하는 속성의 초기화는 <code class="highlighter-rouge">ngOnInit</code>에서 
하는것이 좋습니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">ngOnChanges</strong></p>

<p><code class="highlighter-rouge">@Input</code>을 이용해 부모 Component가 자식 Component에게 데이터를 전달할 수 있습니다. <code class="highlighter-rouge">ngOnChanges</code>는 부모 Component에서 
자식 Component로 데이터가 binding 될 때 혹은 변경되었을 때 호출됩니다. 따라서 <code class="highlighter-rouge">@Input</code>을 사용하지 않으면 호출되지 않습니다.</p>

<p>정확하게는 부모 Component로부터 자식 Component에게 전달하는 primitive 값이 변경되거나 혹은 참조하는 객체의 reference가 
변경되어야 호출됩니다. 즉, 참조하는 객체의 property가 변경되는 경우에는 ngOnChanges가 호출되지 않는다는 것 기억하셔야 합니다.</p>

<p><code class="highlighter-rouge">@Input</code>을 이용한 값의 binding은 생성자가 호출된 후에 일어납니다. 즉, 생성자에서 @Input을 이용해 binding한 값을 출력하면
<code class="highlighter-rouge">undefined</code>가 출력되게 됩니다. 간단한 이벤트 처리를 통해 @Input으로 전달되는 값을 변경해보면 값이 변경될 때마다
ngOnChanges hook method가 호출되는걸 확인할 수 있습니다.</p>

<p>ngOnChanges hook method의 인자로 <code class="highlighter-rouge">SimpleChanges</code> 객체를 하나 받을 수 있습니다. 해당 객체를 이용하면 변경되기 이전값과
이후값등을 알 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">Input</span><span class="p">,</span> <span class="nx">OnChanges</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">SimpleChanges</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-child'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./child.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./child.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ChildComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">OnChanges</span> <span class="p">{</span>

  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="nx">myInput</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Constructor 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnChanges</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">:</span> <span class="nx">SimpleChanges</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnChanges 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">.</span><span class="nx">myInput</span><span class="p">.</span><span class="nx">previousValue</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">.</span><span class="nx">myInput</span><span class="p">.</span><span class="nx">currentValue</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong class="subtitle_fontAwesome">ngOnInit</strong></p>

<p><code class="highlighter-rouge">ngOnInit</code>는 ngOnChanges가 호출된 이후에 모든 속성에 대한 초기화가 완료된 시점에 딱 한번만 호출됩니다. 즉, class가 가지고 있는
속성과 @Input을 통해 값을 내려받은 속성이 모두 초기화가 된 이후에 호출됩니다. 결국 Component의 속성 참조는 ngOnInit
hook method이후에 참조하는 것이 좋습니다.</p>

<p>결국 생성자는 Service의 Injection같은 사항을 처리하고 속성에 대한 초기화는 ngOnInit에서 처리하시는게 좋다는 말입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">Input</span><span class="p">,</span> <span class="nx">OnChanges</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">SimpleChanges</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-child'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./child.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./child.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ChildComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">OnChanges</span> <span class="p">{</span>

  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="nx">myInput</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nx">myString</span> <span class="o">=</span> <span class="s1">'Hello'</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Constructor 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Constructor 호출!! =&gt; myString : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myString</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnChanges</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">:</span> <span class="nx">SimpleChanges</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnChanges 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">.</span><span class="nx">myInput</span><span class="p">.</span><span class="nx">previousValue</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">.</span><span class="nx">myInput</span><span class="p">.</span><span class="nx">currentValue</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnInit 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnInit 호출!! =&gt; myString : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myString</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong class="subtitle_fontAwesome">ngDoCheck</strong></p>

<p>ngOnInit hook method가 호출된 이후에 호출됩니다. Component에서 발생하는 모든 상태변화에 반응하여 호출되어지는 hook method로
Angular의 Changes Detection이 상태변화를 감지하면 자동으로 호출되게 됩니다. 한가지 주의하셔야 할 점은 ngOnChanges와는 
다르게 primitive값의 변경, reference 객체의 변경, reference객체의 속성변경에 대한 모든 변경에 대해 해당 hook mehtod가
호출된다는 점입니다. 심지에 이전값과 같은 값이 assign되었음에도 호출됩니다. 따라서 <code class="highlighter-rouge">ngDoCheck</code>을 많이 사용하게 되면
그만큼 성능이 저하될 수 있습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">DoCheck</span><span class="p">,</span> <span class="nx">Input</span><span class="p">,</span> 
        <span class="nx">OnChanges</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">SimpleChanges</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-child'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./child.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./child.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ChildComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">OnChanges</span><span class="p">,</span> <span class="nx">DoCheck</span> <span class="p">{</span>

  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="nx">myInput</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">;</span>
  <span class="nx">myString</span> <span class="o">=</span> <span class="s1">'Hello'</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Constructor 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Constructor 호출!! =&gt; myString : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myString</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnChanges</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">:</span> <span class="nx">SimpleChanges</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnChanges 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">.</span><span class="nx">myInput</span><span class="p">.</span><span class="nx">previousValue</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">.</span><span class="nx">myInput</span><span class="p">.</span><span class="nx">currentValue</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnInit 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnInit 호출!! =&gt; myString : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myString</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngDoCheck</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngDoCheck 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngDoCheck 호출!! =&gt; myString : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myString</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong class="subtitle_fontAwesome">ngAfterContentInit, ngAfterContentChecked</strong></p>

<p>최초의 ngDoCheck hook method가 호출된 후에 한번만 호출되며 앞서 배운 ngContent directive를 이용해 부모 Component의 template
일부를 자식 Component에서 projection한 후 호출됩니다. 여기서 Content의 의미는 ngContent directive처럼 외부에서
Component View안으로 내용을 가져온 것을 지칭합니다. 이 hook method 이후에 Change Detection이 실행된 후 
바로 따라서 ngAfterContentChecked hook method가 호출됩니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">ngAfterViewInit, ngAfterViewChecked</strong></p>

<p>Component에 속한 모든 View와 ViewChild가 시작되고 나서 호출됩니다. 쉽게 생각하면 HTML이 모두 화면에 출력된 후 호출된다고 생각
하시면 됩니다. ngAfterViewChecked는 Component의 View에 대한 Change Detection이 실행되고 난 후 호출됩니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">ngOnDestroy</strong></p>

<p>Component가 소멸하기 직전에 호출됩니다. 일반적으로 사용된 자원에 대한 해제 코드가 들어옵니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">AfterContentChecked</span><span class="p">,</span> <span class="nx">AfterContentInit</span><span class="p">,</span> <span class="nx">AfterViewChecked</span><span class="p">,</span> <span class="nx">AfterViewInit</span><span class="p">,</span> 
  <span class="nx">Component</span><span class="p">,</span> <span class="nx">DoCheck</span><span class="p">,</span> <span class="nx">Input</span><span class="p">,</span> <span class="nx">OnChanges</span><span class="p">,</span> <span class="nx">OnDestroy</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span>
  <span class="nx">SimpleChanges</span>
<span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-child'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./child.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./child.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ChildComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span><span class="p">,</span> <span class="nx">OnChanges</span><span class="p">,</span> <span class="nx">DoCheck</span><span class="p">,</span> <span class="nx">AfterContentInit</span><span class="p">,</span>
  <span class="nx">AfterContentChecked</span><span class="p">,</span> <span class="nx">AfterViewInit</span><span class="p">,</span> <span class="nx">AfterViewChecked</span><span class="p">,</span> <span class="nx">OnDestroy</span> <span class="p">{</span>

  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span> <span class="nx">myInput</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">;</span>
  <span class="nx">myString</span> <span class="o">=</span> <span class="s1">'Hello'</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Constructor 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Constructor 호출!! =&gt; myString : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myString</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnChanges</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">:</span> <span class="nx">SimpleChanges</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnChanges 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">.</span><span class="nx">myInput</span><span class="p">.</span><span class="nx">previousValue</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">simpleChanges</span><span class="p">.</span><span class="nx">myInput</span><span class="p">.</span><span class="nx">currentValue</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnInit 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnInit 호출!! =&gt; myString : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myString</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngDoCheck</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngDoCheck 호출!! =&gt; myInput : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myInput</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngDoCheck 호출!! =&gt; myString : </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">myString</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngAfterContentInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngAfterContentInit 호출!!`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngAfterContentChecked</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngAfterContentChecked 호출!!`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngAfterViewInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngAfterViewInit 호출!!`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngAfterViewChecked</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngAfterViewChecked 호출!!`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">ngOnDestroy</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ngOnDestroy 호출!!`</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p>이번 포스트는 Angular가 제어하는 Component와 Directive의 lifecycle에 대해서 살펴봤습니다. 어떤 시점에 어떤 hook
method가 호출되는지 이해하고 Change Detection이 어느 시점에 호출되는지를 이해하시면 조금 더 Angular를 이해하는데 도움이
될 듯 합니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(19) - Pipe</title>
	  <link>http://localhost:4000/angular-lecture-pipe</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-17T02:51:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-pipe</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Pipe</strong></p>

<p>이번 포스트에서는 Angular의 <code class="highlighter-rouge">Pipe</code>에 대해서 알아보겠습니다. Pipe는 HTML template내에서 출력하고자 하는 데이터를 원하는
형식으로 변환하여 출력하는 기능입니다. 원본 데이터에는 변형을 가하지 않은 상태로 출력 형태만 변경해 주기 때문에
원치않은 <code class="highlighter-rouge">Side Effect</code>를 없앨 수 있습니다.</p>

<p>가장 흔하게 사용하는 예부터 시작하여 사용자 정의 pipe를 생성하는 것 까지 살펴보겠습니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Built-in Pipe</strong></p>

<p>Angular는 몇가지 종류의 built-in pipe를 지원합니다. 자세한 사항은 
<a href="https://angular.io/api?type=pipe" target="_blank">여기</a>를 클릭해 보시면 볼 수 있습니다. 이 중 몇가지만 예를 들어
보기로 하죠.</p>

<p>다음은 대문자로 출력내용을 바꾸는 pipe의 사용법입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;h5</span> <span class="err">#</span><span class="na">resultStatus</span> 
    <span class="na">class=</span><span class="s">"mb-0 text-white lh-100"</span><span class="nt">&gt;</span>
    Search Result : {{searchTitle | uppercase }}
<span class="nt">&lt;/h5&gt;</span>

</code></pre></div></div>

<p>searchTitle의 값이 그대로 interpolation을 이용해 출력되는 형태에서 <code class="highlighter-rouge">uppercase</code>라는 내장 pipe를 이용해 출력되는 영문문자열을
대문자로 변경해 출력하는 것입니다.</p>

<p>이와 유사하게 다음과 같이 날짜에 대한 pipe도 존재합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;div&gt;</span>{{ today }}<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>{{ today | date }}<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div&gt;</span>{{ today | date: 'y년 MM월 dd일' }}<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</code></pre></div></div>

<p>원래 출력되는 형식과 pipe로 변형되서 출력되는 형식을 잘 보시면 될 듯 합니다. 또한 pipe사용은 체이닝을 지원합니다.
여러 pipe를 이어서 원하는 형식으로 변환시켜 출력 가능하다는 말이죠.</p>

<p>이번에는 우리예제 중 Material Table의 출력 중 가격부분을 통화단위로 바꾸어서 출력하는걸 해보도록 하죠.</p>

<p>다음은 <code class="highlighter-rouge">list-box.component.html</code>의 일부입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"bprice"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> Price <span class="nt">&lt;/mat-header-cell&gt;</span>
  <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span> {{element.bprice | currency: 'KRW'}} <span class="nt">&lt;/mat-cell&gt;</span>
<span class="nt">&lt;/ng-container&gt;</span>

</code></pre></div></div>

<p>위의 예에서 볼 수 있듯이 책의 가격을 통화단위(원화)로 변경해서 출력할 수 있습니다. 이렇게 built-in pipe를 이용해서
처리할 수 있고 built-in pipe로 처리할 수 없는 것들은 custom pipe를 이용해 처리할 수 있습니다.</p>

<p>사용자 정의 pipe를 이용해 비슷한 처리를 해 보겠습니다.</p>

<p>command 창을 열고 다음의 명령을 실행해 pipe를 생성합니다.</p>

<blockquote>
  <p><strong>ng generate pipe bookPrice</strong></p>
</blockquote>

<p><code class="highlighter-rouge">book-price.pipe.ts</code> 파일이 생성되게 됩니다. 기본적인 code가 생성되고 내용은 다음과 같이 수정합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Pipe</span><span class="p">,</span> <span class="nx">PipeTransform</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Pipe</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="s1">'bookPrice'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">BookPricePipe</span> <span class="kr">implements</span> <span class="nx">PipeTransform</span> <span class="p">{</span>

  <span class="nx">transform</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">args</span><span class="p">?:</span> <span class="nx">any</span><span class="p">):</span> <span class="nx">any</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\B(?=(\d{3})</span><span class="sr">+</span><span class="se">(?!\d))</span><span class="sr">/g</span><span class="p">,</span> <span class="s1">','</span><span class="p">)</span> <span class="o">+</span> <span class="s1">'원'</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">bookPrice</code>란 이름의 pipe를 사용하면 <code class="highlighter-rouge">transform()</code> method가 호출되서 변환작업을 진행하게 됩니다. 적절하게
해당 method의 내용을 우리가 원하는 내용으로 변경해주면 되겠네요. 위의 코드는 입력받은 숫자를 3자리마다 <code class="highlighter-rouge">,</code>를
찍고 맨 마지막에 ‘원’을 붙여서 문자열을 리턴하는 코드입니다.</p>

<p>우리가 만든 pipe를 Module에 등록하고 <code class="highlighter-rouge">list-box.component.html</code> 에서 다음과 같이 사용하시면 됩니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"bprice"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> Price <span class="nt">&lt;/mat-header-cell&gt;</span>
  <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span> {{element.bprice | bookPrice}} <span class="nt">&lt;/mat-cell&gt;</span>
<span class="nt">&lt;/ng-container&gt;</span>

</code></pre></div></div>

<p>이번 포스트에서는 Angular에서 Pipe라고 불리는 요소가 어떠한 역할을 하는지에 대해서 알아보았습니다. Pipe는
어렵지 않은 내용이기 때문에 built-in pipe를 사용하는 방법과 custom pipe를 작성하는 방법만 몇가지 알아두시면
됩니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(18) - Directive</title>
	  <link>http://localhost:4000/angular-lecture-directive</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-14T23:38:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-directive</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Directive</strong></p>

<p>이번 포스트에서는 Angular의 <code class="highlighter-rouge">Directive</code>에 대해서 알아보겠습니다. 지금까지 예제를 작성하면서 여러 directive를 사용해 왔는데요.
그에 대해서 조금 더 정리를 해 보려 합니다.</p>

<p>Directive는 <strong>DOM의 모양이나 동작을 지시하기 위한 명령</strong>이라고 생각하시면 됩니다. 크게 HTML Element형태로 사용되거나 
Element의 attribute의 형태로 사용되게 됩니다. 예를 들면 우리가 사용했던 <code class="highlighter-rouge">ngIf</code> 같은 attribute를 떠올리시면 됩니다.
Routing에서 사용했던 <code class="highlighter-rouge">&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> Element 역시 directive입니다.</p>

<p>이렇게 directive는 DOM을 제어하기 위한 용도로 사용되는데 DOM을 제어하기 위해서 우리는 지금까지 Component를 이용했었습니다. 
Component로 제어하면 되지 굳이 directive로 DOM을 제어할 필요가 있느냐 하는 의문이 들 수 있습니다. 하지만 Component는
원칙적으로 자신이 rendering하는 View에 대해서만 관심이 있습니다. 여러 View들이 공통적으로 사용하는 Element나 Element의
attribute같은 것들을 따로 directive로 지정해 사용하면 <code class="highlighter-rouge">SRP</code>관점에서 봤을 때도 타당하고 Component의 복잡도를 낮출 수 있으며
유지보수와 같은 관리적인 측면에서도 더 나은 형태로 구현이 가능합니다.</p>

<p>Component 역시 큰 의미에서 directive입니다. Component는 directive이면서 View를 가지고 있고 자식 Component 또한 가질 수
있습니다. 하지만 directive는 View를 가지고 있지 않고 자식 directive 또한 가질 수 없습니다.</p>

<p>Directive는 크게 다음과 같은 4가지 종류로 구분 할 수 있습니다.</p>

<ul>
  <li>
    <p><strong>Component Directive</strong></p>

    <p>우리가 알고 있는 Component입니다. <code class="highlighter-rouge">selector</code>에서 우리가 directive를 지정해 사용하게 됩니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>Attribute Directive</strong></p>

    <p>HTML Element의 Attribute로 사용됩니다. built-in 형태로는 <code class="highlighter-rouge">ngClass</code> 같은 것들이 있습니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>Structural Directive</strong></p>

    <p>DOM의 구성을 제어하기 위한 directive로 <code class="highlighter-rouge">ngIf</code> , <code class="highlighter-rouge">ngFor</code>, <code class="highlighter-rouge">ngSwitch</code> 등이 있습니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>Custom Directive</strong></p>

    <p>built-in 형태로 만들어진 directive가 아닌 직접 만들어서 사용하는 directive를 지칭합니다.</p>

    <p><br /></p>
  </li>
</ul>

<p>이 중 Component에 대해서는 많이 사용해 봤으니 Structural Directive와 Custom Directive에 대해서
알아보도록 하겠습니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Structural Directive</strong></p>

<p>우리 예제에서도 사용했던 <code class="highlighter-rouge">ngIf</code>, <code class="highlighter-rouge">ngFor</code>등을 지칭합니다. 단, 이것들은 built-in된 형태입니다. 이런 구조적 directive를
우리가 직접 만들어서 사용할 수도 있습니다. ngIf와 ngFor를 사용하실 때 몇가지 알아두셔야 하는 사항이 있습니다.</p>

<p>일반적으로 다음과 같이 코드처리 합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">div</span> <span class="o">*</span><span class="nx">ngIf</span><span class="o">=</span><span class="s2">"hero"</span> <span class="kd">class</span><span class="o">=</span><span class="s2">"name"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span></code></pre></div></div>

<p><code class="highlighter-rouge">hero</code>가 null과 undefined가 아니면 <code class="highlighter-rouge">&lt;div&gt;</code>를 DOM에 추가하고 interpolation을 이용해 값을 출력하는 코드입니다.</p>

<p>이 코드는 사실 다음과 같이 변형되어서 실행됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">ng</span><span class="o">-</span><span class="nx">template</span> <span class="p">[</span><span class="nx">ngIf</span><span class="p">]</span><span class="o">=</span><span class="s2">"hero"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="s2">"name"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/ng-template</span><span class="err">&gt;
</span></code></pre></div></div>

<p><code class="highlighter-rouge">ng-template</code>을 이용해서 조건을 통해 <code class="highlighter-rouge">&lt;div&gt;</code>의 처리를 결정합니다.</p>

<p>비교해서 보셔야 할 것으로 <code class="highlighter-rouge">ng-container</code>가 있습니다. 위의 코드는 다음의 코드로 표현이 가능합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">ng</span><span class="o">-</span><span class="nx">container</span> <span class="o">*</span><span class="nx">ngIf</span><span class="o">=</span><span class="s2">"hero"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="s2">"name"</span><span class="o">&gt;&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/ng-container</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Angular는 동일한 Element에 두개 이상의 <code class="highlighter-rouge">*ngIf</code>, <code class="highlighter-rouge">*ngFor</code>, <code class="highlighter-rouge">*ngSwitch</code>를 사용할 수 없습니다. for문을 돌리면서 if문을
이용해 비교하고 싶은 경우에는 문제가 됩니다. 이 같은 경우를 해결하기 위해 <code class="highlighter-rouge">ng-container</code>를 제공하는 것이라 보시면 됩니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Custom Directive</strong></p>

<p>기존에 만들었던 mySearchProject에 간단하게 Custom Directive를 추가하고 어떻게 이용하는지 살펴보도록 하겠습니다.</p>

<p>command 창을 열고 다음의 명령을 실행해서 directive를 하나 생성합니다. 현재 command 창의 working directory는
<code class="highlighter-rouge">src/app</code> 입니다.</p>

<blockquote>
  <p><strong>ng generate directive textColor</strong></p>
</blockquote>

<p>두개의 파일이 생성됩니다. Angular CLI의 이름규칙에 의해 <code class="highlighter-rouge">text-color.directive.ts</code> 라는 이름의 파일이 생성됩니다.</p>

<p>그 내용을 다음과 같이 수정합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">Directive</span><span class="p">,</span> <span class="nx">ElementRef</span><span class="p">,</span> <span class="nx">Renderer2</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Directive</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'[myColor]'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TextColorDirective</span> <span class="p">{</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">elementref</span><span class="p">:</span> <span class="nx">ElementRef</span><span class="p">,</span> <span class="nx">renderer</span><span class="p">:</span> <span class="nx">Renderer2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">renderer</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">elementref</span><span class="p">.</span><span class="nx">nativeElement</span><span class="p">,</span><span class="s1">'color'</span><span class="p">,</span><span class="s1">'darkred'</span><span class="p">);</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>위의 directive 내용은 HTML Element의 속성으로 <code class="highlighter-rouge">myColor</code> 가 사용되었을 경우 해당 Element를 DOM에
rendering 할 때 글자색을 darkred로 설정하라는 것입니다.</p>

<p>이렇게 directive를 생성하면 사용하기 위해서 Root Module에 등록해야 합니다. Angular CLI를 이용했기 때문에
이미 등록이 되어 있습니다. 이제 실제 해당 directive가 정상적으로 동작하는지 확인해보면 될 듯 합니다.</p>

<p><code class="highlighter-rouge">pages/home</code> 폴더에 있는 <code class="highlighter-rouge">home.component.html</code>을 수정해서 해당 directive를 사용해 보죠.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>HOME<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;hr&gt;</span>
<span class="nt">&lt;p</span> <span class="na">myColor</span><span class="nt">&gt;</span>이 Web Application은 Angular 강좌를 위한 Test App입니다.
<span class="nt">&lt;p&gt;</span>이 강좌는 다음의 내용을 포함합니다. <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li&gt;</span>Angular의 기본 구조<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Angular CLI<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Component<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Template - Template Reference Variable<span class="nt">&lt;/li&gt;</span>
...
...
...  
</code></pre></div></div>

<p>위와 같이 <code class="highlighter-rouge">myColor</code>라는 directive를 사용할 수 있습니다. 해당 <code class="highlighter-rouge">P</code> Element의 text 글자는 darkred로 출력되겠네요.</p>

<p>가장 직관적인 예를 들기 위해 text color를 변경하는걸로 처리를 했는데 그 외 DOM을 제어하는 다른 기능들도 할 수 있습니다.</p>

<p>이번에는 이벤트 처리를 한번 해 보죠. 위의 예에서 해당 <code class="highlighter-rouge">P</code> Element를 클릭했을 때 <code class="highlighter-rouge">alert()</code> 이 수행되게 할려면 다음과 같이
처리하시면 됩니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">Directive</span><span class="p">,</span> <span class="nx">ElementRef</span><span class="p">,</span> <span class="nx">HostListener</span><span class="p">,</span> <span class="nx">Renderer2</span><span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Directive</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'[myColor]'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">TextColorDirective</span> <span class="p">{</span>

  <span class="p">@</span><span class="nd">HostListener</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$event'</span><span class="p">])</span> <span class="nx">elementClick</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// e안에는 event객체가 들어온다.</span>
    <span class="c1">// this는 directive 객체를 지칭.</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">srcElement</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="nx">elementref</span><span class="p">:</span> <span class="nx">ElementRef</span><span class="p">,</span> <span class="nx">renderer</span><span class="p">:</span> <span class="nx">Renderer2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">renderer</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">elementref</span><span class="p">.</span><span class="nx">nativeElement</span><span class="p">,</span><span class="s1">'color'</span><span class="p">,</span><span class="s1">'darkred'</span><span class="p">);</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>이벤트를 처리하기 위해 <code class="highlighter-rouge">@HostListener</code> decorator를 이용했습니다. 여기서 <code class="highlighter-rouge">host</code>라는 표현이 나오는데 지금 우리 예제에서
<code class="highlighter-rouge">myColor</code> 속성을 적용한 HTML Element를 host라고 지칭합니다.</p>

<p>이벤트 객체를 얻기 위해 처리하는 부분을 조심해서 보시면 됩니다.</p>

<p>추가적으로 @Input decorator를 이용해서 directive가 값을 전달 받을 수 있습니다. 원래 @Input은 부모 Component가 자식 Component
에게 데이터를 전달해 주기 위해 사용했었는데 directive에게도 값을 전달 할 수 있습니다. 사용하는 Component때 했던 것과 동일합니다.</p>

<p>이번 포스트는 Directive에 대해서 정리해보았습니다. 더 많은 기능이 있지만 기본적으로 이런 용도로 사용된다는 정도만 알고 계시면
될 듯 합니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(17) - 중간 정리</title>
	  <link>http://localhost:4000/angular-lecture-inspection-1</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-14T12:02:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-inspection-1</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">중간 정리</strong></p>

<p>지금까지 Angular의 구조와 기본개념을 살펴보기 위해서 간단한 예제프로그램을 작성했습니다.
이제 기존에 하지 못했던 조금 더 자세한 사항에 대해 알아봐야 할 듯 합니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Performance Issue</strong></p>

<p>먼저 얘기할 부분은 Angular의 <code class="highlighter-rouge">Performance</code> 입니다.</p>

<p>기존 AngularJS에 비해서 Angualr는 여러 관점에서 성능향상이 이루어졌습니다. 하나씩 간단하게 살펴보겠습니다.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">Digest Loop</code>로 인한 성능 저하 문제가 개선되었습니다. 우리 예제에서 다뤄보았던 양방향 바인딩 기억하시나요?
AngularJS에서는 이 양방향 바인딩을 처리하기 위해 <code class="highlighter-rouge">watcher</code>라는걸 사용합니다. 이 watcher라는 놈이 수행될 때
마다 digest loop가 수행되어 양방향 바인딩을 처리하는 구조였습니다. 양방향 바인딩이 많아질수록 watcher가 증가하고
결과적으로 digest loop의 수행도 같이 증가해서 결국 성능이 저하되는 문제가 발생했던 겁니다.
지금의 Angualr는 전통적인 양방향 바인딩을 다른 방식으로 처리함으로써 이 문제를 해결했습니다.</p>

    <p>현재 Agnular에서 양방향 바인딩은 내부적으로 <code class="highlighter-rouge">Property binding</code>과 <code class="highlighter-rouge">Event binding</code>으로 변환되어서 처리됩니다.
만약 Angular의 <code class="highlighter-rouge">Change Detection</code>에 대해 자세히 알고 싶으시면
<a href="https://blog.angularindepth.com/angulars-digest-is-reborn-in-the-newer-version-of-angular-718a961ebd3e" target="_blank">여기</a>를
참고하세요.</p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>Angular는 <code class="highlighter-rouge">AoT</code> Compile을 지원합니다. AoT(Ahead of Time) compile이란 사전 컴파일을 지칭합니다. 런타임에 컴파일을 
하지 않고 미리 컴파일을 해 놓기 때문에 실행 속도를 더 높일 수 있는 것이죠. 안드로이드 개발을 해 보신 분이라면 <code class="highlighter-rouge">Dalvik</code>과
<code class="highlighter-rouge">ART</code>를 알고 계실 겁니다. Dalvik은 <code class="highlighter-rouge">JIT</code> 컴파일러를 이용하고 ART는 <code class="highlighter-rouge">AoT</code> 컴파일러를 사용합니다. 둘을 비교해보자면 JIT(Just-In-Time)은
실행시점에 소스코드를 컴파일하는 방식입니다. 설치는 빠르게 되겠지만 실행이 좀 느리겠지요. AoT는 설치시점에 소스코드를
컴파일하는 방식입니다. 따라서 설치가 조금 느려지지만 실행시 빠르게 실행되는 장점을 가지고 있습니다.</li>
</ul>

<p><br /></p>

<ul>
  <li>Angular뿐만 아니라 모든 Front-End Framework이 가지는 문제점 중 하나는 바로 <code class="highlighter-rouge">SPA</code>(Single Page Application) 구조에서 
오는 rendering의 속도 문제입니다.
우리는 기존에 <code class="highlighter-rouge">SSR</code>(Server Side Rendering)을 이용해 프로그램을 했었습니다. 예를 들면, JSP 이런것들 이지요. SSR의 장점은
일단 클라이언트에게 빠르게 화면을 보여줄 수 있다는 겁니다. 하지만 라이브러리가 다 로딩된 후에야 Client와 interaction이 가능합니다.
반면에 SPA 구조는 모든 라이브러리가 다 로딩되어야 Client가 화면을 볼 수 있습니다. 즉, Client가 초기에 화면을 보기까지 로딩시간이
걸린다는 것입니다. <code class="highlighter-rouge">CSR</code>(Client Side Rendering) 이라고 불리는 이 방식은 화면이 뜨자마자 바로 interaction이 가능하다는 장점이 
있습니다. 요즘에는 이 둘을 섞어서 최적화를 꾀하고 있습니다. 이와 관련된 사항으로 Angular는 <code class="highlighter-rouge">Lazy Loading</code>을 사용합니다.
Lazy Loading(지연 로딩)은 SPA의 단점을 극복하기 위한 하나의 방법으로 사용하는 모든 라이브러리를 한꺼번에 다 불러들이지 않고
필요한 시점에 필요한 라이브러리만 로딩하는 방식입니다. 이를 이용해 로딩 시간을 단축할 수 있기 때문입니다.</li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Angular CLI</strong></p>

<p>그 다음 살펴볼 부분은 <code class="highlighter-rouge">Angular CLI</code>입니다. 우리 예제 프로그램을 작성하기 위해 사용했던 것 기억하시지요?</p>

<p>Angular CLI(Command Line Interpreter)는 command 명령어를 이용해서 프로젝트의 생성 및 Scaffolding, build, 개발서버를 이용한
실행과 테스팅까지 수행할 수 있는 개발지원 도구 입니다. 간단하지 않는 프로젝트의 구조 생성 및 설정 그리고 Coding Convention등을 
자동으로 잡아주기 때문에 편하게 개발환경을 구축하고 표준적 방식으로 프로젝트를 진행할 수 있도록 도와주는 아주 고마운 도구이지요.</p>

<p>다음은 일반적으로 많이 사용되는 Angular CLI의 명령어와 알아두어야 할 사항들 입니다.</p>

<ul>
  <li><strong>프로젝트의 생성</strong>
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng new &lt;project_name&gt;
</code></pre></div>    </div>
    <p>위와 같은 형태로 프로젝트를 생성하면 기본 폴더 구조와 파일이 생성됩니다. 이전에도 언급했지만 이렇게 생성된 프로젝트의 구조와
<code class="highlighter-rouge">Coding Convention</code>이 Angular의 표준 스타일입니다. 또한 필요한 의존 Module이 같이 설치됩니다. 만약 의존
Module을 설치하고 싶지 않을 경우 <code class="highlighter-rouge">--skip-install</code> option을 이용해 프로젝트를 생성하시면 됩니다.</p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><strong>내장 개발서버를 이용한 프로젝트 실행</strong>
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng serve
</code></pre></div>    </div>
    <p>위와 같은 명령을 이용하면 내장 개발 서버를 이용해 우리 프로젝트를 <code class="highlighter-rouge">deploy</code>할 수 있습니다. 기본적으로 사용하는 port는 <code class="highlighter-rouge">4200</code>
입니다. 만약 다른 포트를 사용하고 싶을 때는 <code class="highlighter-rouge">--port</code> option을 이용해 포트번호를 변경할 수 있습니다. 그리고 <code class="highlighter-rouge">--o</code> option을
이용하면 시스템에 설정되어 있는 default browser를 실행해 http://localhost:4200 으로 접속까지 해 줍니다.</p>

    <p>이 내장 개발서버는 LiveReload 기능을 지원합니다. 쉽게말하자면 우리가 코드를 수정하면 그 내용을 컴파일하여 즉각 반영하고 
browser를 refresh까지 시켜준다는 것이지요. 개발을 편하게 가져갈 수 있습니다.</p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><strong>프로젝트 구성요소 추가</strong>
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng generate &lt;구성요소&gt; &lt;구성요소명&gt;
</code></pre></div>    </div>
    <p>위와 같은 명령을 이용하면 프로젝트에 새로운 Angular 구성요소를 추가할 수 있습니다. 우리는 <code class="highlighter-rouge">component</code>, <code class="highlighter-rouge">service</code> 구성요소를 추가해
봤지요. 그 외에 다음과 같은 Angular 구성요소들을 추가할 수 있습니다.</p>
    <ul>
      <li><code class="highlighter-rouge">directive</code></li>
      <li><code class="highlighter-rouge">pipe</code></li>
      <li><code class="highlighter-rouge">module</code></li>
      <li><code class="highlighter-rouge">class</code></li>
      <li><code class="highlighter-rouge">interface</code></li>
      <li><code class="highlighter-rouge">enum</code></li>
      <li><code class="highlighter-rouge">guard</code></li>
    </ul>

    <p>이런 구성요소가 어떤 역할을 하는지는 나중에 하나씩 살펴봐야 겠네요. 기존에 우리 프로젝트에서 
추가했던 search-box Component를 가지고 간단하게 <code class="highlighter-rouge">Naming Rule</code>에 대해 정리를 한번 해 보겠습니다.</p>

    <p>다음과 같은 명령을 실행하면 새로운 Component가 하나 만들어 집니다.</p>
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng generate component search-box
</code></pre></div>    </div>

    <p>생성되는 파일은 총 4개입니다. option을 설정하면 파일이 만들어지지 않을수도 있습니다. 즉, CSS, HTML, SPEC파일을
생성하지 않을수도 있다는 말입니다. CSS와 HTML을 inline방식으로 사용할 수 있으니까요. SPEC은 테스트를 위한 파일입니다.</p>

    <p>그런데 만들어지는 파일의 이름이 좀 특이합니다. 다음과 같은 형태로 만들어졌습니다.</p>
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>search-box-component.css     
search-box-component.html    
search-box-component.ts
search-box-component.spec.ts
</code></pre></div>    </div>

    <p>파일명이 모두 <code class="highlighter-rouge">search-box.component.*</code> 형태로 만들어집니다. Angular는 Naming의 혼란을 방지하기 위해 
케밥 표기법(<code class="highlighter-rouge">Kebab case</code>)을 이용해서 Angular 구성요소의 이름을 붙이게 됩니다. 사실 우리에게 익숙한
표기법은 <code class="highlighter-rouge">Camel case</code>입니다. 각 단어의 첫글자를 소문자로 쓰고 붙어있는 단어들은 대문자로 시작하는 표기법입니다. Java의
기본 표기법이죠. 참고로 <code class="highlighter-rouge">Pascal case</code>도 있습니다. Camel case와 유사한데 Pascal case는 첫 글자도 대문자로 시작합니다.
Kebab-case는 하이픈(<code class="highlighter-rouge">-</code>)을 이용한 표기법입니다. Angular는 기본적으로 Kebab case를 Angular 구성요소 이름을 붙일 때 
사용한다는걸 기억하시면 됩니다. 참고로 class의 이름은 Pascal case를 이용합니다.</p>

    <p>이렇게 만들어진 <code class="highlighter-rouge">search-box-component.ts</code> 파일의 내용을 살펴보죠</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
  
<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-search-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./search-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./search-box.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SearchBoxComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
  
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
  
  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>  
<span class="p">}</span>
</code></pre></div>    </div>

    <p>위의 코드에서 <code class="highlighter-rouge">selector</code>가 어떤 역할을 하는지 아실겁니다. 이 selector에 명시된 이름의 tag를 다른 template에서
이용하면 해당 tag 위치에 우리 Component에서 지정한 template이 표시되게 됩니다. 이 selector에 명시된 이름이
결국 <code class="highlighter-rouge">&lt;app-search-box&gt;&lt;/app-search-box&gt;</code>형태로 어딘가에서 이용된다는 말이죠. 이 selector에 지정된 이름을
붙일 때 접두어 <code class="highlighter-rouge">app</code>을 이용해 Kebab case로 표현합니다. 기존의 HTML tag와 혼동되는걸 피하기 위해서라고 생각하시면 됩니다.</p>

    <p>참고로 이 접두어는 <code class="highlighter-rouge">.angular-cli.json</code> 설정파일에서 다른것으로 지정할 수 있습니다.</p>

    <p>우리는 CSS와 HTML을 따로 파일을 만들어서 사용했지만 inline형태로 이용할 수 있습니다. 아래와 같이 말이죠.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
  
<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-search-box'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="s2">`&lt;h1&gt;Hello&lt;h1&gt;
             &lt;p&gt;
              this is a sample text
             &lt;/p&gt;
            `</span><span class="p">,</span>
  <span class="na">style</span><span class="p">:</span> <span class="s2">`.myStyle {
              color : red
          }
         `</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SearchBoxComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
  
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
  
  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>  
<span class="p">}</span>  
</code></pre></div>    </div>

    <p>여기서는 backquote ( ` ) 기호를 이용하는 <code class="highlighter-rouge">template string</code>을 사용했습니다. 다른 Angular 구성요소를 추가하는
방법과 이용법은 이후 포스트에서 하나씩 실습을 통해 알아보도록 하겠습니다.</p>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><strong>프로젝트 Build</strong>
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng build
</code></pre></div>    </div>

    <p>위와 같은 명령을 이용하면 우리 프로젝트를 Angular CLI를 이용해 Build할 수 있습니다. 기존에는 <code class="highlighter-rouge">SystemJS</code>를 이용해서
bundling을 했지만 현재는 <code class="highlighter-rouge">webpack</code>을 이용해 bundling합니다. option을 따로 주지 않고 build를 진행하면 
개발환경 build를 수행하게 됩니다. 만약 production
build를 수행하시려면 <code class="highlighter-rouge">--prod</code> option을 이용하시면 됩니다. 또한 deploy를 위한 base url을 설정할 때는 <code class="highlighter-rouge">--base-href</code> option을
이용하시면 됩니다. Angular CLI Build에 관한 보다 자세한 option 사항은 
<a href="https://github.com/angular/angular-cli/wiki/build" target="_blank">여기</a>를 참조하시면 됩니다.</p>
  </li>
</ul>

<hr />

<p>이번 포스트는 기존에 설명하기 좀 난감(?)했던 성능문제라던지 Angular CLI의 Naming Rule에 대해 보충설명을 진행했습니다. 
만약 Angular CLI에 대해 더 자세하게 알고 싶으시면 <a href="https://cli.angular.io/" target="_blank">여기</a>를 살펴보시면 됩니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(16) - Material Table Event</title>
	  <link>http://localhost:4000/angular-lecture-table-event</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-14T02:29:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-table-event</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Angular Material Table Event</strong></p>

<p>이번 포스트는 <code class="highlighter-rouge">list-box</code> Component의 Angular Material Table의 row를 클릭하면 해당 책의 세부정보를 <code class="highlighter-rouge">detail-box</code> Component의
View에 출력하는 부분을 작성해 보겠습니다. 이 작업 역시 <code class="highlighter-rouge">BehaviorSubject</code>를 이용해 선택한 책의 정보를 자동으로 갱신해 출력할 
수 있도록 처리하겠습니다.</p>

<p>Service에 Client에 의해 선택된 책의 세부정보가 담긴 객체정보가 존재해야 합니다. 
<code class="highlighter-rouge">detail-box</code> Component는 이 정보를 subscribe해야 하고 만약 Client에 의해 다른 책이 선택된다면 이 정보를 갱신해주면 될 듯
합니다.</p>

<p>다음은 <code class="highlighter-rouge">http-support.service.ts</code> 파일의 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">HttpClient</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"@angular/common/http"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BehaviorSubject</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"rxjs/BehaviorSubject"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bdate</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btranslator</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bpublisher</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bprice</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">bisbn</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bimgurl</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpSupportService</span> <span class="p">{</span>

  <span class="nl">books</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">[];</span>

  <span class="c1">// Client에 의해 선택된 책의 정보 - 초기화</span>
  <span class="nl">selectedBook</span><span class="p">:</span> <span class="nx">IBook</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">bauthor</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="na">bdate</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="na">btranslator</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="na">bpublisher</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="na">btitle</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="na">bprice</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">bisbn</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="na">bimgurl</span><span class="p">:</span> <span class="s1">''</span>
  <span class="p">};</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">HttpClient</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nl">updateBooks</span><span class="p">:</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="p">[]</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">);</span>
  
  <span class="c1">// selectedBook에 대한 BehaviorSubject 객체 생성</span>
  <span class="nl">updateSelectedBook</span><span class="p">:</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="o">&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">selectedBook</span><span class="p">);</span>

  <span class="nx">getJsonData</span><span class="p">(</span><span class="nx">url</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">category</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">keyword</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">url</span><span class="p">}${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="kd">let</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
           <span class="c1">// 도서종류와 검색어를 이용한 도서 데이터 Filtering 시작</span>
           <span class="k">if</span><span class="p">(</span> <span class="nx">category</span> <span class="o">==</span> <span class="s1">'all'</span> <span class="p">)</span> <span class="p">{</span>
             <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btitle</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">keyword</span><span class="p">))</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">});</span>
           <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">category</span> <span class="o">==</span> <span class="s1">'country'</span><span class="p">)</span> <span class="p">{</span>
             <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btitle</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">keyword</span><span class="p">))</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">}).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btranslator</span> <span class="o">==</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">});</span>
           <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">category</span> <span class="o">==</span> <span class="s1">'foreign'</span><span class="p">)</span> <span class="p">{</span>
             <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btitle</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">keyword</span><span class="p">))</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">}).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btranslator</span> <span class="o">!=</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">});</span>
           <span class="p">}</span>
          <span class="c1">// 도서종류와 검색어를 이용한 도서 데이터 Filtering 끝</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">updateBooks</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">tmp</span><span class="p">);</span>
          <span class="c1">//this.books = tmp;</span>
          <span class="c1">//console.log(this.books);</span>
        <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">getBooks</span><span class="p">():</span> <span class="nx">IBook</span><span class="p">[]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 Material Table row event를 처리해야 합니다. 이 부분은 API 사용이기 때문에 별다른 설명이 없습니다. 다음의 코드를
이용하시면 됩니다.</p>

<p>다음은 <code class="highlighter-rouge">list-box.component.html</code> 파일의 내용입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"example-container mat-elevation-z8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;mat-table</span> <span class="na">class=</span><span class="s">"list-table-style"</span> <span class="err">#</span><span class="na">table</span> <span class="err">[</span><span class="na">dataSource</span><span class="err">]="</span><span class="na">dataSource</span><span class="err">"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"bisbn"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> ISBN <span class="nt">&lt;/mat-header-cell&gt;</span>
      <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/mat-cell&gt;</span>
    <span class="nt">&lt;/ng-container&gt;</span>

    <span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"btitle"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> Title <span class="nt">&lt;/mat-header-cell&gt;</span>
      <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/mat-cell&gt;</span>
    <span class="nt">&lt;/ng-container&gt;</span>

    <span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"bauthor"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> Author <span class="nt">&lt;/mat-header-cell&gt;</span>
      <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/mat-cell&gt;</span>
    <span class="nt">&lt;/ng-container&gt;</span>

    <span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"bprice"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> Price <span class="nt">&lt;/mat-header-cell&gt;</span>
      <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/mat-cell&gt;</span>
    <span class="nt">&lt;/ng-container&gt;</span>

    <span class="nt">&lt;mat-header-row</span> <span class="na">class=</span><span class="s">"list-header-style"</span>
                    <span class="err">*</span><span class="na">matHeaderRowDef=</span><span class="s">"displayedColumns"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/mat-header-row&gt;</span>
    <span class="nt">&lt;mat-row</span> <span class="err">*</span><span class="na">matRowDef=</span><span class="s">"let row; columns: displayedColumns;"</span>
             <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">rowSelect</span><span class="err">(</span><span class="na">row</span><span class="err">)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/mat-row&gt;</span>
  <span class="nt">&lt;/mat-table&gt;</span>

  <span class="nt">&lt;mat-paginator</span> <span class="err">#</span><span class="na">paginator</span>
                 <span class="err">[</span><span class="na">pageSize</span><span class="err">]="</span><span class="na">5</span><span class="err">"</span>
                 <span class="err">[</span><span class="na">pageSizeOptions</span><span class="err">]="[</span><span class="na">5</span><span class="err">,</span> <span class="na">10</span><span class="err">,</span> <span class="na">20</span><span class="err">]"</span>
                 <span class="na">showFirstLastButtons</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/mat-paginator&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>아래쪽에 <code class="highlighter-rouge">&lt;mat-row&gt;</code>에 대한 이벤트 처리만 유의해서 보시면 됩니다. Table의 각 row를 클릭할 때 마다 <code class="highlighter-rouge">rowSelect()</code>를 
이용해 method를 호출하면서 현재 선택된 row 객체를 인자로 넘겨줍니다.</p>

<p>다음은 <code class="highlighter-rouge">list-box.component.ts</code> 파일의 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MatTableDataSource</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/material'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MatPaginator</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/material'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ViewChild</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">HttpSupportService</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"../http-support.service"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SelectionModel</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/cdk/collections'</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bdate</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btranslator</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bpublisher</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bprice</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">bisbn</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bimgurl</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-list-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./list-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./list-box.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ListBoxComponent</span> <span class="p">{</span>

  <span class="nx">displayedColumns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'bisbn'</span><span class="p">,</span> <span class="s1">'btitle'</span><span class="p">,</span> <span class="s1">'bauthor'</span><span class="p">,</span> <span class="s1">'bprice'</span><span class="p">];</span>
  <span class="nx">dataSource</span><span class="p">;</span>
  <span class="nl">books</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">[];</span>

  <span class="c1">// event 처리</span>
  <span class="nx">selection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SelectionModel</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="p">[]);</span>

  <span class="p">@</span><span class="nd">ViewChild</span><span class="p">(</span><span class="nx">MatPaginator</span><span class="p">)</span> <span class="nx">paginator</span><span class="p">:</span> <span class="nx">MatPaginator</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">updateBooks</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MatTableDataSource</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="o">&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">.</span><span class="nx">paginator</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">paginator</span><span class="p">;</span>
    <span class="p">})</span>
  <span class="p">}</span>

  <span class="nx">rowSelect</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">updateSelectedBook</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">selected</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">SelectionModel</code>을 이용해 사용자가 선택한 row에 대한 정보를 획득합니다. Service의 <code class="highlighter-rouge">updateSelectedBook</code>의 next()를
호출하여 <code class="highlighter-rouge">detail-box</code> Component에서 구독하고 있을 선택된 책의 정보를 갱신합니다.</p>

<p>마지막으로 <code class="highlighter-rouge">detail-box.component.ts</code> 파일입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">HttpSupportService</span><span class="p">}</span> <span class="k">from</span> <span class="s2">"../http-support.service"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bdate</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btranslator</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bpublisher</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bprice</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">bisbn</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bimgurl</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-detail-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./detail-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./detail-box.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">DetailBoxComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

  <span class="nl">book</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">updateSelectedBook</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">selectedBook</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">book</span> <span class="o">=</span> <span class="nx">selectedBook</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>기존에 sample data를 삭제하고 Service를 이용하여 <code class="highlighter-rouge">updateSelectedBook</code> 객체를 subscribe하게끔 처리했습니다.</p>

<p>Table의 이벤트 처리하는 부분만 잘 보시면 됩니다. 데이터 공유는 이전 포스트에서 설명했던 방식 그대로 똑같이 적용해서 
처리했습니다.</p>

<p>여기까지해서 기본적인 도서 검색에 대한 프로그램을 완성했습니다. 다음 포스트들은 실습과 약간 무관하지만 알아야 하는
부분들에 대해서 정리해 보겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(15) - Service RxJS</title>
	  <link>http://localhost:4000/angular-lecture-data-share-service-rxjs</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-14T00:06:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-data-share-service-rxjs</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Angular RxJS</strong></p>

<p>이번 포스트는 RxJS를 이용해 데이터를 공유하는 방법에 대해서 알아보겠습니다. RxJS에 대한 이론적인 내용은 다른 포스트에서
알아보기로 하고 여기서는 RxJS를 이용해 우리 예제를 어떻게 구현할 수 있나에 초점을 맞추어 보도록 하죠.</p>

<p>지금까지 작성한 우리 예제 프로그램은 <code class="highlighter-rouge">search-box</code> Component에서 Search 버튼을 클릭하면 Service의 method가 호출되서
JSON 데이터를 확보합니다. 이 데이터를 자동으로 <code class="highlighter-rouge">list-box</code> Component에 전달할 방법이 없었기 때문에 
<code class="highlighter-rouge">list-box</code> Component에서 Service를 이용해 데이터를 가져가는 방식으로 동작했습니다.</p>

<p>여기서는 <code class="highlighter-rouge">BehaviorSubject</code> class를 이용해 보도록 하겠습니다. 이 <code class="highlighter-rouge">BehaviorSubject</code>는 <code class="highlighter-rouge">Observable</code>의 특별한 
형태라고 보시면 됩니다. 연관된 데이터를 쉽게 구독할 수 있는 method와 데이터를 변경하기 위한
method등 사용하기 쉬운 몇가지 method를 제공해서 보다 쉽게 RxJS 기능을 이용할 수 있도록 고안된 class입니다.</p>

<p>먼저 <code class="highlighter-rouge">http-support.service.ts</code> 파일에 <code class="highlighter-rouge">BehaviorSubject</code> class 타입의 객체를 하나 생성합니다. 연관된 데이터를 생성자의
인자로 이용해서 객체를 생성합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">updateBooks</span><span class="p">:</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="p">[]</span><span class="o">&gt;</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">);</span>
</code></pre></div></div>

<p>새로운 JSON 데이터가 만들어지면 <code class="highlighter-rouge">updateBooks</code>에 데이터를 밀어 넣습니다. 다음과 같은 method를 이용합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">updateBooks</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">tmp</span><span class="p">);</span>
<span class="c1">//this.books = tmp;</span>
</code></pre></div></div>

<p>기존에는 JSON 데이터를 만들어서 <code class="highlighter-rouge">this.books</code>에 바로 assign했는데 이 데이터를 updateBooks의 method를 이용하여 
<code class="highlighter-rouge">books</code>에 밀어 넣습니다.</p>

<p>이제 <code class="highlighter-rouge">list-box</code> Component를 수정할 차례입니다. 데이터를 가져오기 위한 버튼은 필요없으니 HTML에서 삭제합니다. 
또한 버튼이 클릭되었을 때 Service에서 데이터를 가져오는 method도 의미가 없으니 삭제해야 겠네요.</p>

<p><code class="highlighter-rouge">list-box</code> Component는 단순합니다. 주입된 Service의 <code class="highlighter-rouge">updateBooks</code>를 구독하고 있다가 데이터가 변경되면 변경된
데이터를 자동으로 가져와 Table의 DataSource에 injection하는 코드만 작성하면 됩니다. 생성자에서 처리하면 될 듯 합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">updateBooks</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MatTableDataSource</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="o">&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">.</span><span class="nx">paginator</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">paginator</span><span class="p">;</span>
    <span class="p">})</span>
  <span class="p">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">BehaviorSubject</code> class의 도움을 받으면 RxJS의 이론적인 내용과 Observable에 대한 내용을 잘 몰라도 쉽게 구현이 가능합니다. 
하지만 나중에 RxJS의 이론적인 내용은 한번 보셔야 합니다.</p>

<p>마지막으로 부모 Component의 초기화 버튼을 누르면 <code class="highlighter-rouge">list-box</code>에 출력된 도서 내용도 초기화 되어야 합니다. 이 부분은 위의 내용을
응용해 구현해 보세요!!</p>

<p>우리 프로그램이 거의 완성되어가고 있습니다. 다음은 <code class="highlighter-rouge">list-box</code>에서 책을 선택하면 해당 책의 세부정보가 <code class="highlighter-rouge">detail-box</code>에 출력되도록
처리해 보겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(14) - Service Mediator Pattern</title>
	  <link>http://localhost:4000/angular-lecture-data-share-service-mediator-pattern</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-13T01:00:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-data-share-service-mediator-pattern</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Service Mediator Pattern</strong></p>

<p>이번 포스트는 Service의 개념을 이용해서 Component간 데이터를 공유하는 Service Mediator Pattern에 대해서 알아보겠습니다.</p>

<p>먼저 간단한 경우부터 살펴보기로 하죠.</p>

<p>도서종류와 검색어를 입력하고 Search! 버튼을 클릭하면 Service를 이용해서 JSON 파일로부터 데이터를 읽어들입니다. 원래는
RESTful 서버를 이용해서 JSON 데이터를 가져와야 하지만 우리는 RESTful 서버를 이용하지 않으니 일단 JSON 파일로 부터 데이터를
읽어들이고 데이터를 filtering해서 사용하겠습니다.</p>

<p>먼저 부모 Component인 <code class="highlighter-rouge">book-search-main</code> Component에서 선택된 도서종류를 <code class="highlighter-rouge">search-box</code> Component에서 사용해야 하므로
선택된 도서종류에 대한 값을 <code class="highlighter-rouge">search-box</code> Component에서 사용할 수 있도록 코드를 수정합니다.</p>

<p>다음은 <code class="highlighter-rouge">book-search-main.component.html</code> 중 일부 입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;app-search-box</span> <span class="err">[</span><span class="na">bookCategory</span><span class="err">]="</span><span class="na">displayCategoryName</span><span class="err">"</span>
                    <span class="err">[</span><span class="na">selectedValue</span><span class="err">]="</span><span class="na">selectedValue</span><span class="err">"</span>
                    <span class="err">(</span><span class="na">searchEvent</span><span class="err">)="</span><span class="na">changeTitleBar</span><span class="err">($</span><span class="na">event</span><span class="err">)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/app-search-box&gt;</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">@Input</code> decorator로 데이터를 받기 위해 <code class="highlighter-rouge">search-box.component.ts</code>를 수정해야 합니다.</p>

<p>다음은 <code class="highlighter-rouge">search-box.component.ts</code> 파일입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span>
  <span class="nx">Input</span><span class="p">,</span> <span class="nx">Output</span><span class="p">,</span> <span class="nx">EventEmitter</span>
<span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">HttpSupportService</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"../http-support.service"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">JSON_DATA_CONFIG</span><span class="p">,</span> <span class="nx">JsonConfig</span><span class="p">}</span> <span class="k">from</span> <span class="s2">"./json-config"</span><span class="p">;</span>


<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-search-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./search-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./search-box.component.css'</span><span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">provide</span><span class="p">:</span> <span class="nx">JsonConfig</span><span class="p">,</span>
      <span class="na">useValue</span><span class="p">:</span> <span class="nx">JSON_DATA_CONFIG</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SearchBoxComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

  <span class="nl">_bookCategory</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="c1">//@Input() bookCategory:string;</span>
  <span class="c1">//@Input('bookCategory') mySelected:string;</span>
  
  <span class="p">@</span><span class="nd">Input</span><span class="p">(</span><span class="s1">'selectedValue'</span><span class="p">)</span> <span class="nx">selectedValue</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>

  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span>
  <span class="kd">set</span> <span class="nx">bookCategory</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">value</span> <span class="o">!=</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 추가적인 작업이 들어올 수 있습니다.</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span> <span class="o">=</span> <span class="s1">'category: '</span> <span class="o">+</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="p">}</span>

  <span class="p">@</span><span class="nd">Output</span><span class="p">()</span> <span class="nx">searchEvent</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">();</span>

  <span class="nx">keyword</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="na">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">,</span>
              <span class="kr">private</span> <span class="na">jsonConfig</span><span class="p">:</span><span class="nx">JsonConfig</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="nx">setKeyword</span><span class="p">(</span><span class="na">keyword</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">keyword</span> <span class="o">=</span> <span class="nx">keyword</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchEvent</span><span class="p">.</span><span class="nx">emit</span><span class="p">({</span>
      <span class="na">keyword</span> <span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">keyword</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="na">category</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">'category: '</span><span class="p">,</span><span class="s1">''</span><span class="p">)}</span><span class="s2">`</span>
    <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">getJsonData</span><span class="p">(</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">jsonConfig</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">jsonConfig</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">selectedValue</span><span class="p">,</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">keyword</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">inputChange</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>

  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>부모 Component로부터 받은 도서종류와 Client로부터 입력받은 keyword를 가지고 
injection된 Service의 method를 호출합니다.</p>

<p>다음은 <code class="highlighter-rouge">http-support.service.ts</code> 파일입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">HttpClient</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"@angular/common/http"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bdate</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btranslator</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bpublisher</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bprice</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">bisbn</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bimgurl</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpSupportService</span> <span class="p">{</span>

  <span class="nl">books</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">[];</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">HttpClient</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">getJsonData</span><span class="p">(</span><span class="nx">url</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">name</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">category</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">keyword</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">url</span><span class="p">}${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="kd">let</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
           <span class="c1">// 도서종류와 검색어를 이용한 도서 데이터 Filtering 시작</span>
           <span class="k">if</span><span class="p">(</span> <span class="nx">category</span> <span class="o">==</span> <span class="s1">'all'</span> <span class="p">)</span> <span class="p">{</span>
             <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btitle</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">keyword</span><span class="p">))</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">});</span>
           <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">category</span> <span class="o">==</span> <span class="s1">'country'</span><span class="p">)</span> <span class="p">{</span>
             <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btitle</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">keyword</span><span class="p">))</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">}).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btranslator</span> <span class="o">==</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">});</span>
           <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">category</span> <span class="o">==</span> <span class="s1">'foreign'</span><span class="p">)</span> <span class="p">{</span>
             <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btitle</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">keyword</span><span class="p">))</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">}).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span><span class="nx">idx</span><span class="p">,</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
               <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">btranslator</span> <span class="o">!=</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
               <span class="p">}</span>
             <span class="p">});</span>
           <span class="p">}</span>
          <span class="c1">// 도서종류와 검색어를 이용한 도서 데이터 Filtering 끝</span>
           <span class="k">this</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">);</span>
        <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">getBooks</span><span class="p">():</span> <span class="nx">IBook</span><span class="p">[]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Filtering처리를 해야해서 코드가 좀 길어졌네요. 알기 쉽게 좀 풀어서 코드를 작성했습니다. Filtering처리된 JSON 데이터를
얻어와서 일단 <code class="highlighter-rouge">books</code> 속성에 저장했습니다. 그리고 <code class="highlighter-rouge">list-box</code> Component에서 데이터를 가져가기 위해 <code class="highlighter-rouge">getBooks()</code> method를
하나 작성했습니다.</p>

<p>이제 데이터를 가져가는 <code class="highlighter-rouge">list-box</code> Component를 살펴보면 됩니다. <code class="highlighter-rouge">list-box</code> Component에서 데이터를 가져가기 위한 버튼을
하나 준비합니다.</p>

<p>다음은 <code class="highlighter-rouge">list-box.component.html</code> 파일입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;button</span> <span class="na">mat-raised-button</span> <span class="na">color=</span><span class="s">"warn"</span>
        <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">getData</span><span class="err">()"</span><span class="nt">&gt;</span>Get DATA!<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"example-container mat-elevation-z8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;mat-table</span> <span class="na">class=</span><span class="s">"list-table-style"</span> <span class="err">#</span><span class="na">table</span> <span class="err">[</span><span class="na">dataSource</span><span class="err">]="</span><span class="na">dataSource</span><span class="err">"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"bisbn"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> ISBN <span class="nt">&lt;/mat-header-cell&gt;</span>
      <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/mat-cell&gt;</span>
    <span class="nt">&lt;/ng-container&gt;</span>

    <span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"btitle"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> Title <span class="nt">&lt;/mat-header-cell&gt;</span>
      <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/mat-cell&gt;</span>
    <span class="nt">&lt;/ng-container&gt;</span>

    <span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"bauthor"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> Author <span class="nt">&lt;/mat-header-cell&gt;</span>
      <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/mat-cell&gt;</span>
    <span class="nt">&lt;/ng-container&gt;</span>

    <span class="nt">&lt;ng-container</span> <span class="na">matColumnDef=</span><span class="s">"bprice"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;mat-header-cell</span> <span class="err">*</span><span class="na">matHeaderCellDef</span><span class="nt">&gt;</span> Price <span class="nt">&lt;/mat-header-cell&gt;</span>
      <span class="nt">&lt;mat-cell</span> <span class="err">*</span><span class="na">matCellDef=</span><span class="s">"let element"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/mat-cell&gt;</span>
    <span class="nt">&lt;/ng-container&gt;</span>

    <span class="nt">&lt;mat-header-row</span> <span class="na">class=</span><span class="s">"list-header-style"</span>
                    <span class="err">*</span><span class="na">matHeaderRowDef=</span><span class="s">"displayedColumns"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/mat-header-row&gt;</span>
    <span class="nt">&lt;mat-row</span> <span class="err">*</span><span class="na">matRowDef=</span><span class="s">"let row; columns: displayedColumns;"</span><span class="nt">&gt;&lt;/mat-row&gt;</span>
  <span class="nt">&lt;/mat-table&gt;</span>

  <span class="nt">&lt;mat-paginator</span> <span class="err">#</span><span class="na">paginator</span>
                 <span class="err">[</span><span class="na">pageSize</span><span class="err">]="</span><span class="na">5</span><span class="err">"</span>
                 <span class="err">[</span><span class="na">pageSizeOptions</span><span class="err">]="[</span><span class="na">5</span><span class="err">,</span> <span class="na">10</span><span class="err">,</span> <span class="na">20</span><span class="err">]"</span>
                 <span class="na">showFirstLastButtons</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/mat-paginator&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Table 상단에 <code class="highlighter-rouge">Get DATA!</code>라는 버튼을 만들고 event binding을 시켰습니다. 
마지막으로 <code class="highlighter-rouge">list-box.component.ts</code> 파일의 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">HttpClient</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"@angular/common/http"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MatTableDataSource</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/material'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MatPaginator</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/material'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ViewChild</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">HttpSupportService</span><span class="p">}</span> <span class="k">from</span> <span class="s2">"../http-support.service"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bdate</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btranslator</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bpublisher</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bprice</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">bisbn</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bimgurl</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-list-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./list-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./list-box.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ListBoxComponent</span> <span class="p">{</span>

  <span class="nx">displayedColumns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'bisbn'</span><span class="p">,</span> <span class="s1">'btitle'</span><span class="p">,</span> <span class="s1">'bauthor'</span><span class="p">,</span> <span class="s1">'bprice'</span><span class="p">];</span>
  <span class="nx">dataSource</span><span class="p">;</span>
  <span class="nl">books</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">[];</span>

  <span class="p">@</span><span class="nd">ViewChild</span><span class="p">(</span><span class="nx">MatPaginator</span><span class="p">)</span> <span class="nx">paginator</span><span class="p">:</span> <span class="nx">MatPaginator</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="nx">getData</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">getBooks</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MatTableDataSource</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="o">&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">dataSource</span><span class="p">.</span><span class="nx">paginator</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">paginator</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>주입된 Service객체를 이용해서 Service에 저장되 있는 JSON데이터를 가져다가 Table의 DataSource에 설정하게 됩니다.</p>

<hr />

<p>내용이 좀 많지만 천천히 따라가면서 살펴보시면 어렵지 않게 이해하실 수 있습니다. 
그림으로 보자면 아래와 같은 형태입니다.</p>

<p><img src="assets/built/images/service-mediator-pattern.jpg" alt="service-mediator-pattern" /></p>

<hr />

<p>동작은 잘 하지만 <code class="highlighter-rouge">list-box</code> Component에 데이터를 가져오기 위해서 버튼을 한번 더 클릭해야 한다는 것이 좀 그렇네요.
Service에 의해서 데이터가 공유되는 건 확인했지만 새로 검색을 해서 데이터가 변경되면 당연히 list쪽에서는 데이터가
자동으로 변경되지 않습니다.</p>

<p>이 문제는 RxJS를 이용해서 처리할 수 있습니다. 다음 포스트에서는 RxJS를 이용해서 데이터의 흐름을 
<code class="highlighter-rouge">subscribe</code>(구독) 하고 구독하고 있는 데이터를 어떻게 변경해야 하는지에 대해서 알아보겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(13) - Service</title>
	  <link>http://localhost:4000/angular-lecture-data-share-service</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-12T19:40:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-data-share-service</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Service</strong></p>

<p>이번 포스트는 Angular의 <code class="highlighter-rouge">Service</code>에 대해서 알아보겠습니다. 먼저 Service의 기본적인 사항들을 알아본 후 이를 통해 데이터를 공유하는
<code class="highlighter-rouge">Service Mediator Pattern</code>으로 넘어가면 될 듯 하네요.</p>

<p>이 Service는 Angular에만 존재하는 개념이 아닙니다. 객체지향 프로그래밍을 다뤄보신 분은 익히 들어본 개념입니다. 특히 <code class="highlighter-rouge">Spring</code>과 
같은 Framework이나 <code class="highlighter-rouge">MVC</code> Pattern을 다뤄보신 분들이라면 쉽게 이해하실 수 있는 내용입니다.</p>

<p>우리는 Angular를 하고 있으니 여기에 맞춰 설명을 하자면 Component는 View를 표현하고 관리하는게 주된 역할입니다. 즉, 데이터를 
받아와서 View에 출력한다던지 View의 값이 변경되면 그걸 또 어떻게 처리한다던지하는 View와 밀접한 로직을 Component class가
가지고 있게 됩니다.</p>

<p>만약 View를 처리하는 로직 이외의 별도의 로직이 필요하면 그 로직은 어디에 두는것이 좋을까요? 로그인 처리를 할때
필요한 인증로직이라던지 혹은 서버와의 데이터 통신을 위한 REST 서버의 호출같은 로직을 그냥 필요할 때마다 Component안에 
집어 넣어서 처리하는게 좋을까요?</p>

<p>우리는 <code class="highlighter-rouge">CBD</code>(Component Based Development)를 하고 있습니다. 각각의 Component는 자신의 주된 관심사에 집중하게끔 코드를 작성해야
합니다. 객체지향설계에서 얘기하는 <code class="highlighter-rouge">SRP</code>(Single Responsibility Principle)을 생각하시면 됩니다. Component안에 다른 관심사가
존재하면 Component의 독립성이 보장되지 못하고 결국 중복 코드가 발생하며 Component의 재사용과 유지보수에 문제가 발생하게
되겠죠.</p>

<p>그래서 위에서 얘기한 별도의 로직들은 다른 곳에서 관리할 필요가 있습니다. 
<code class="highlighter-rouge">Service</code>라는 걸 이용해서 이 로직들을 작성하고 다른 Component에서 이 Service를 가져다가
사용하는 식으로 관리를 하면 <code class="highlighter-rouge">SoC</code>(Separation of Concern)원칙에 잘 들어맞을 거 같습니다.</p>

<p>이렇게 Component와 Service를 분리해서 작성하고 Component에서 Service를 사용하는 건 좋은데 
사용할 때 문제가 하나 있습니다. <code class="highlighter-rouge">Dependency</code>라는게 생기는 거죠. 쉽게 단위 코드로 Component에서
Service를 사용하는 예를 한번 보죠. 아래는 Component class입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">MyService</span> <span class="nx">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyService</span><span class="p">();</span>
<span class="nx">service</span><span class="p">.</span><span class="nx">getUserAuth</span><span class="p">(</span><span class="s1">'moon9342'</span><span class="p">);</span>
</code></pre></div></div>

<p>pseudocode 입니다. Component class안에서 직접 Service 객체를 생성해서 이용하는 경우입니다. 이런 경우 우리 Component는
Service에 의존하게 됩니다. 이걸 <code class="highlighter-rouge">Dependency Relationship</code>(의존관계)이 존재한다 라고 표현하기도 합니다. 이 때 Component
class의 입장에서 Service 객체를 <code class="highlighter-rouge">Dependency</code>라고 표현합니다.</p>

<p>이렇게 의존관계가 성립되면 Service가 변경되었을 때 우리 Component는 그에 따른 영향을 받을 수 밖에 없습니다. 
연관관계가 강하게 성립되어서 서로 독립적으로 사용하는게 힘들어지는것이고 재사용이나 유지보수에 문제가 생기게 되겠네요.</p>

<p>이 문제를 해결하는 Design Pattern이 바로 <code class="highlighter-rouge">DI</code>(Dependency Injection)입니다. 우리 Service객체(Dependency)를 사용하는 객체인
Component에게 주입해서 사용하는 것입니다. 주입하는 방법은 일반적으로 constructor를 이용하는 방법과 setter를 이용하는 방법이
있는데 Angular는 <code class="highlighter-rouge">constructor injection</code>을 지원합니다.</p>

<p>즉, Component가 직접 Service를 <code class="highlighter-rouge">new</code> keyword로 생성하는 것이 아니라 Angular Framework이 Service를 Component가 사용할 있도록
Service객체를 생성해서 Component에게 넣어주는 방식입니다. 이걸 <code class="highlighter-rouge">IoC</code>(Inversion of Control)라고 합니다. 
Angular Framework은 IoC Container입니다.</p>

<p>이론적인 배경을 간단히 설명했으니 이제 Service를 우리 예제에 추가해보겠습니다. Angular application은 Module의 집합입니다. 
Module은 크게 <code class="highlighter-rouge">Feature Module</code>과 <code class="highlighter-rouge">Shared Module</code>이 있다는 얘기 혹시 기억하시나요? 
어디에 Service를 생성하느냐 하는 문제인데 사실 case-by-case입니다.
특성상 여러 Feature Module에서 사용하는 공통 로직의 개념이면 따로 Shared Module을 만들어서 그 안에 Service를 
포함시키는게 좋습니다. 하지만 우리 예제처럼 <code class="highlighter-rouge">bookSearch</code> Module에서만 사용할 생각이면 해당 Module안에 포함시키는게
더 좋은 선택이겠죠.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Service 생성</strong></p>

<p>다음의 코드를 이용해 우리 <code class="highlighter-rouge">bookSearch</code> Module에 서비스를 하나 추가합니다.</p>

<p>command 창을 열어서 다음과 같은 명령어를 실행시킵니다.</p>

<blockquote>
  <p><strong>ng generate service HttpSupport</strong></p>
</blockquote>

<p>성공적으로 수행되면 현재 Module 폴더에 2개의 파일이 생성됩니다. 하나는 SPEC 파일이고 나머지 하나가 바로 Service 입니다.</p>

<p>다음은 <code class="highlighter-rouge">http-support.service.ts</code> 파일의 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpSupportService</span> <span class="p">{</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>주의해서 보셔야 하는 부분은 <code class="highlighter-rouge">@Injectable</code> decorator입니다. 해당 class가 다른 class에 주입(Injection)될 수 있다는걸
의미합니다. 아까도 설명했듯이 주입은 생성자를 이용하게 되고 주입과정은 Angular Framework이 담당합니다.</p>

<p>이제 이 안에 JSON 데이터를 가져오는 코드를 작성해야 합니다. 우리 예제의 <code class="highlighter-rouge">list-box</code> Component는 View를 rendering할 때 
HttpClient를 이용해 JSON데이터를 가져와 Material Table로 화면에 바로 출력합니다. 이 부분을 변경해야겠죠.
<code class="highlighter-rouge">search-box</code> Component에서 Search! 버튼을 클릭하면 HttpClient를 이용해서 데이터를 가져와서 그 데이터를 <code class="highlighter-rouge">list-box</code>가
사용할 수 있도록 처리해야 합니다.</p>

<p>원래는 Back End 프로그램도 하나 작성해서 RESTful 서비스 하는걸 예로 들어야 하는데 서버쪽 프로그램이 없으니 그냥 JSON 파일로
부터 데이터를 받는걸로 처리했습니다.</p>

<p>다음은 수정된 <code class="highlighter-rouge">http-support.service.ts</code> 파일의 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">HttpClient</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"@angular/common/http"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bdate</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btranslator</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bpublisher</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bprice</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">bisbn</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bimgurl</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpSupportService</span> <span class="p">{</span>

  <span class="nl">books</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">[];</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">HttpClient</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">getJsonData</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="s1">'assets/data/book.json'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="k">this</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">res</span><span class="p">;</span>
           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">);</span>
        <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>interface <code class="highlighter-rouge">IBook</code>도 저런식으로 코드마다 등장해서는 안되겠죠. 원래 따로 빼서 관리해야 합니다. 
하지만 예제를 좀 이해하기 쉽도록 그냥 중복해서 썻습니다. ^^;;</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">HttpClient</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>생성자로 인자가 하나 들어옵니다. 사실 이것도 HttpClient 타입의 객체가 우리 서비스 안으로 Injection되는 것입니다.
생성자에 인자를 받으면서 Access Modifier를 이용하면 class안에 속성으로 자동 지정됩니다. 여기서는 private으로 
Injection된 HttpClient 객체를 받았습니다.</p>

<p><code class="highlighter-rouge">getJsonData()</code> method가 호출되면 Injection받은 HttpClient 객체를 이용해서 파일로부터 
JSON 데이터를 읽어들인 후 console에 정상적으로 읽었는지 출력합니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Service Injection</strong></p>

<p>위에서 생성한 Service 객체를 search-box Component에 Injection한 후 사용해 보겠습니다.</p>

<p>다음은 <code class="highlighter-rouge">search-box.component.ts</code> 파일의 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span>
  <span class="nx">Input</span><span class="p">,</span> <span class="nx">Output</span><span class="p">,</span> <span class="nx">EventEmitter</span>
<span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">HttpSupportService</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"../http-support.service"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-search-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./search-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./search-box.component.css'</span><span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">HttpSupportService</span>
  <span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SearchBoxComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

  <span class="nl">_bookCategory</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="c1">//@Input() bookCategory:string;</span>
  <span class="c1">//@Input('bookCategory') mySelected:string;</span>

  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span>
  <span class="kd">set</span> <span class="nx">bookCategory</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">value</span> <span class="o">!=</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 추가적인 작업이 들어올 수 있습니다.</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span> <span class="o">=</span> <span class="s1">'category: '</span> <span class="o">+</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="p">}</span>

  <span class="p">@</span><span class="nd">Output</span><span class="p">()</span> <span class="nx">searchEvent</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">();</span>

  <span class="nx">keyword</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="na">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="nx">setKeyword</span><span class="p">(</span><span class="na">keyword</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">keyword</span> <span class="o">=</span> <span class="nx">keyword</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchEvent</span><span class="p">.</span><span class="nx">emit</span><span class="p">({</span>
      <span class="na">keyword</span> <span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">keyword</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="na">category</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">'category: '</span><span class="p">,</span><span class="s1">''</span><span class="p">)}</span><span class="s2">`</span>
    <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">getJsonData</span><span class="p">();</span>

  <span class="p">}</span>

  <span class="nx">inputChange</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>

  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>기존 코드에서 변경된 부분을 살펴보면</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">HttpSupportService</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"../http-support.service"</span><span class="p">;</span>
</code></pre></div></div>

<p>기본적으로 import는 시켜줘야 사용할 수 있겠지요.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>constructor를 이용해 Service가 Injection되었습니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">getJsonData</span><span class="p">();</span>
</code></pre></div></div>

<p>Injection받은 Service의 method를 호출하는 부분입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-search-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./search-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./search-box.component.css'</span><span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">HttpSupportService</span>
  <span class="p">]</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Angular Framework에 어떤 class가 Injection이 되는지 알려줘야 합니다. Component의 Metadata부분에
<code class="highlighter-rouge">providers</code>를 이용해 처리해야 합니다.</p>

<p>실행해보면 정상적으로 console에 JSON데이터가 출력되는걸 확인하실 수 있습니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Injector</strong></p>

<p>기본적으로 Angular Framework은 dependency객체를 어떻게 생성해야 하는지 알지 못합니다. 그래서 우리가 Component의 
Metadata를 이용해서 <code class="highlighter-rouge">providers</code>에 그 정보를 명시했었지요. 이 정보를 근간으로 <code class="highlighter-rouge">Injector</code>가 의존객체를 생성하고
주입합니다.</p>

<p>정리하자면 Component가 생성될 때 Angualr는 Injection에 필요한 객체를 Injector에 요청합니다. 이 Injector는 
이미 생성한 객체들을 담고 있는 Container를 유지하고 있는데 이 안에 객체가 있으면 바로 주입하고 그렇지 않으면
의존객체를 생성한 후 주입하게 됩니다.</p>

<p>그림으로 표현하면 다음과 같습니다.</p>

<p><img src="assets/built/images/angular-injector.png" alt="angular-injector" /></p>
<div class="img-reference">( 이미지 출처 : https://angular.io/guide/architecture )</div>

<p>여기서 주의해야 할 점이 있는데 <strong>각각의 Component 각자 하나씩의 Injector를 가지고 있습니다.</strong> Component는 tree형식으로
구성되니 Injector 역시 tree형태로 구성이 되게됩니다. 만약 Injection요청에 대한 내용이 현재 Component의 providers부분에
명시되어 있지 않으면 부모 Component의 providers에서 검색하게 됩니다. 이렇게 부모로 타고 올라가면서 의존객체를 찾게 되는것이죠.
만약 상위 Component에서 의존객체를 생성해 놓았으면 하위 Component에서 따로 선언하지 않아도 사용이 가능합니다.</p>

<p>또한 Component의 providers에 등록해 놓을 수도 있지만 Module의 providers에도 등록할 수 있습니다. 이런 경우 해당 Module안에
있는 모든 Component들이 해당 의존모듈을 사용할 수 있게 되겠네요. 최상위 Component인 Root Component가 가지고 있는
Root Injector는 Application 전역에서 사용가능한 의존모듈을 가지고 있게 되겠네요.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Provider</strong></p>

<p>위에서 설명했듯이 Module안에 providers로 등록한 의존객체는 Module안에서 사용이 가능합니다. Component에서 등록한 의존객체는
자신과 자식 Component에서 사용이 가능하지요.</p>

<p>이렇게 보면 Module과 Component에 등록하는게 크게 차이가 없어 보이지만 Module에 등록하는 경우 의존객체는 하나의 객체가 
생성되서 사용됩니다. 즉, <code class="highlighter-rouge">Singleton</code> 형태로 사용된다는 것이죠. 반면 Component에 등록된 의존객체는 해당 Component가 
생성될 때 마다 의존객체가 따로 생성되게 됩니다.</p>

<p>따라서 정보공유를 목적으로 하는 Service Mediator Pattern을 이용할 경우 일반적으로 Module에 의존객체를 등록해서 사용하는것이
좋습니다.</p>

<p>이 provider에 대해서 조금만 더 알아보도록 하죠.</p>

<p>Component안에서 의존객체를 등록하려면 다음의 코드를 이용합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-search-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./search-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./search-box.component.css'</span><span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">HttpSupportService</span>
  <span class="p">]</span>
<span class="p">})</span>
</code></pre></div></div>

<p>우리는 지금 의존객체라는 표현을 쓰면서 객체만이 주입되는식으로 표현했는데 실제 객체뿐만 아니라 <code class="highlighter-rouge">Value</code>도 주입할 수 있습니다. 
일단 먼저 의존객체를 주입하는 방식에 대해서 코드를 조금만 상세히 표현해 보겠습니다. 위의 코드는 사실 밑의 코드의 축약형 입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-search-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./search-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./search-box.component.css'</span><span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">provide</span><span class="p">:</span> <span class="nx">HttpSupportService</span><span class="p">,</span>    <span class="c1">// 데이터 타입</span>
      <span class="na">useClass</span><span class="p">:</span> <span class="nx">HttpSupportService</span>    <span class="c1">// 실제 객체를 생성하기 위해 필요한 class명</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">})</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">provide</code>의 값과 <code class="highlighter-rouge">useClass</code>의 값이 같을 경우 축약형으로 표현할 수 있습니다. provide는 만들어지는 객체의 데이터 타입입니다.
useClass는 실제 객체를 생성하기 위해 사용되는 class명이구요. 당연히 두개가 틀릴 수 있습니다. <code class="highlighter-rouge">interface</code>를 이용하거나 
<code class="highlighter-rouge">duck typing</code>을 이용하면 서로 다른 데이터 타입과 class를 사용할 수 있습니다.</p>

<p>duck typing에 대해서는 <a href="./typescript-interface" target="_blank">여기</a>를 클릭하시면 간단한 내용을 확인하실 수 있습니다.</p>

<p>이번에는 의존객체가 아닌 고정값을 주입하는 방법에 대해서 알아보겠습니다. 일반적인 예는 configuration 값을 주입받는 경우입니다.
간단하게 환경설정파일을 하나 만들어서 그 안에 configuration내용을 채워놓고 그 값을 주입받아 보겠습니다.</p>

<p>command 창을 열어 다음의 명령을 실행해서 하나의 class를 생성합니다. 현재 command 창의 working directory는
<code class="highlighter-rouge">search-box</code> Component의 위치입니다.</p>

<blockquote>
  <p><strong>ng generate class jsonConfig</strong></p>
</blockquote>

<p><code class="highlighter-rouge">json-config.ts</code> 파일이 생성됩니다. 해당 파일에 다음과 같이 우리가 사용하는 JSON 파일에 대한 경로와 파일명을 설정정보로
입력합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">JsonConfig</span> <span class="p">{</span>
  <span class="nl">url</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">JSON_DATA_CONFIG</span><span class="p">:</span> <span class="nx">JsonConfig</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">url</span><span class="p">:</span> <span class="s1">'assets/data/'</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span> <span class="s1">'book.json'</span>
<span class="p">};</span>
</code></pre></div></div>

<p>다음은 <code class="highlighter-rouge">search-box.component.ts</code> 파일의 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span>
  <span class="nx">Input</span><span class="p">,</span> <span class="nx">Output</span><span class="p">,</span> <span class="nx">EventEmitter</span>
<span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">HttpSupportService</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"../http-support.service"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">JSON_DATA_CONFIG</span><span class="p">,</span> <span class="nx">JsonConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"./json-config"</span><span class="p">;</span>


<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-search-box'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./search-box.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./search-box.component.css'</span><span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">provide</span><span class="p">:</span> <span class="nx">HttpSupportService</span><span class="p">,</span>
      <span class="na">useClass</span><span class="p">:</span> <span class="nx">HttpSupportService</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">provide</span><span class="p">:</span> <span class="nx">JsonConfig</span><span class="p">,</span>
      <span class="na">useValue</span><span class="p">:</span> <span class="nx">JSON_DATA_CONFIG</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">SearchBoxComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

  <span class="nl">_bookCategory</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="c1">//@Input() bookCategory:string;</span>
  <span class="c1">//@Input('bookCategory') mySelected:string;</span>

  <span class="p">@</span><span class="nd">Input</span><span class="p">()</span>
  <span class="kd">set</span> <span class="nx">bookCategory</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="nx">value</span> <span class="o">!=</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 추가적인 작업이 들어올 수 있습니다.</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span> <span class="o">=</span> <span class="s1">'category: '</span> <span class="o">+</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="p">}</span>

  <span class="p">@</span><span class="nd">Output</span><span class="p">()</span> <span class="nx">searchEvent</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">();</span>

  <span class="nx">keyword</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="na">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">,</span>
              <span class="kr">private</span> <span class="na">jsonConfig</span><span class="p">:</span><span class="nx">JsonConfig</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="nx">setKeyword</span><span class="p">(</span><span class="na">keyword</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">keyword</span> <span class="o">=</span> <span class="nx">keyword</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchEvent</span><span class="p">.</span><span class="nx">emit</span><span class="p">({</span>
      <span class="na">keyword</span> <span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">keyword</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="na">category</span><span class="p">:</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">_bookCategory</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">'category: '</span><span class="p">,</span><span class="s1">''</span><span class="p">)}</span><span class="s2">`</span>
    <span class="p">});</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">httpSupportService</span><span class="p">.</span><span class="nx">getJsonData</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">jsonConfig</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">jsonConfig</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>

  <span class="p">}</span>

  <span class="nx">inputChange</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>

  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>기존에 비해 몇가지 사항이 달라졌습니다. <code class="highlighter-rouge">Value</code>를 Injection받을 때 어떻게 처리해야 하는지를 유심히 보시면 됩니다.</p>

<p>service의 method를 호출할 때 주입값을 가지고 method를 호출하기 때문에 service의 코드도 변경해야 합니다.</p>

<p>다음은 <code class="highlighter-rouge">http-support.service.ts</code> 파일의 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">HttpClient</span><span class="p">}</span> <span class="k">from</span> <span class="s2">"@angular/common/http"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">IBook</span> <span class="p">{</span>
  <span class="nl">bauthor</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bdate</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btranslator</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bpublisher</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">btitle</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bprice</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="nl">bisbn</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="nl">bimgurl</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">HttpSupportService</span> <span class="p">{</span>

  <span class="nl">books</span><span class="p">:</span> <span class="nx">IBook</span><span class="p">[];</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">HttpClient</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">getJsonData</span><span class="p">(</span><span class="nx">url</span><span class="p">:</span><span class="nx">string</span><span class="p">,</span> <span class="nx">name</span><span class="p">:</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">IBook</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">url</span><span class="p">}${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="p">{</span>
           <span class="k">this</span><span class="p">.</span><span class="nx">books</span> <span class="o">=</span> <span class="nx">res</span><span class="p">;</span>
           <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">books</span><span class="p">);</span>
        <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>마지막으로 한가지가 더 남아있습니다. 의존객체를 생성할 때 객체를 그대로 사용하는게 아니라 특정 로직을 거쳐 의존객체를 생성해
사용할 수 있습니다. 객체지향에서 나왔던 <code class="highlighter-rouge">Factory Pattern</code> 생각하시면 됩니다. 이 부분은 여기서 따로 설명하지는 않겠습니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Optional Dependency</strong></p>

<p><code class="highlighter-rouge">Optional Dependency</code>는 의존객체의 주입이 필수가 아니라는 것을 의미합니다. <code class="highlighter-rouge">@Optional</code> decorator를 이용하면 의존객체가
존재하지 않더라도 프로그램 오류가 나지 않습니다.</p>

<p>단순히 생성자에서 의존객체를 주입받을 때 <code class="highlighter-rouge">@Optional</code> decorator를 명시하시면 됩니다. 물론 의존객체가 들어오지 않을때의
로직처리는 해 주어야 합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">httpSupportService</span><span class="p">:</span><span class="nx">HttpSupportService</span><span class="p">,</span>
            <span class="p">@</span><span class="nd">optional</span> <span class="kr">private</span> <span class="nx">jsonConfig</span><span class="p">:</span><span class="nx">JsonConfig</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<hr />

<p>이번 포스트에서는 Angular의 Service에 대해서 알아보았습니다. 기본적인 Service의 사용방법을 먼저 숙지하신 후 이 Service를
이용해 데이터를 공유하는 방법으로 넘어가면 될 듯 보입니다. 다음 포스트는 <code class="highlighter-rouge">Service Mediator Pattern</code>을 이용한 Component간
데이터 공유에 대해서 알아보도록 하겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(12) - 데이터공유(Content Projection)</title>
	  <link>http://localhost:4000/angular-lecture-data-share-4</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-12T11:13:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-data-share-4</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">Content Projection</strong></p>

<p>이번 포스트는 과거 AngularJS에서 <code class="highlighter-rouge">transclusion</code>이라고 불리었던 <code class="highlighter-rouge">Content Projection</code>에 대해서 알아보겠습니다. 쉽게 말하자면
부모 Component가 자식 Component에게 template을 전달해 줄 수 있는 기능입니다. 이 역시 우리 예제에서는 필요없는 
부분이지만 간단하게 내용을 추가해서 알아보겠습니다.</p>

<p>다음은 <code class="highlighter-rouge">book-search-main.component.html</code>의 내용입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bookSearch-outer"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"d-flex align-items-center p-3 my-3 text-white-50 bg-purple rounded box-shadow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"mr-3"</span> <span class="na">src=</span><span class="s">"assets/images/search-icon.png"</span> <span class="na">alt=</span><span class="s">""</span> <span class="na">width=</span><span class="s">"48"</span> <span class="na">height=</span><span class="s">"48"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"lh-100"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h5</span> <span class="err">#</span><span class="na">resultStatus</span> <span class="na">class=</span><span class="s">"mb-0 text-white lh-100"</span><span class="nt">&gt;</span>Search Result : {{searchTitle}}<span class="nt">&lt;/h5&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"example-container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;mat-form-field&gt;</span>
      <span class="nt">&lt;mat-select</span> <span class="na">placeholder=</span><span class="s">"도서종류"</span>
                  <span class="err">#</span><span class="na">bookCategorySelect</span>
                  <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">selectedValue</span><span class="err">"</span>
                  <span class="err">(</span><span class="na">ngModelChange</span><span class="err">)="</span><span class="na">changeValue</span><span class="err">(</span><span class="na">bookCategorySelect</span><span class="err">.</span><span class="na">value</span><span class="err">)"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;mat-option</span> <span class="err">*</span><span class="na">ngFor=</span><span class="s">"let category of bookCaterory"</span>
                    <span class="err">[</span><span class="na">value</span><span class="err">]="</span><span class="na">category</span><span class="err">.</span><span class="na">value</span><span class="err">"</span><span class="nt">&gt;</span>
          {{ category.viewValue }}
        <span class="nt">&lt;/mat-option&gt;</span>
      <span class="nt">&lt;/mat-select&gt;</span>
    <span class="nt">&lt;/mat-form-field&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">mat-raised-button</span> <span class="na">color=</span><span class="s">"primary"</span>
            <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">clearCondition</span><span class="err">()"</span><span class="nt">&gt;</span>검색 초기화<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">mat-raised-button</span> <span class="na">color=</span><span class="s">"primary"</span>
            <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">changeDOM</span><span class="err">()"</span><span class="nt">&gt;</span>DOM 직접 변경<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;app-search-box</span> <span class="err">[</span><span class="na">bookCategory</span><span class="err">]="</span><span class="na">displayCategoryName</span><span class="err">"</span>
                    <span class="err">(</span><span class="na">searchEvent</span><span class="err">)="</span><span class="na">changeTitleBar</span><span class="err">($</span><span class="na">event</span><span class="err">)"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p&gt;</span>Content Projection!<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;p&gt;</span>First Paragraph<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;p&gt;</span>Second Paragraph<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/app-search-box&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;app-detail-box&gt;&lt;/app-detail-box&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;app-list-box&gt;&lt;/app-list-box&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div>

<p>기존에 비해 변경된 부분만 보시면 됩니다. 위의 코드 중</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;app-search-box</span> <span class="err">[</span><span class="na">bookCategory</span><span class="err">]="</span><span class="na">displayCategoryName</span><span class="err">"</span>
                <span class="err">(</span><span class="na">searchEvent</span><span class="err">)="</span><span class="na">changeTitleBar</span><span class="err">($</span><span class="na">event</span><span class="err">)"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p&gt;</span>Content Projection!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>First Paragraph<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>Second Paragraph<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/app-search-box&gt;</span>

</code></pre></div></div>

<p>부분을 보면 하위 Component를 포함시키면서 3개의 <code class="highlighter-rouge">&lt;p&gt;</code> Element를 전달한 것을 보실 수 있습니다. 이렇게 부모 Component가
자식 Component에게 특정 template을 전달해 줄 수 있는 기능이라고 생각하시면 됩니다. 자식 Component인
<code class="highlighter-rouge">search-box.component.html</code>은 다음과 같이 작성합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"example-container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;mat-toolbar</span> <span class="err">#</span><span class="na">toolbar</span> <span class="na">class=</span><span class="s">"search-toolbar-style"</span><span class="nt">&gt;</span>
    Search Keyword : {{keyword}}
    <span class="nt">&lt;ng-container</span> <span class="err">*</span><span class="na">ngIf=</span><span class="s">"_bookCategory != null"</span><span class="nt">&gt;</span>
      ( {{_bookCategory}} )
    <span class="nt">&lt;/ng-container&gt;</span>
  <span class="nt">&lt;/mat-toolbar&gt;</span>
  <span class="nt">&lt;mat-form-field&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">matInput</span> <span class="err">#</span><span class="na">inputKeyword</span> <span class="na">placeholder=</span><span class="s">"Search Keyword"</span>
           <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">keyword</span><span class="err">"</span> <span class="err">(</span><span class="na">ngModelChange</span><span class="err">)="</span><span class="na">inputChange</span><span class="err">()"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/mat-form-field&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">mat-raised-button</span> <span class="na">color=</span><span class="s">"warn"</span>
          <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">setKeyword</span><span class="err">(</span><span class="na">inputKeyword</span><span class="err">.</span><span class="na">value</span><span class="err">)"</span><span class="nt">&gt;</span>Search!<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;ng-content&gt;&lt;/ng-content&gt;</span>
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div>

<p>다른 부분은 다 동일하고 맨 마지막에 <code class="highlighter-rouge">&lt;ng-content&gt;&lt;/ng-content&gt;</code> directive가 보입니다. 이 directive가 부모 Component가
전달해 준 template으로 치환되게 됩니다.</p>

<p>다음에는 Service에 대해서 알아본 후 이를 이용한 데이터 공유 방법인 Service Mediator Pattern에 대해서 알아보도록 하겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Angular 강좌(11) - 데이터공유(@ViewChild)</title>
	  <link>http://localhost:4000/angular-lecture-data-share-3</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-12T07:43:00+09:00</pubDate>
	  <guid>http://localhost:4000/angular-lecture-data-share-3</guid>
	  <description><![CDATA[
	     <p><span class="table-of-contents-list">Angular 강좌는 여러 절로 구성되어 있습니다. </span></p>
<ul class="table-of-contents-list">
    <li><a href="./angular-lecture-introduction">Angular 강좌(1) - Introduction</a></li>
    <li><a href="./angular-lecture-development-environment">Angular 강좌(2) - 개발환경세팅</a></li>
    <li><a href="./angular-lecture-component">Angular 강좌(3) - Component</a></li>
    <li><a href="./angular-lecture-material">Angular 강좌(4) - Angular Material</a></li>
    <li><a href="./angular-lecture-exercise-1">Angular 강좌(5) - 실습(1)</a></li>
    <li><a href="./angular-lecture-databinding">Angular 강좌(6) - Data Binding</a></li>
    <li><a href="./angular-lecture-exercise-2">Angular 강좌(7) - 실습(2)</a></li>
    <li><a href="./angular-lecture-material-table">Angular 강좌(8) - Material Table</a></li>
    <li><a href="./angular-lecture-data-share-1">Angular 강좌(9) - 데이터공유(@Input)</a></li>
    <li><a href="./angular-lecture-data-share-2">Angular 강좌(10) - 데이터공유(@Output)</a></li>
    <li><a href="./angular-lecture-data-share-3">Angular 강좌(11) - 데이터공유(@ViewChild)</a></li>
    <li><a href="./angular-lecture-data-share-4">Angular 강좌(12) - 데이터공유(Content Projection)</a></li>
    <li><a href="./angular-lecture-data-share-service">Angular 강좌(13) - Service</a></li>
    <li><a href="./angular-lecture-data-share-service-mediator-pattern">Angular 강좌(14) - Service Mediator Pattern</a></li>
    <li><a href="./angular-lecture-data-share-service-rxjs">Angular 강좌(15) - Service RxJS</a></li>
    <li><a href="./angular-lecture-table-event">Angular 강좌(16) - Material Table Event</a></li>
    <li><a href="./angular-lecture-inspection-1">Angular 강좌(17) - 중간 정리</a></li>
    <li><a href="./angular-lecture-directive">Angular 강좌(18) - Directive</a></li>
    <li><a href="./angular-lecture-pipe">Angular 강좌(19) - Pipe</a></li>
    <li><a href="./angular-lecture-lifecycle">Angular 강좌(20) - Component Lifecycle</a></li>
</ul>

<hr />

<p><strong class="subtitle_fontAwesome">부모 Component의 직접적인 자식 요소 제어</strong></p>

<p>이번 포스트는 부모 Component에서 자식 요소에 직접 접근하는 방법에 대해서 알아보겠습니다. 이전 포스트에서 <code class="highlighter-rouge">@Input</code> decorator를
이용해 부모 Component에서 자식 Component로 데이터를 전달하는 방법에 대해서 알아보았는데 이번에는 약간 다릅니다.</p>

<p>부모 Component는 자식 Component 객체뿐만 아니라 자식으로 포함된 <code class="highlighter-rouge">Directive</code>에 직접 접근할 수 있고 또한
Component가 Rendering하는 View자체에 직접 접근할 수 있습니다.</p>

<p>하지만 이런 접근 방법이 항상 좋은건 아닙니다. 오히려 좋지 않은 현상이 발생하게 됩니다. 예를 들어 Component가 직접적으로 
DOM에 접근해서 제어하는 코드를 작성한다고 가정해 보죠. 일단 간단하게 프로그램을 구현할 수 있으나 나중에 Component의 
View가 변경되면 Component에서 처리하는 부분도 당연히 그에 맞게 바뀌어야 합니다. 
Component의 재사용성과 유지보수성에 문제가 생길 여지가 있습니다.</p>

<p>그렇기 때문에 이런 직접적인 접근방식은 꼭 필요한 경우가 아니면 지양하는 것이 좋습니다.</p>

<p>그럼 천천히 한번 알아보도록 하죠.</p>

<hr />

<p><strong class="subtitle_fontAwesome">@ViewChild, @ViewChildren Decorator</strong></p>

<p>부모 Component template안에 위치한 모든 자식 요소들을 <code class="highlighter-rouge">ViewChild</code>라고 합니다. 이 ViewChild안에는 자식 Component 객체뿐만
아니라 Component가 Rendering하는 View의 DOM 그리고 Directive가 포함됩니다.</p>

<p>자식 Component객체에 직접 접근하는 방법부터 살펴보도록 하겠습니다.</p>

<p>자식 Component 객체에 직접 접근하려면 <code class="highlighter-rouge">@ViewChild</code> decorator를 이용하시면 됩니다. 조건에 부합되는 객체 1개를 찾게되고
그에 대한 property를 지정해서 사용할 수 있습니다. 만약 <code class="highlighter-rouge">@ViewChildren</code>을 이용하면 조건에 부합되는 객체를 모두 찾게 되고
<code class="highlighter-rouge">QueryList</code> 형태로 객체들의 집합을 얻을 수 있습니다. QueryList는 실제 배열이 아니기 때문에 <code class="highlighter-rouge">toArray()</code> method를 이용해
배열을 얻어내 이용할 수 있습니다.</p>

<p>그럼 간단한 예를 가지고 알아보도록 하죠.</p>

<p>부모 Component에 초기화버튼을 하나 만들어서 해당 버튼을 누르면 Client가 선택한 도서 종류와 입력된 키워드를 초기화 시키는
작업을 해 보도록 하겠습니다.</p>

<p>먼저 초기화버튼을 만들어야 하니 <code class="highlighter-rouge">book-search-main.component.html</code>부터 수정해야 합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bookSearch-outer"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"d-flex align-items-center p-3 my-3 text-white-50 bg-purple rounded box-shadow"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"mr-3"</span> <span class="na">src=</span><span class="s">"assets/images/search-icon.png"</span> <span class="na">alt=</span><span class="s">""</span> <span class="na">width=</span><span class="s">"48"</span> <span class="na">height=</span><span class="s">"48"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"lh-100"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h5</span> <span class="na">class=</span><span class="s">"mb-0 text-white lh-100"</span><span class="nt">&gt;</span>Search Result : <span class="nt">&lt;/h5&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"example-container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;mat-form-field&gt;</span>
      <span class="nt">&lt;mat-select</span> <span class="na">placeholder=</span><span class="s">"도서종류"</span>
                  <span class="err">#</span><span class="na">bookCategorySelect</span>
                  <span class="err">[(</span><span class="na">ngModel</span><span class="err">)]="</span><span class="na">selectedValue</span><span class="err">"</span>
                  <span class="err">(</span><span class="na">ngModelChange</span><span class="err">)="</span><span class="na">changeValue</span><span class="err">(</span><span class="na">bookCategorySelect</span><span class="err">.</span><span class="na">value</span><span class="err">)"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;mat-option</span> <span class="err">*</span><span class="na">ngFor=</span><span class="s">"let category of bookCaterory"</span>
                    <span class="err">[</span><span class="na">value</span><span class="err">]="</span><span class="na">category</span><span class="err">.</span><span class="na">value</span><span class="err">"</span><span class="nt">&gt;</span>
          
        <span class="nt">&lt;/mat-option&gt;</span>
      <span class="nt">&lt;/mat-select&gt;</span>
    <span class="nt">&lt;/mat-form-field&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">mat-raised-button</span> <span class="na">color=</span><span class="s">"primary"</span>
            <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">clearCondition</span><span class="err">()"</span><span class="nt">&gt;</span>검색 초기화<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;app-search-box</span> <span class="err">[</span><span class="na">bookCategory</span><span class="err">]="</span><span class="na">displayCategoryName</span><span class="err">"</span>
                    <span class="err">(</span><span class="na">searchEvent</span><span class="err">)="</span><span class="na">changeTitleBar</span><span class="err">($</span><span class="na">event</span><span class="err">)"</span><span class="nt">&gt;&lt;/app-search-box&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;app-detail-box&gt;&lt;/app-detail-box&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;app-list-box&gt;&lt;/app-list-box&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>검색 초기화 버튼을 생성하고 해당 버튼을 클릭하면 <code class="highlighter-rouge">clearCondition()</code> method가 호출되도록 처리했습니다.</p>

<p>다음은 부모 Component인 <code class="highlighter-rouge">book-search-main.component.ts</code> 파일입니다. <code class="highlighter-rouge">clearCondition()</code> method를 작성해야하고
해당 method안에서 자신의 검색에 관련된 사항을 초기화하고 자식 Component를 찾아 자식 Component의 property를
초기화시키는 작업을 진행합니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span>
        <span class="nx">ViewChild</span><span class="p">,</span> <span class="nx">ViewChildren</span><span class="p">,</span> <span class="nx">QueryList</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SearchBoxComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"../search-box/search-box.component"</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-book-search-main'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./book-search-main.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./book-search-main.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">BookSearchMainComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

  <span class="nx">selectedValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nx">displayCategoryName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

  <span class="nx">bookCaterory</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="s1">'all'</span><span class="p">,</span> <span class="na">viewValue</span><span class="p">:</span> <span class="s1">'국내외도서'</span><span class="p">},</span>
    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="s1">'country'</span><span class="p">,</span> <span class="na">viewValue</span><span class="p">:</span> <span class="s1">'국내도서'</span><span class="p">},</span>
    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="s1">'foreign'</span><span class="p">,</span> <span class="na">viewValue</span><span class="p">:</span> <span class="s1">'국외도서'</span><span class="p">}</span>
  <span class="p">];</span>

  <span class="nx">searchTitle</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="nx">changeValue</span><span class="p">(</span><span class="nx">category</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">element</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">bookCaterory</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">value</span> <span class="o">==</span> <span class="nx">category</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">displayCategoryName</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">viewValue</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">changeTitleBar</span><span class="p">(</span><span class="nx">searchInfo</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchTitle</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">searchInfo</span><span class="p">.</span><span class="nx">keyword</span><span class="p">}</span><span class="s2"> ( </span><span class="p">${</span><span class="nx">searchInfo</span><span class="p">.</span><span class="nx">category</span><span class="p">}</span><span class="s2"> )`</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">ViewChild</span><span class="p">(</span><span class="nx">SearchBoxComponent</span><span class="p">)</span> <span class="na">searchComp</span><span class="p">:</span> <span class="nx">SearchBoxComponent</span><span class="p">;</span>
  <span class="p">@</span><span class="nd">ViewChildren</span><span class="p">(</span><span class="nx">SearchBoxComponent</span><span class="p">)</span> <span class="na">searchCompArr</span><span class="p">:</span> <span class="nx">QueryList</span><span class="o">&lt;</span><span class="nx">SearchBoxComponent</span><span class="o">&gt;</span><span class="p">;</span>

  <span class="nx">clearCondition</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">selectedValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchTitle</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="cm">/*
    @ViewChild를 사용할 경우
    this.searchComp._bookCategory = null;
    this.searchComp.keyword = null;
*/</span>
    <span class="c1">// @ViewChildren을 사용할 경우</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchCompArr</span><span class="p">.</span><span class="nx">toArray</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="nx">_bookCategory</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchCompArr</span><span class="p">.</span><span class="nx">toArray</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="nx">keyword</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>부모 Component와 자식 Component가 데이터를 공유하는게 아니라 부모 Component가 직접 자식 Component 객체를
제어하는 방식입니다.</p>

<hr />

<p><strong class="subtitle_fontAwesome">Component가 Rendering하는 View의 DOM에 직접 접근</strong></p>

<p>@ViewChild와 @ViewChildren을 이용하면 자식 Component의 객체뿐 아니라 Component가 rendering하는 View의
DOM에 직접 접근할 수 있습니다. 이전에 나왔던 Template Reference Variable을 이용해서 Component가 DOM에 접근하는 것이죠.</p>

<p>우리 예제에 딱히 필요하진 않지만 이해를 돕기 위해 버튼 하나를 더 추가해 어떻게 사용하는지 살펴보겠습니다.</p>

<p><code class="highlighter-rouge">book-search-main.component.html</code>을 수정해 버튼을 하나 더 추가합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
...
<span class="nt">&lt;h5</span> <span class="err">#</span><span class="na">resultStatus</span> <span class="na">class=</span><span class="s">"mb-0 text-white lh-100"</span><span class="nt">&gt;</span>Search Result : <span class="nt">&lt;/h5&gt;</span>
...
...
...
    <span class="nt">&lt;button</span> <span class="na">mat-raised-button</span> <span class="na">color=</span><span class="s">"primary"</span>
            <span class="err">(</span><span class="na">click</span><span class="err">)="</span><span class="na">changeDOM</span><span class="err">()"</span><span class="nt">&gt;</span>DOM 직접 변경<span class="nt">&lt;/button&gt;</span>
...
...            
</code></pre></div></div>

<p>일부만 표시했습니다. 결과를 표시하는 영역에 Template Reference Variable <code class="highlighter-rouge">#resultStatus</code>을 지정했습니다. 그리고 버튼을 하나
추가했구요. 해당 버튼을 클릭하면 <code class="highlighter-rouge">changeDOM()</code> method가 호출되겠네요.</p>

<p>다음은 <code class="highlighter-rouge">book-search-main.component.ts</code> 파일 내용입니다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span><span class="p">,</span>
        <span class="nx">ViewChild</span><span class="p">,</span> <span class="nx">ViewChildren</span><span class="p">,</span> <span class="nx">QueryList</span><span class="p">,</span>
        <span class="nx">ElementRef</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SearchBoxComponent</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"../search-box/search-box.component"</span><span class="p">;</span>


<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'app-book-search-main'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'./book-search-main.component.html'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="s1">'./book-search-main.component.css'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">BookSearchMainComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>

  <span class="nx">selectedValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="nx">displayCategoryName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

  <span class="nx">bookCaterory</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="s1">'all'</span><span class="p">,</span> <span class="na">viewValue</span><span class="p">:</span> <span class="s1">'국내외도서'</span><span class="p">},</span>
    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="s1">'country'</span><span class="p">,</span> <span class="na">viewValue</span><span class="p">:</span> <span class="s1">'국내도서'</span><span class="p">},</span>
    <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="s1">'foreign'</span><span class="p">,</span> <span class="na">viewValue</span><span class="p">:</span> <span class="s1">'국외도서'</span><span class="p">}</span>
  <span class="p">];</span>

  <span class="nx">searchTitle</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="nx">changeValue</span><span class="p">(</span><span class="nx">category</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">element</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">bookCaterory</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">value</span> <span class="o">==</span> <span class="nx">category</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">displayCategoryName</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">viewValue</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">changeTitleBar</span><span class="p">(</span><span class="nx">searchInfo</span><span class="p">)</span> <span class="p">:</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchTitle</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">searchInfo</span><span class="p">.</span><span class="nx">keyword</span><span class="p">}</span><span class="s2"> ( </span><span class="p">${</span><span class="nx">searchInfo</span><span class="p">.</span><span class="nx">category</span><span class="p">}</span><span class="s2"> )`</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">ViewChild</span><span class="p">(</span><span class="nx">SearchBoxComponent</span><span class="p">)</span> <span class="na">searchComp</span><span class="p">:</span> <span class="nx">SearchBoxComponent</span><span class="p">;</span>
  <span class="p">@</span><span class="nd">ViewChildren</span><span class="p">(</span><span class="nx">SearchBoxComponent</span><span class="p">)</span> <span class="na">searchCompArr</span><span class="p">:</span> <span class="nx">QueryList</span><span class="o">&lt;</span><span class="nx">SearchBoxComponent</span><span class="o">&gt;</span><span class="p">;</span>

  <span class="nx">clearCondition</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">selectedValue</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchTitle</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="cm">/*
    @ViewChild를 사용할 경우
    this.searchComp._bookCategory = null;
    this.searchComp.keyword = null;
*/</span>
    <span class="c1">// @ViewChildren을 사용할 경우</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchCompArr</span><span class="p">.</span><span class="nx">toArray</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="nx">_bookCategory</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">searchCompArr</span><span class="p">.</span><span class="nx">toArray</span><span class="p">()[</span><span class="mi">0</span><span class="p">].</span><span class="nx">keyword</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="p">@</span><span class="nd">ViewChild</span><span class="p">(</span><span class="s1">'resultStatus'</span><span class="p">)</span> <span class="na">resultToolbar</span><span class="p">:</span> <span class="nx">ElementRef</span><span class="p">;</span>

  <span class="nx">changeDOM</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">resultToolbar</span><span class="p">.</span><span class="nx">nativeElement</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s1">'DOM을 직접 제어할 수 있어요!!'</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">resultToolbar</span><span class="p">.</span><span class="nx">nativeElement</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">"클릭해보세요!!"</span><span class="p">;</span>
  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>아래부분에 <code class="highlighter-rouge">resultStatus</code> Template Reference Variable을 이용해서 해당 Element의 Reference를 획득하는 부분을 잘 보시면
됩니다. 이렇게 <code class="highlighter-rouge">ElementRef</code> type의 객체를 획득하면 <code class="highlighter-rouge">nativeElement</code> 속성으로 직접 제어할 수 있습니다.</p>

<p>이번 포스트에서는 @ViewChild와 @ViewChildren을 이용해 자식 Component의 객체를 직접 제어하거나 rendering된 View의 DOM에
직접 접근해서 제어하는 방법에 대해서 살펴보았습니다. 다음 포스트는 Angular에서 <code class="highlighter-rouge">Content Projection</code>이라고 불리는 부분에 대해서
살펴보도록 하겠습니다.</p>

<p>End.</p>

<hr />

<p><span class="lecture-reference">Angular 강좌는 아래의 책과 사이트를 참조했습니다.
    조금 더 자세한 사항을 알고 싶으시면 해당 사이트를 방문하세요!!</span></p>
<ul class="lecture-reference">
    <li><a href="https://angular.io/" target="_blank">Angular Official HomePage</a></li>
    <li><a href="https://material.angular.io/" target="_blank">Angular Material Official HomePage</a></li>
    <li><a href="https://scotch.io/tutorials/build-a-mobile-app-with-angular-2-and-ionic-2" target="_blank">Build a Mobile App with Angular 2 and Ionic 2</a></li>
    <li>Angular 첫걸음 - 한빛미디어</li>
    <li>제대로 배우는 Angular 4 - 비제이퍼블릭</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
