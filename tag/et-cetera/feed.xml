<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>http://localhost:4000/</title>
   
   <link>http://localhost:4000/</link>
   <description>얼큰우동TV, 쉽게배우는 IT(Programming,Machine Learning,금융)</description>
   <language>en-uk</language>
   
   <title>
   <![CDATA[ IT Technical Training ]]>
   </title>
   <description>
   <![CDATA[ 얼큰우동TV, 쉽게배우는 IT(Programming,Machine Learning,금융) ]]>
   </description>
   <link>http://localhost:4000/</link>
   <image>
   <url>http://localhost:4000/assets/built/images/favicon.jpg</url>
   <title>IT Technical Training</title>
   <link>http://localhost:4000/</link>
   </image>
   <generator>Jekyll 3.6.2</generator>
   <lastBuildDate></lastBuildDate>
   <atom:link href="http://localhost:4000/rss.xml" rel="self" type="application/rss+xml"/>
   <ttl>60</ttl>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Arduino</title>
	  <link>http://localhost:4000/arduino</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-02-17T18:00:00+09:00</pubDate>
	  <guid>http://localhost:4000/arduino</guid>
	  <description><![CDATA[
	     <p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Arduino 개요</strong></p>

<p><code class="highlighter-rouge">아두이노(Arduino)</code>는 이탈리아에서 개발한 오픈소스 보드로 이탈리아어로 
<code class="highlighter-rouge">강한 친구</code>라는 뜻을 가지고 있습니다.</p>

<blockquote>
  <p>아두이노는 우리가 흔히 얘기하는 컴퓨터가 아닙니다. <code class="highlighter-rouge">라즈베리파이</code>와는 다르게 아두이노는 
우리가 사용하는 컴퓨터처럼 OS를 설치하고 응용프로그램을 설치하는 등의 일을 할 수 없습니다. 
참고로 라즈베리파이는 OS설치와 여러 응용프로그램 설치가 가능한 싱글보드 컴퓨터입니다. 우리과정에서는
라즈베리파이대신에 <code class="highlighter-rouge">라떼판다(Latte panda)</code>를 이용할 예정입니다. 라떼판다는 아두이노 <code class="highlighter-rouge">레오나르도</code> 
칩이 코프로세서로 설치되어 있습니다.</p>
</blockquote>

<p>아두이노는 <code class="highlighter-rouge">Micro-Controller</code> 입니다. 즉, 코드를 돌리는 단순한 기계입니다.</p>

<p>아마도 아두이노란 용어는 많이 들어봤을텐데 이런 아두이노가 왜 이렇게 각광을 받고 있을까요? 
그 이유는 <code class="highlighter-rouge">사물인터넷(IoT, Internet of things)</code>과 맞물려 있기 때문입니다.</p>

<p>사물인터넷(IoT)은 일반적인 물건처럼 보이지만 1)통신장비를 결합하고 
2)고도화된 통신기술을 이용하여 3)특별한 작업을 수행하는 장비를 지칭합니다.</p>

<p>간단한 예를 들자면 사용자의 음성을 인식하는 스피커라든지, 거울에 그날의 날씨나 뉴스와 같은 
내용을 띄워주는 스마트 미러와 같은 것이 있습니다.</p>

<p>이러한 사물인터넷을 구현하기 위해 그 안에 들어가는 Controller는 다음과 같은 특징을 가져야 합니다.</p>

<ul>
  <li>가격이 저렴해야 한다.</li>
  <li>프로그램 실행코드를 기판에 주입(upload)하는 과정이 간편해야 한다.</li>
  <li>센서의 사용이 간편해야 한다.</li>
</ul>

<p>Arduino는 이러한 특징을 가지고 있는 Micro Controller입니다.</p>

<p>아두이노는 제품의 이름이 아니라 <code class="highlighter-rouge">브랜드명</code>입니다. 
아두이노라는 브랜드 안에 여러개의 모델이 존재하고 있습니다. 마치 갤럭시라는 브랜드안에 S9,S10,S20와
같은 모델이 있는것처럼 말이죠. 아두이노의 가장 대표적인 모델(가장 기본적인 모델)은 <code class="highlighter-rouge">Uno</code> 입니다.</p>

<p>굉장히 많은 아두이노 모델(버전)들이 있고 각 버전들은 나름대로의 특징을 가지고 있습니다. 
아주 작은 크기로 소형화된 버전, 크기가 크지만 상대적으로 고사양인 버전, wifi기능에 특화된 버전같은
여러 버전들이 있습니다.</p>

<p>일반적으로 많이 사용하는 버전은 다음과 같은 3가지라고 볼 수 있습니다.</p>

<ul>
  <li><strong>Arduino Uno</strong> : 가장 일반적인 모델</li>
  <li><strong>Arduino Mega ADK</strong> : 크기가 크지만 꽤나 복잡한 연산을 수행.</li>
  <li><strong>Arduino Pro Mini</strong> : 크기가 작아 저전력으로 사용가능.</li>
</ul>

<p>아두이노에 대해서 또 알아두어야 할 점은 <code class="highlighter-rouge">오픈소스 하드웨어</code>란 점입니다.
즉, 설계와 활용법이 모두 대중적으로 공개되어 있습니다. 따라서 아두이노 호환보드라고 불리는
유사제품들이 굉장히 많이 존재합니다. 하지만 정품제품과 이런 호환제품간에 성능이나 기타 
능력면에서 차이는 거의 없다고 보면 됩니다. (가격차이는 좀 있습니다.)</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 전류,전압,저항</strong></p>

<p>아두이노를 사용하기 위해서는 기본적인 전기에 대한 지식이 필요합니다.</p>

<p>전기는 <code class="highlighter-rouge">전압</code>과 <code class="highlighter-rouge">전류</code>로 설명할 수 있는데 전압은 물의 수압과 같은 개념으로 
두 점 사이의 전기적인 전위 차이를 의미합니다.
이 전위차에 의해서 전압이 높은 곳에서 낮으곳으로 전자가 흐르게 됩니다.
건전지의 경우 <code class="highlighter-rouge">플러스(+)</code>가 높은 전압, <code class="highlighter-rouge">마이너스(-)</code>가 낮은 전압입니다.</p>

<p>아두이노 보드 부분에 <code class="highlighter-rouge">POWER</code>라고 적힌 부분 밑에 <code class="highlighter-rouge">3V3</code>, <code class="highlighter-rouge">5V</code>라고 적힌 전원 헤더소켓이 
있습니다. 각각 전압이 3.3V, 5V라는 것을 의미하고 이렇게 전압이 표시된 곳이 
건전지의 <code class="highlighter-rouge">+</code>부분과 같고 전기가 흘러나오는 곳이라고 생각하면 됩니다.</p>

<p><code class="highlighter-rouge">헤더소켓</code>은 핀을 꼽을 수 있는 소켓을 의미하며 점퍼와이어를 연결할 수 있습니다.
<code class="highlighter-rouge">점퍼와이어</code>의 수컷은 핀으로 암컷은 구멍으로 되어 있습니다.</p>

<p><img src="../../assets/built/images/iot-arduino-power.png" alt="아두이노 보드 POWER" /></p>

<p>전원 헤더 소켓의 오른쪽에 <code class="highlighter-rouge">GND</code>라고 적힌 헤더 소켓이 2개 있습니다. 
그리고 <code class="highlighter-rouge">DIGITAL</code>이라고 적힌 곳에도 <code class="highlighter-rouge">GND</code> 헤더 소켓이 존재합니다.</p>

<p>이 <code class="highlighter-rouge">GND</code>는 그라운드라는 의미로 전압이 0V인 곳을 의미합니다. 즉, 건전지의
<code class="highlighter-rouge">마이너스(-)</code>부분과 같고 전기가 빠져나가는 배수로 개념이라고 생각하면 됩니다.</p>

<p>전자부품을 연결할 때 전자제품의 플러스 부분을 3V3, 5V 헤더소켓에 연결하고 
마이너스 부분을 GND 헤더 소켓에 연결하면 됩니다. 아두이노는 일반적으로 <code class="highlighter-rouge">5V</code>를 이용합니다.</p>

<p><code class="highlighter-rouge">전류</code>는 전위가 높은 곳에서 낮은곳으로 전하가 연속적으로 이동하는 형상을 의미합니다. 
물로 비유하면 수압이 높은곳에서 낮은곳으로 물이 흐르며 이 물의 흐름에 의해서 
물레방아가 돌아가게 됩니다. 전자의 흐름을 전류라고 하고 이 전류에 의해서 
전자기기가 동작하게 됩니다.</p>

<p><code class="highlighter-rouge">저항</code>은 물체가 전류의 흐름을 제어하는 것을 의미하며 저항이 높은 물체일수록 전류가 
적게 흐르고 저항이 낮은 물체일수록 전류가 많이 흐르게됩니다. 수도꼭지를 생각하시면 됩니다.</p>

<p>물리학의 기본법칙 중 하나로 <code class="highlighter-rouge">옴의 법칙</code>이라는 것이 있습니다. 
전압, 전류, 저항사이의 관계를 나타내는 법칙으로 전류의 세기는
전압에 비례하고 저항에 반비례한다는 공식입니다. 기본공식이기 때문에 잘 알아두어야 합니다.</p>

<ul>
  <li>전압은 기호로는 <code class="highlighter-rouge">V(Voltage)</code>를 이용하고 단위는 <code class="highlighter-rouge">V(볼트)</code>를 이용한다.</li>
  <li>전류는 기호로는 <code class="highlighter-rouge">I(Intensity)</code>를 이용하고 단위는 <code class="highlighter-rouge">A(암페어)</code>를 이용한다.</li>
  <li>저항은 기호로는 <code class="highlighter-rouge">R(Resistance)</code>을 이용하고 단위는 <code class="highlighter-rouge">옴</code>을 이용한다.</li>
</ul>

<p>전류(I) = 전압(V) / 저항(R)</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Sensor(센서), Actuator(액추에이터), 기타</strong></p>

<p>아두이노는 센서를 이용하여 주위환경에 대한 정보를 수집할 수 있습니다. 밝기 센서, 거리 센서등
여러 종류의 센서를 이용하여 아두이노는 데이터를 수집할 수 있습니다. 또한 아두이노가
어떤 활동을 할 수 있도록 만들어주는 전자부품이 있을 수 있는데 이를 <code class="highlighter-rouge">액추에이터</code>라고 합니다. 
모터, LED 같은 것들이 대표적인 액추에이터입니다.</p>

<p><code class="highlighter-rouge">저항</code>은 전기를 열로 바꾸어주는 전자부품입니다. 저항에는 4개 혹은 그 이상의 띠가 표시되어 있는데
이 띠의 색이 저항값을 의미합니다. 당연히 저항이 높을 수록 더 많은 전기를 열로 바꾸게 됩니다. 
각 저항이 가지는 값은 저항에 둘려져있는 띠의 색상으로 알 수 있습니다. 
교재를 이용해서 각 저항의 값을 알아내는 방법을 알아둘 필요도 있어보입니다.
또는 저항 제품들마다 해당 저항은 몇 옴인지를 표시해 놓고 있는 경우도 있습니다.</p>

<p><code class="highlighter-rouge">다이오드</code>는 전류가 한 방향으로만 흐를 수 있도록 해주는 전자부품입니다. 즉, 전류의 역류를 방지하는
반도체 소자입니다. 
띠가 있는 부분이 <code class="highlighter-rouge">-</code>를 의미하고 띠가 없는 부분이 <code class="highlighter-rouge">+</code>를 의미하는데 전기는 띠가 없는 부분에서 있는
부분으로만 흘러갈 수 있습니다. 즉, 양극(+)에서 음극(-)의 방향으로 전류를 흐르게 합니다.
우리가 회로도를 구성한다고 가정했을 때 그 안에 저항도 넣고, 센서도 넣고, 모터도 넣어서 구성할 수 
있습니다. 이렇게 회로를 다 구성한 후 회로에 전원을 반대로 연결하면 어떻게 될까요?</p>

<p>센서는 고장날테고, 모터는 반대로 돌게되며 스파크나 화재까지 발생할 수 있습니다. 
즉, 안전을 위해 다이오드를 사용해야 합니다. 
모터와 같은 전자부품을 사용하는 경우 다이오드가 필수적으로 들어가야 합니다. 모터가 회전하고 
있는 동안에 모터안의 코일에 에너지가 축적됩니다. 그러다가 모터가 OFF된다면 전원은 끊기지만
코일에 에너지가 남아있는 상태가 되며 모터는 에너지를 방출하려 합니다. 이때 높은 전압을 가진
역방향의 기전력이 발생하게 되고 아두이노 보드나 센서등이 파괴될 수 있습니다. 이를 막기위해서
다이오드를 이용하여 역방향으로 오는 기전력을 차단하여 다른 제품을 안전하게 보호해야 합니다.
다이오드는 안전을 위해서 꼭 사용해 주어야 하며 특히 모터와 같은 코일을 사용하는 회로에서는
반드시 사용해야 하는 부품입니다.</p>

<p><code class="highlighter-rouge">브레드보드</code>(일명 빵판)은 전자부품을 쉽게 연결할 수 있도록 도와줍니다. 
브레드보드안에 가로와 세로방향에 따라 철심이 박혀있기 때문에 전자부품을 연결할 수 있습니다. 
아래의 브레드보드에서 가로로 파진 홈(notch)인 중앙선의 위아래에 위치한 수직방향의 
단자띠(terminal strip)와 수평방향의 버스띠(bus strip)로 구성됩니다. 
단자띠는 부품들간의 연결을 위한것이고 버스띠는 전원공급을
위한 것입니다.(적색선이 +이고, 청색선이 -입니다.)</p>

<p><img src="../../assets/built/images/iot-breadboard-1.png" alt="브레드보드 형식" /></p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 디지털과 아날로그</strong></p>

<p>아두이노를 제어하는 방법은 크게 <code class="highlighter-rouge">디지털</code>과 <code class="highlighter-rouge">아날로그</code> 두가지가 있습니다.
아두이노 보드에서 점퍼 와이어 핀을 꼽을 수 있는 부분을 헤더소켓 이라고 하는데 그냥 짧게 <code class="highlighter-rouge">핀(pin)</code>이라고
부르기도 합니다. 아두이노에서 디지털 신호를 제어할 수 있는 핀을 디지털 핀이라고 부릅니다.</p>

<p>아두이노 UNO의 경우 <code class="highlighter-rouge">DIGITAL</code>이라고 표시된 곳에 숫자 0부터 13까지 적혀있는 핀들을 볼 수 있습니다.
이 핀들이 바로 디지털 핀입니다. 그리고 이 디지털 핀을 통해서 디지털 신호를 제어할 수 있습니다.
즉, 디지털 핀에 전기를 연결하거나 끊어줄 수 있다는 말입니다. 이렇게 전기를 연결하거나 끊는 
방식이 디지털 출력입니다. 반면 디지털 입력은 디지털 핀으로부터 전기가 들어오는지 들어오지 
않는지를 체크하는 것입니다. 디지털 핀의 0과 1번은 컴퓨터와 통신을 담당하는 부분이기 때문에
일반적으로 사용하지 않고 나머지 번호의 핀을 이용합니다.</p>

<p><img src="../../assets/built/images/iot-arduino-power.png" alt="아두이노 보드 POWER" /></p>

<p>디지털 핀을 이용할때는 디지털 핀을 입력 용도로 쓸 것인지 출력 용도로 쓸 것인지를 설정해야 합니다.
이때 사용하는 함수 pinMode() 함수로 사용방법은 다음과 같습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 13번 핀을 입력으로 설정합니다.</span>
<span class="c1">// INPUT은 0을 가지는 상수값입니다.</span>

<span class="nx">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">INPUT</span><span class="p">);</span>

<span class="c1">// 13번 핀을 출력으로 설정합니다.</span>
<span class="c1">// OUTPUT은 1을 가지는 상수값입니다.</span>

<span class="nx">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">OUTPUT</span><span class="p">);</span>
</code></pre></div></div>

<p>디지털 핀을 설정한 후 디지털 신호를 출력할 수 있습니다. 
디지털 신호를 출력하는 함수는 digitalWrite() 함수로 다음과 같이 사용한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 13번 핀에 디지털 신호를 내보내지 않는다.</span>
<span class="c1">// LOW : 0</span>

<span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">LOW</span><span class="p">);</span>

<span class="c1">// 13번 핀에 디지털 신호를 내보낸다.</span>
<span class="c1">// HIGH : 1</span>
<span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">HIGH</span><span class="p">);</span>
</code></pre></div></div>

<p>HIGH로 설정하면 전압이 5V가 되면서 전기가 흘러가게 됩니다.</p>

<p>아날로그의 제어 역시 디지털 제어처럼 간단합니다.</p>

<p>디지털핀은 하나의 핀에서 입력과 출력을 둘 다 제어할 수 있지만 아날로그 핀은 입력용과
출력용이 따로 분리되어 있습니다. 아두이노 UNO의 경우 ANALOG IN이라고 표시된 곳에 A0부터
A5까지 적혀있는 핀이 있는데 이 핀들이 바로 아날로그 입력 핀 입니다.</p>

<p>디지털에서의 입력은 LOW,HIGH와 같이 단순히 전기가 끊겼는지 연결됐는지를 확인하는거에 비해
아날로그 입력은 전압이 0V와 5V사이에서 어떤 크기로 들어오는지 확인합니다.</p>

<p>아두이노 UNO의 디지털 핀들이 있는 곳에 보면 틸트(~) 표시가 붙은 핀들을 볼 수 있는데
이 핀들이 바로 아날로그 출력 핀입니다. 당연히 이 핀들은 전압을 0V에서 5V사이에서 원하는
크기로 설정하는 것입니다.</p>

<p><img src="../../assets/built/images/iot-arduino-power.png" alt="아두이노 보드 POWER" /></p>

<p>아날로그 신호를 출력할 때 사용하는 함수는 analogWrite()인데 신호를 출력할 핀번호와 
설정할 전압의 값을 인자로 사용합니다. 아날로그 신호 출력의 경우 0V부터 5V사이를 256개로
쪼개서 원하는 값을 사용할 수 있습니다. 즉, 0V는 0의 값을 가지며 5V는 255의 값을 가집니다.</p>

<p>LED를 이용하게 되면 당연히 전압의 크기에 따라서 LED의 밝기가 달라지게 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Arduino IDE 설치</strong></p>

<p>Arduino는 코드를 돌리는 기계이기 때문에 아두이노에게 우리가 작성한 code를 <code class="highlighter-rouge">upload</code>해 주어야 합니다.
우리가 코드를 작성한 후 Arduino에게 code를 이식하는 작업을 도와주는 것이 <code class="highlighter-rouge">Arduino IDE</code>입니다.</p>

<p>Arduino 홈페이지를 방문한 후 자신에게 맞는 (windows installer 버전) 버전을 선택하여 다운로드 후
설치를 진행합니다.</p>

<p>Arduino IDE를 실행하면 아두이노 개발환경에서 작성한 코드를 볼 수 있는데 이를 <code class="highlighter-rouge">Sketch(스케치)</code>라고
부릅니다. 그리고 이 스케치를 아두이노 보드에 이식하는 것을 <code class="highlighter-rouge">Upload</code>라고 합니다.</p>

<p>Arduino는 USB Type-A 단자를 이용하여 컴퓨터와 연결합니다. IDE에서 보드종류를 선택하고
포트를 선택한 후 업로드 버튼을 누르면 Arduino에 코드가 이식되고 수행되게 됩니다.</p>

<p>아두이노 보드에 기본으로 부착된 LED를 이용하여 블링크 예제를 실습해보도록 하겠습니다.</p>

<p>기본 LED는 별도의 하드웨어 연결없이 제어할 수 있습니다. DIGITAL 13번 핀을 이용하고 다음의 코드로
실행합니다.
프로그램을 아두이노에 Upload하게 되면 초기에 setup()함수가 한번 실행되게 됩니다. 일반적으로
초기설정과 관련된 코드가 setup()함수에 나오게 됩니다.</p>

<p>setup()함수가 호출되고 난 후 loop()함수가 자동으로 반복실행되게 됩니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">OUTPUT</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">HIGH</span><span class="p">);</span>
    <span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>    <span class="c1">// 1초간 아두이노 보드를 멈추는 함수</span>
    <span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">LOW</span><span class="p">);</span>
    <span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>analog입력을 이용하여 LED 밝기를 조절하도록 코드를 작성할 수 있습니다. 
아래와 같이 아두이노 회로를 구현합니다. (analog입력은 9번을 사용합니다.)</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/M309tyLV-GA"></iframe>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kr">int</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">analogWrite</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span>
        <span class="nx">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="kr">int</span> <span class="nx">i</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span> <span class="nx">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">analogWrite</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span>
        <span class="nx">delay</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
    <span class="p">}</span>      
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> PC와의 통신</strong></p>

<p>아두이노 보드는 PC와 Serial 모니터를 이용해서 통신할 수 있습니다. 이 Serial 모니터는
아두이노 보드의 센서값을 확인하거나 아두이노 보드로 명령을 보낼 때 주로 사용합니다.</p>

<p>아래의 코드를 컴파일 한 후 upload하고 Serial 모니터를 이용하여 확인</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Serial</span><span class="p">.</span><span class="nx">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
    <span class="c1">// 보드레이트 설정 : 시리얼 통신할 때의 통신속도를 의미. PC쪽에서 보드레이터를 동일하게</span>
    <span class="c1">// 설정해야 통신이 가능. 다른 보드레이트를 이용할 경우 데이터가 잘못 전송될 수 있음.</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Serial</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="s2">"Hello World"</span><span class="p">);</span>   <span class="c1">// Serial 모니터로 데이터 전송</span>
    <span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>반대로 PC에서 아두이노 보드로 메시지를 전송할 수 있습니다. Serial 모니터의 상단에서
글자를 입력하고 전송버튼을 누르면 아두이노 보드로 메시지가 전송됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Serial</span><span class="p">.</span><span class="nx">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">Serial</span><span class="p">.</span><span class="nx">available</span><span class="p">())</span> <span class="p">{</span>     <span class="c1">// Serial통신으로 받은 데이터가 있는지를 확인</span>
        <span class="kr">char</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">Serial</span><span class="p">.</span><span class="nx">read</span><span class="p">();</span>  <span class="c1">// Serial통신으로 들어온 데이터 중 1바이트를 잘라내어 읽는다.</span>
                                 <span class="c1">// 만약 문자열형태로 읽고 싶다면 readString()이용</span>
        <span class="nx">Serial</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> LED 사용</strong></p>

<p>LED는 전류가 흐르면 빛이 나는 액추에이터입니다. LED는 LED 렌즈의 지름이 5mm인 것을 많이 사용합니다.
LED는 플러스와 마이너스로 극성이 나누어져있는데 LED의 다리 길이가 긴쪽이 플러스, 짧은 쪽이 마이너스
극성을 가집니다.</p>

<p>LED가 버틸 수 있는 전류보다 많은 전류가 연결되면 당연히 LED가 탈 수 있습니다. 반대로 너무 작은
전류가 흐를경우 LED의 빛이 거의 나지 않게됩니다. 따라서 전류의 양을 조절하기 위해 저항을 LED의
앞이나 뒤에 연결해 주어야 합니다. 그러면 얼마만큼의 전류가 적당한지를 알아야 하는데 이는 전자부품의
데이터시트를 보고 확인해야 합니다.</p>

<p>일반적으로 5mm LED의 필요 전류는 15mA이고 강하전압이 2V정도 된다고
알려져 있습니다. 그렇다면 아두이노 보드에서 전류가 15mA 정도 흐르게 하기 위해서는 
저항을 어떤값을 이용해야 할까요?</p>

<p>전압 = 전류 * 저항</p>

<p>아두이노의 전압은 5V이고 LED의 강하전압은 2V이기때문에 5-2=3 즉, 3V로 계산하면 됩니다.
LED에서 필요한 전류는 15mA이기 때문에 0.015A입니다. 따라서</p>

<p>3 = 0.015 * 저항</p>

<p>저항을 구해보면 200이라는 값을 구할 수 있고 우리는 200옴짜리 저항을 이용해서 사용해야 LED가 타지
않고 사용할 수 있게될 것입니다. 
좀 더 안전하게 사용하기 위해서는 220옴과 같은 약간 더 큰 옴값을 이용하는 것이 좋습니다.</p>

<p><img src="../../assets/built/images/iot-blink.png" alt="아두이노 Blink" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">int</span> <span class="nx">ledPin</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>

<span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">pinMode</span><span class="p">(</span><span class="nx">ledPin</span><span class="p">,</span><span class="nx">OUTPUT</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">ledPin</span><span class="p">,</span><span class="nx">HIGH</span><span class="p">);</span>
  <span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="nx">digitalWrite</span><span class="p">(</span><span class="nx">ledPin</span><span class="p">,</span><span class="nx">LOW</span><span class="p">);</span>
  <span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 버튼 사용</strong></p>

<p>버튼을 누르면 LED가 켜지고 버튼을 떼면 LED가 꺼지게끔 만들어보겠습니다.</p>

<p>부품을 여러개 사용하다보면 전원과 그라운드가 모자르게 되는경우가 있는데 이때
브레드보드를 이용하면 이 문제를 해결할 수 있습니다.</p>

<ol>
  <li>
    <p>아두이노의 그라운드 핀에 점퍼와이어를 연결한 후 브레드보드의 긴 파란색 부분에 연결합니다.
일반적으로 그라운드는 검은색 점퍼와이어를 이용하는게 좋습니다. (구별을 위해서)</p>
  </li>
  <li>
    <p>LED를 디지털 핀 13번에 연결합니다. 저항(220옴)도 같이 연결해서 기존에 LED 켜기할 때 사용했던
구조로 연결합니다.</p>
  </li>
  <li>
    <p>버튼을 중앙선을 기준으로 놓습니다. 버튼을 눌러야 전류가 통하도록 연결합니다. 저항은
10k옴을 이용합니다. 그리고 디지털 핀 8번을 입력으로 사용합니다. 
(버튼을 누르면 전류가 흐르고 디지털 핀 8번에서 digitalRead()하면 HIGH값이 리턴됩니다.)</p>
  </li>
  <li>
    <p>아래의 코드를 이용하여 버튼을 누르면 전원이 연결되고 디지털 핀 8번으로부터 입력이 HIGH가
됩니다. 이를 조건문으로 활용하여 디지털 핀 13번에 연결한 LED에 불이 들어오게끔 코드를 작성합니다.</p>
  </li>
</ol>

<p><img src="../../assets/built/images/iot-button-blink.png" alt="아두이노 Button Blink" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">OUTPUT</span><span class="p">);</span>
  <span class="nx">pinMode</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="nx">INPUT</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">int</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">digitalRead</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="o">==</span><span class="nx">HIGH</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">HIGH</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">LOW</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 자바프로그램과의 연동(Event기반)</strong></p>

<p>통신에서의 시리얼 통신이란 패러럴 통신(병렬 통신)에 반대되는 말로써 
한번의 통신의 한 비트의 데이터를 보내는 방식을 말합니다.</p>

<p>이런 Serial통신을 이용하여 Java와 아두이노간의 데이터 통신을 할 수 있습니다.</p>

<p>간단하게 아두이노에서 버튼을 누르면 자바프로그램(javaFX)에서 
“아두이노에서 버튼부품 클릭해서 LED 켜기”이라는 메시지를 javaFX의 TextArea에 출력하고 
javaFX의 “LED 켜기” 버튼을 누르면 아두이노의
LED를 켜고 “LED 끄기” 버튼을 누르면 아두이노의 LED를 끄게 구현하겠습니다.</p>

<ul>
  <li>아두이노 회로 구현(위에서 설명한 버튼과 LED구현을 그대로 이용)</li>
</ul>

<p><img src="../../assets/built/images/iot-javaFX-blink.png" alt="아두이노 JavaFX Blink" /></p>

<ul>
  <li>아두이노 스케치 프로그램 작성 및 업로드</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">int</span> <span class="nx">btnInputPin</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>

<span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// put your setup code here, to run once:</span>
  <span class="nx">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">OUTPUT</span><span class="p">);</span>
  <span class="nx">pinMode</span><span class="p">(</span><span class="nx">btnInputPin</span><span class="p">,</span><span class="nx">INPUT</span><span class="p">);</span>
  <span class="nx">Serial</span><span class="p">.</span><span class="nx">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// put your main code here, to run repeatedly:</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">Serial</span><span class="p">.</span><span class="nx">available</span><span class="p">())</span> <span class="p">{</span>   <span class="c1">// Serial통신을 사용할 때 데이터 수신시 사용</span>
                             <span class="c1">// 리턴값 : 시리얼 통신으로 수신한 데이터의 길이(bytes)</span>
                             <span class="c1">// Serial 통신으로 아두이노에 데이터가 들어오면 이 데이터는</span>
                             <span class="c1">// 일단 Serial Buffer라고 불리는 작은 메모리에 저장되고</span>
                             <span class="c1">// Serial.read() 계열의 함수를 통해서 버퍼의 데이터를 읽어옵니다.</span>
    <span class="nb">String</span> <span class="nx">inString</span> <span class="o">=</span> <span class="nx">Serial</span><span class="p">.</span><span class="nx">readString</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">inString</span> <span class="o">==</span> <span class="s2">"LED_ON"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">HIGH</span><span class="p">);</span>  
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">inString</span> <span class="o">==</span> <span class="s2">"LED_OFF"</span><span class="p">){</span>
      <span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">LOW</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kr">int</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">digitalRead</span><span class="p">(</span><span class="nx">btnInputPin</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">value</span> <span class="o">==</span> <span class="nx">HIGH</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="nx">HIGH</span><span class="p">);</span>
    <span class="nx">Serial</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="s2">"O"</span><span class="p">);</span> 
    <span class="nx">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>   <span class="c1">// 1초간 정지(메시지가 계속 전달되는것을 피하기 위해)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>자바프로그램 작성 및 실행</li>
</ul>

<p><img src="../../assets/built/images/iot-javaFX-window.png" alt="아두이노 JavaFX Window" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Exam03_ArduinoSerialListener</span> <span class="kd">implements</span> <span class="n">SerialPortEventListener</span> <span class="o">{</span>

	<span class="n">InputStream</span> <span class="n">in</span><span class="o">;</span>
	<span class="n">Exam03_ArduinoJavaFXSerial</span> <span class="n">window</span><span class="o">;</span>

	<span class="n">Exam03_ArduinoSerialListener</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span><span class="o">,</span><span class="n">Exam03_ArduinoJavaFXSerial</span> <span class="n">window</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">in</span> <span class="o">=</span> <span class="n">in</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">window</span> <span class="o">=</span> <span class="n">window</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">serialEvent</span><span class="o">(</span><span class="n">SerialPortEvent</span> <span class="n">oEvent</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">oEvent</span><span class="o">.</span><span class="na">getEventType</span><span class="o">()</span> <span class="o">==</span> <span class="n">SerialPortEvent</span><span class="o">.</span><span class="na">DATA_AVAILABLE</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">try</span> <span class="o">{</span>

				<span class="kt">int</span> <span class="n">available</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">available</span><span class="o">();</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"받은 바이트수 : "</span> <span class="o">+</span> <span class="n">available</span><span class="o">);</span>
				<span class="kt">byte</span> <span class="n">chunk</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">available</span><span class="o">];</span>
				<span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">chunk</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">available</span><span class="o">);</span>

				<span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">chunk</span><span class="o">);</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"아두이노에서 받은 메시지 : "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>

				<span class="k">if</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"O"</span><span class="o">))</span> <span class="o">{</span>
					<span class="n">window</span><span class="o">.</span><span class="na">printMessage</span><span class="o">(</span><span class="s">"아두이노에서 버튼부품 클릭해서 LED 켜기"</span><span class="o">);</span>	
				<span class="o">}</span>

			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
			<span class="o">}</span>
		<span class="o">}</span>		

	<span class="o">}</span>	
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exam03_ArduinoJavaFXSerial</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>

	<span class="n">TextArea</span> <span class="n">textarea</span><span class="o">;</span>
	<span class="n">Button</span> <span class="n">ledOnBtn</span><span class="o">,</span> <span class="n">ledOffBtn</span><span class="o">;</span>
	<span class="n">InputStream</span> <span class="n">in</span><span class="o">;</span>
	<span class="n">BufferedWriter</span> <span class="n">bw</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">printMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Platform</span><span class="o">.</span><span class="na">runLater</span><span class="o">(()-&gt;{</span>
			<span class="n">textarea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="n">msg</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="o">});</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">connectSerial</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
		<span class="n">CommPortIdentifier</span> <span class="n">portIdentifier</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>		
		<span class="n">portIdentifier</span> <span class="o">=</span> 
				<span class="n">CommPortIdentifier</span><span class="o">.</span><span class="na">getPortIdentifier</span><span class="o">(</span><span class="s">"COM14"</span><span class="o">);</span>

		<span class="k">if</span> <span class="o">(</span> <span class="n">portIdentifier</span><span class="o">.</span><span class="na">isCurrentlyOwned</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"현재 포트가 사용되고 있습니다."</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>

			<span class="n">CommPort</span> <span class="n">commPort</span> <span class="o">=</span> 
					<span class="n">portIdentifier</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="s">"PORT_OPEN"</span><span class="o">,</span><span class="mi">2000</span><span class="o">);</span>

			<span class="k">if</span> <span class="o">(</span> <span class="n">commPort</span> <span class="k">instanceof</span> <span class="n">SerialPort</span> <span class="o">)</span> <span class="o">{</span>
				<span class="c1">//포트 설정(통신속도 설정. 기본 9600으로 사용)</span>
				<span class="n">SerialPort</span> <span class="n">serialPort</span> <span class="o">=</span> <span class="o">(</span><span class="n">SerialPort</span><span class="o">)</span> <span class="n">commPort</span><span class="o">;</span>
				<span class="n">serialPort</span><span class="o">.</span><span class="na">setSerialPortParams</span><span class="o">(</span><span class="mi">9600</span><span class="o">,</span>
						<span class="n">SerialPort</span><span class="o">.</span><span class="na">DATABITS_8</span><span class="o">,</span>
						<span class="n">SerialPort</span><span class="o">.</span><span class="na">STOPBITS_1</span><span class="o">,</span>
						<span class="n">SerialPort</span><span class="o">.</span><span class="na">PARITY_NONE</span><span class="o">);</span>

				<span class="c1">//Input,OutputStream 버퍼 생성 후 오픈</span>
				<span class="n">in</span> <span class="o">=</span> <span class="n">serialPort</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>					
				<span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedWriter</span><span class="o">(</span>
						<span class="k">new</span> <span class="nf">OutputStreamWriter</span><span class="o">(</span>
								<span class="n">serialPort</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">()));</span>

				<span class="n">serialPort</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span>
						<span class="k">new</span> <span class="nf">Exam03_ArduinoSerialListener</span><span class="o">(</span><span class="n">in</span><span class="o">,</span><span class="k">this</span><span class="o">));</span>
				<span class="n">serialPort</span><span class="o">.</span><span class="na">notifyOnDataAvailable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Serial 포트만 사용가능합니다."</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>     

	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
		<span class="n">BorderPane</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BorderPane</span><span class="o">();</span>
		<span class="n">root</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">700</span><span class="o">,</span> <span class="mi">500</span><span class="o">);</span>

		<span class="n">textarea</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextArea</span><span class="o">();</span>
		<span class="n">root</span><span class="o">.</span><span class="na">setCenter</span><span class="o">(</span><span class="n">textarea</span><span class="o">);</span>

		<span class="n">ledOnBtn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="s">"LED 켜기"</span><span class="o">);</span>
		<span class="n">ledOnBtn</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">250</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">ledOnBtn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">((</span><span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="s">"LED_ON"</span><span class="o">;</span>
			<span class="n">printMessage</span><span class="o">(</span><span class="s">"LED 켜기버튼 클릭!!"</span><span class="o">);</span>
			<span class="k">try</span> <span class="o">{</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">line</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">line</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>				
			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// TODO Auto-generated catch block</span>
				<span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">});</span>

		<span class="n">ledOffBtn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="s">"LED 끄기"</span><span class="o">);</span>
		<span class="n">ledOffBtn</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">250</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">ledOffBtn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">((</span><span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="s">"LED_OFF"</span><span class="o">;</span>
			<span class="n">printMessage</span><span class="o">(</span><span class="s">"LED 끄기버튼 클릭!!"</span><span class="o">);</span>
			<span class="k">try</span> <span class="o">{</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">line</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">line</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>				
			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// TODO Auto-generated catch block</span>
				<span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
			<span class="o">}</span>			
		<span class="o">});</span>

		<span class="n">FlowPane</span> <span class="n">flowpane</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlowPane</span><span class="o">();</span>
		<span class="n">flowpane</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">700</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">flowpane</span><span class="o">.</span><span class="na">setHgap</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
		<span class="n">flowpane</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">ledOnBtn</span><span class="o">);</span>
		<span class="n">flowpane</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">ledOffBtn</span><span class="o">);</span>

		<span class="n">root</span><span class="o">.</span><span class="na">setBottom</span><span class="o">(</span><span class="n">flowpane</span><span class="o">);</span>

		<span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">"javaFX Arduino Serial 통신"</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setOnCloseRequest</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">});</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>

		<span class="k">try</span> <span class="o">{</span>
			<span class="n">connectSerial</span><span class="o">();</span>	
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
		<span class="o">}</span>


	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">launch</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 안드로이드와 아두이노 연동 예제</strong></p>

<p>안드로이드의 SeekBar를 이용하여 Mobile Device에서 LED의 불빛을 제어하는
예제를 작성합니다.</p>

<p>Android - Java Network Server - Arduino 형태로 다음의 영상처럼 동작하도록 구현합니다.</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/MF13OmgOX1c"></iframe>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 피에조 스피커 활용</strong></p>

<p>피에조 스피커는 전기적 신호를 이용해서 소리를 내는 전자부품입니다. 동작하는
전압에 따라 크기가 다양합니다. 여기서는 5V용 피에조 스피커를 활용합니다.</p>

<p>피에조 스피커를 이용한 소리출력 예제를 작성해보도록 하겠습니다.</p>

<ul>
  <li>아두이노 회로 구현</li>
</ul>

<p><img src="../../assets/built/images/iot-piezo-speaker.png" alt="아두이노 피에조 스피커" /></p>

<ul>
  <li>아두이노 스케치 프로그램 작성 및 업로드</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">int</span> <span class="nx">melody</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">262</span><span class="p">,</span> <span class="mi">294</span><span class="p">,</span> <span class="mi">330</span><span class="p">,</span> <span class="mi">349</span><span class="p">,</span> <span class="mi">392</span><span class="p">,</span> <span class="mi">440</span><span class="p">,</span> <span class="mi">494</span><span class="p">,</span> <span class="mi">523</span> <span class="p">};</span>

<span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kr">int</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">8</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">tone</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="nx">melody</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="mi">250</span><span class="p">);</span>
    <span class="nx">delay</span><span class="p">(</span><span class="mi">400</span><span class="p">);</span>
    <span class="nx">noTone</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
  
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> LCD 활용</strong></p>

<p>LCD는 액정 화면에 글자나 숫자를 표시하는 전자부품입니다. 아두이노와 연결해 사용하는 것은
주로 2줄이 있고 한 줄당 16글자를 표시할 수 있는 1602 LCD를 많이 이용합니다. (총 32자 표시)</p>

<p>LCD를 확인해보면 핀이 아주 많은 것을 확인할 수 있습니다.</p>

<p><img src="../../assets/built/images/iot-LCD-pin.png" alt="아두이노 LCD" /></p>

<p>각 핀들의 의미는 다음과 같습니다.</p>

<ul>
  <li>
    <p><strong>배경관련</strong> LCD의 가장 오른쪽의 <code class="highlighter-rouge">K</code>와 <code class="highlighter-rouge">A</code>는 배경의 밝기와 관련이 있습니다. K는 배경밝기를
제어하기 위해서 GND에 연결하고 A는 전원에 연결합니다. 만약 배경조명이 없거나 배경 밝기가 필요없다면
이 2개의 핀들을 사용하지 않습니다.</p>
  </li>
  <li>
    <p><strong>데이터관련</strong> 오른쪽 3번째부터 10번째까지 핀들은 LCD에 값을 보내거나 LCD로부터 값을
받을 때 사용하는 핀입니다. 각 핀들의 이름은 D7 ~ D0입니다.</p>
  </li>
  <li>
    <p><strong>설정관련</strong> <code class="highlighter-rouge">E</code>핀은 LCD에 값을 쓸 수 있도록 할지 말지를 설정합니다. <code class="highlighter-rouge">RW</code>핀은 LCD의 값을
읽을지 쓸지 선택할 때 사용합니다.</p>
  </li>
  <li>
    <p><strong>기타</strong> <code class="highlighter-rouge">VSS</code>핀은 LCD가 동작하기 위해서 GND에 연결하는 핀이고, VDD핀은 전원에 연결합니다. 
V0핀은 글자 색을 진하게 할지 흐리게 할지 설정할 때 사용합니다.</p>
  </li>
</ul>

<p>이렇게 LCD는 핀들이 굉장히 많고 용도도 각기 다릅니다. 상당히 복잡하지만 사실 우리가 LCD를
이용할때는 라이브러리를 이용해서 사용합니다. LCD는 <code class="highlighter-rouge">LiquidCrystal</code>이라는 라이브러리를 이용해서
제어합니다.</p>

<p>먼저 아두이노 회로도를 만들어야 합니다. 글로 표현하기에는 너무 복잡하기 때문에 교재를 이용해서
회로도를 완성합니다. (아두이노, 상상을 현실로 만드는 프로젝트-입문편. 영진닷컴)</p>

<p><img src="../../assets/built/images/iot-LCD-helloworld.png" alt="아두이노 LCD 회로도" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="nx">include</span> <span class="o">&lt;</span><span class="nx">LiquidCrystal</span><span class="p">.</span><span class="nx">h</span><span class="o">&gt;</span>

<span class="nx">LiquidCrystal</span> <span class="nx">lcd</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
<span class="c1">// LiquidCrystal(RS,E,D4,D5,D6,D7); 핀 연결번호</span>

<span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">lcd</span><span class="p">.</span><span class="nx">begin</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">lcd</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
  <span class="nx">lcd</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="s2">"Hello World"</span><span class="p">);</span>
  <span class="nx">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>LiquidCrystal 라이브러리에서 사용할 수 있는 함수는 다음과 같습니다.</p>

<ul>
  <li>LiquidCrystal() : LCD 클래스 생성에 사용. LCD 인터페이스 설정</li>
  <li>begin() : LCD 화면 초기화(column과 row설정)</li>
  <li>clear() : LCD 화면을 지우고 커서를 좌상으로 이동</li>
  <li>home() : 커서를 좌상으로 이동</li>
  <li>setCursor() : 커서를 특정위치로 이동</li>
  <li>write() : 현재 커서에 한 문자를 출력</li>
  <li>print() : 현재 커서부터 출력(Serial.print()와 유사)</li>
  <li>cursor(), nocursor() : 커서 표시 on/off</li>
  <li>display(), noDisplay() : LCD 화면에 정보 표시 on/off</li>
  <li>scrollDisplayLeft(), scrollDisplayRight() : LCD 내용과 커서를 좌/우로 한칸 스크롤</li>
  <li>autoscroll(), noautoscroll() : 문자 출력 시 이전 내용을 스크롤할 지를 결정</li>
  <li>leftToright(), rightToLeft() : 문자 출력 후 커서의 이동위치 결정</li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> LCD와 조도센서의 활용</strong></p>

<p>조도센서(Ambient Light Sensor)를 이용하여 측정한 조도를 LCD에 표현하는 예제를 
구현합니다.</p>

<iframe width="560" height="420" src="https://www.youtube.com/embed/xnAy1cTAsyY"></iframe>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span><span class="nx">include</span> <span class="o">&lt;</span><span class="nx">LiquidCrystal</span><span class="p">.</span><span class="nx">h</span><span class="o">&gt;</span>

<span class="nx">LiquidCrystal</span> <span class="nx">lcd</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
<span class="c1">// LiquidCrystal(RS,E,D4,D5,D6,D7); 핀 연결번호</span>
<span class="kr">int</span> <span class="nx">cds</span> <span class="o">=</span> <span class="nx">A0</span><span class="p">;</span>  

<span class="k">void</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">lcd</span><span class="p">.</span><span class="nx">begin</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nx">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="kr">int</span> <span class="nx">val</span><span class="o">=</span> <span class="nx">analogRead</span><span class="p">(</span><span class="nx">cds</span><span class="p">);</span> 
  <span class="c1">// analogRead()로 측정되는 범위(0~1023)</span>
  <span class="nx">lcd</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
  <span class="nx">lcd</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
  <span class="nx">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>End.</p>

<hr />

	  ]]></description>
	</item>

	<item>
	  <title>CAN Protocol</title>
	  <link>http://localhost:4000/can</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-02-17T01:40:00+09:00</pubDate>
	  <guid>http://localhost:4000/can</guid>
	  <description><![CDATA[
	     <p><strong><i class="fa fa-bolt" style="color:#01077c"></i> CAN 개요</strong></p>

<p><code class="highlighter-rouge">CAN</code>은 Controller Area Network의 약자로 1986년에 독일의 메르세데스 벤츠사의 요구
(자동차내의 3개의 서로다른 ECU간의 데이터 통신)로 자동차 부품회사인 로베르트 보쉬사가 개발해 
자동차기술자 협회에서 제안한 네트워크 시스템입니다.</p>

<p><code class="highlighter-rouge">ECU</code>는 Electoric Control Unit의 약자로 자동차의 엔진, 자동변속기, ABS등의 상태를 컴퓨터로 제어하는
전자제어장치를 의미합니다. 이런 ECU들은 각 목적에 따라 차량안에 분산되어 위치하고 있습니다.
여러 센서들로부터 데이터를 ECU가 받아들이고 다른 ECU와 통신해서 차량의 모든 부분을 제어하는 역할을 담당하고 있습니다.</p>

<p><img src="../../assets/built/images/iot-can-ecu.png" alt="차량의 ECU 연결" /></p>

<p>현재 현대차 Genesis는 약 70개의 ECU가 탑제되어 있고 벤츠 S클래스와 BMW 7시리즈에는 80여개의 ECU,
렉서스 LS시리즈에는 약 100개의 ECU가 탑제되어 있습니다.</p>

<p>대표적인 ECU를 몇가지 살펴보면,</p>

<ul>
  <li><strong><code class="highlighter-rouge">ACU</code>(Airbag Control Unit)</strong> : 자동차 충돌 상황의 센서 신호를 받아 Airbag을 제어하는 ECU.</li>
  <li><strong><code class="highlighter-rouge">BCM</code>(Body Control Module)</strong> : 자동차의 각종 경고, 도난방지 기능등을 제어하는 ECU.</li>
  <li><strong><code class="highlighter-rouge">ECU</code>(Engine Control Unit)</strong> : 엔진의 상태를 모니터링하면서 연료량, 점화시기등의 기능을 제어하는 ECU.</li>
  <li><strong><code class="highlighter-rouge">TCU</code>(Transmission Control Unit)</strong> : 자동차의 속도, 바퀴속도등의 값을 이용해 변속기를 제어하는 ECU.</li>
  <li><strong><code class="highlighter-rouge">ABS</code>(Anti-lock Breaking System)</strong> : 자동차가 미끄러지지 않도록 브레이크의 on/off를 짧은시간동안 반복 제어하는 ECU.</li>
</ul>

<p>시간상으로 보자면, 1986년에 CAN 1.0발표후에 1991년에 CAN 2.0이 발표되고 
1992년에 메르세데스 벤츠에서 CAN을 채택한 자동차가 출시되게 됩니다.
그리고 그 다음해인 1993년에 ISO에 의해서 국제표준규격으로 채택됩니다.</p>

<p>자동차내부의 통신은 CAN이 유일할까요? 그렇지는 않습니다. 시간이 지나면서 여러가지 형태의
네트워크가 개발, 발표되고 있습니다. (<code class="highlighter-rouge">FlexRay</code>, <code class="highlighter-rouge">LIN</code>, <code class="highlighter-rouge">CAN FD</code> 등)</p>

<p>그럼 CAN은 ECU간의 통신을 어떤 방식으로 할까요?</p>

<p>CAN은 ECU간의 통신을 위해 직렬(Serial) 네트워크 통신방식을 이용합니다. 
하나의 ECU가 시스템 안에 있는 다른 ECU에 대해 각각 입출력 단자를 갖는것이 아니라 
CAN BUS에 대한 단일 CAN Interface만을 보유하고 있는 것이 특징입니다.</p>

<p><img src="../../assets/built/images/iot-can-network.png" alt="CAN버스를 이용한 연결" /></p>

<p>자동차안에는 많은 ECU가 탑제되어 있고 이런 ECU간의 데이터 공유를 통해서 자동차가 제어됩니다.
자동차는 환경적으로 고온, 충격, 진동 노이즈가 많은 환경인데 이런 열악한 환경에서도 CAN은 잘 견디기 때문에
속도가 느림에도 불구하고 주력 차량 네트워크 통신 표준으로 사용되고 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> CAN 프로토콜의 장점</strong></p>

<ul>
  <li><strong>CAN 프로토콜은 Multi Master 통신을 한다.</strong> CAN BUS를 공유하고 있는 MCU들은 모두가 Master의 역할을 수행할 수 있으며
BUS가 idle상태이면 언제든지 BUS를 사용하고 싶을 때 사용할 수 있습니다.</li>
  <li><strong>노이즈에 매우 강하다.</strong> Twisted Pair Wire 2개를 사용하여 전기적 전압차를 이용한 통신을 하기 때문에 노이즈에 강합니다.</li>
  <li><strong>표준 프로토콜.</strong> CAN은 표준 프로토콜이기 때문에 시장성을 확보할 수 있습니다.</li>
  <li><strong>하드웨어적으로 오류보정이 가능.</strong> CRC가 하드웨어 적으로 생성되기 때문에 오류 검출이 가능하고 
만약 오류가 검출되었을 때 하드웨어적으로 재전송합니다.</li>
  <li><strong>다양한 방식의 통신.</strong> CAN은 수신필터를 이용하여 필터를 어떻게 설정하느냐에 따라
unicast, multicast, broadcast 통신을 할 수 있습니다.</li>
  <li><strong>ECU간의 우선순위가 존재.</strong> 각각의 ECU는 고유의 ID를 가지고 있는데 이 ID값이 낮을수록 우선순위가 높습니다. 
이 우선순위를 이용하면 급한 Message를 먼저 처리할 수 있습니다.</li>
  <li><strong>CAN BUS 이용.</strong> 사용되는 전선의 양을 획기적으로 줄일 수 있습니다.</li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> CAN 통신의 형태</strong></p>

<p>CAN 프로토콜 환경 구성은 <code class="highlighter-rouge">CAN Controller</code>와 <code class="highlighter-rouge">CAN Transceiver</code>로 구현되어있습니다. 
CAN Controller는 내부 버퍼를 가지며 CAN Transceiver의 수신 메시지에 대해 ID 값을 기반으로 
유효 데이터인지를 판별하여 MCU로 전송하는 역할을 수행합니다.</p>

<p>CAN통신은 일반적으로 다음의 두 가지 형태로 사용된다.</p>

<ol>
  <li>MCU(Micro Controller Unit) 내부에 CAN Controller가 존재(통합형)</li>
</ol>

<p><img src="../../assets/built/images/iot-can-controller-allinone.png" alt="통합형" /></p>

<ol>
  <li>MCU(Micro Controller Unit) 외부에 CAN Controller가 존재(독립형)</li>
</ol>

<p><img src="../../assets/built/images/iot-can-controller-independent.png" alt="독립형" /></p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> CAN 프로토콜의 특징</strong></p>

<p>CAN 통신은 여러 개의 ECU를 CAN BUS에 병렬로 연결하여 데이터를 주고 받는 방식으로 
2가닥의 Twisted Pair Wire로 연결되어 있습니다.</p>

<p>또한 CAN BUS는 직렬통신 프로토콜을 사용하는데 직렬(Serial) 통신은 일반적으로 하나의 신호선을 이용하여 
데이터를 주고받는 통신을 지칭합니다. 신호선이 하나이기 때문에 데이터를 일정한 시간간격으로 전송하게 되며 
따라서 일정한 길이의 데이터를 보내기 위해서는 약간의 시간이 필요합니다.</p>

<p>데이터 전송에 약간의 시간이 필요하지만 적은 수의 신호선을 사용하기 때문에 비용을 절감할 수 있는 장점이 있습니다. 
이때문에 많은 통신장비들이 직렬통신으로 데이터를 전송합니다. Serial 통신의 대표적인 예가 USB, PC의 COM port이죠.</p>

<p>이와 반대로 병렬통신은 여러 개의 신호선을 이용하여 데이터를 전송하는 방식이기 때문에 단위시간당 더 많은 데이터를 
보낼 수 있지만 통신 거리가 길어질수록 많은 선들을 모두 연장해야 하므로 비용이 증가하게 되고 
최신 단말 장치들이 소형화 추세에 있는데 현실적으로 통신을 하기위한 I/O단자의 크기는 크게 줄일 수 없습니다. 
따라서 많은 I/O단자를 가지고 있는 병렬통신은 소형화된 기기에서 사용하기에 적합하지 않습니다.</p>

<p>CAN 통신은 주소를 이용한 통신이 아닌 ID를 이용한 통신으로 이 ID의 값에 따라 통신의 
우선순위가 결정됩니다.</p>

<p>각 ECU들은 BUS상에서 메시지를 주고 받기 때문에 기존의 ECU들은 새롭게 추가된 ECU에 대한 
정보를 Update할 필요가 없습니다.</p>

<p>CAN은 다중 통신망(Multi Master Network)이고 CSMA/CD(Carrier Sense Multiple Access/Collision Detection)방식을 
이용합니다. 즉, Ethernet 통신방식과 유사하다고 생각하시면 됩니다.</p>

<p>각 ECU는 메시지를 보내기 이전에 CAN BUS가 사용중인지를 파악(Carrier Sense)합니다. 메시지를 보낼 수 있을 때 
메시지를 보내며 수신측에서 CRC를 이용해 충돌이 발생했는지를 감지하고 만약 충돌이 발생하면 재전송하게됩니다.</p>

<p>보낸 메시지는 송신측이나 수신측의 주소를 포함하지 않습니다. 대신 메시지안에는 ID(11bit 혹은 29bit)가 포함되어 있습니다. 
CAN 메시지는 크게 ID Field와 Data Field를 가지고 있는데 ID Field는 ECU의 ID값이 될 수 있지만 “엔진 회전수”와 
같은 것을 나타내는 ID값이 될 수 도 있습니다. 이때 Data Field는 2000 rpm과 같은 값을 가지고 있게 되는 것이죠. 
이런 메시지인 경우 여러 ECU에서 해당 message를 수신해야 하는데 각 ECU는 ID MASK(Filter)를 이용하여 자신이 
받아들일 수 있는 메시지를 정해서 받습니다. 
ECU가 데이터를 전달 받으면 Receiver는 Ack를 신호를 생성하여 보내게 됩니다.</p>

<p>CAN 네트워크상의 모든 ECU는 네트워크 상의 메시지를 수신한 후 ID를 이용하여 자신에게 필요한 
메시지인지를 식별한 후 자신이 필요한 경우만 메시지를 취하고 그렇지 않으면 해당 메시지는 무시합니다.</p>

<p>CAN BUS상에 흐르는 여러 ECU의 데이터들이 동시에 하나의 ECU로 유입되는 경우 식별자(ID)의 숫자를 비교하여 
우선순위가 높은 메시지를 먼저 취합니다.</p>

<p>메시지를 보낼 경우 마찬가지로 우선 순위가 높은 메시지가 CAN BUS의 사용권한을 보장 받으며 낮은 순위의 메시지는 
다음 BUS cycle에 전송하게 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> CAN 프레임 구성</strong></p>

<p>CAN 통신은 프레임이라고 하는 패킷(packet)으로 데이터를 전송합니다. 
프레임이란 하나의 메시지를 이루는 필드 또는 bit들의 집합을 말하며 
CAN 프레임은 다음과 같은 분할 구역(section)으로 구성되어 있습니다.</p>

<p><img src="../../assets/built/images/iot-can-frame.png" alt="CAN Frame 구조" /></p>

<ul>
  <li><strong><code class="highlighter-rouge">SOF(Start Of Frame)</code></strong> : 메시지의 시작을 의미하는 비트로 버스의 노드(node)를 동기화하기 위해 사용됩니다.</li>
  <li><strong><code class="highlighter-rouge">Identifier(ID)</code></strong> : 식별자로서 메시지의 내용을 식별하고 메시지의 우선순위를 부여합니다. 
CAN 메시지에 있는 ID의 길이에 따라서 표준 CAN과 확장 CAN 두 가지로 구분됩니다. 
표준 CAN은 11 비트 식별자이고, 확장 CAN은 29비트 식별자로 구분됩니다.</li>
  <li><strong><code class="highlighter-rouge">Control</code></strong> : 데이터의 길이(DLC)를 의미합니다.</li>
  <li><strong><code class="highlighter-rouge">Data</code></strong> : 특정한 노드에서 다른 노드로 전송하는 데이터 포함하며 8Bytes까지 사용할 수 있습니다.</li>
  <li><strong><code class="highlighter-rouge">CRC</code></strong> : 프레임의 송신 오류 및 오류 검출에 사용됩니다.</li>
  <li><strong><code class="highlighter-rouge">ACK</code></strong> : 오류가 없는 메시지가 전송되었다는 것을 의미하는 비트로서, 
CAN 제어기는 메시지를 정확하게 수신했다면 ACK(Acknowledgement) 비트를 전송합니다. 
전송 노드는 버스 상에서 ACK 비트의 유무를 확인하고 만약 ACK 비트가 발견되지 않는다면 재전송을 시도합니다.
임의의 노드에서 올바른 메시지를 수신하게 되면 ACK 필드를 받는 순간 ACK 슬롯의 값을 ‘d’로 
설정해 Bus 상에서 계속 전송하게 됩니다.</li>
  <li><strong><code class="highlighter-rouge">EOF(End of Frame)</code></strong> :  프레임의 끝을 나타내고 종료를 의미합니다.</li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> CAN의 활용</strong></p>

<p>CAN 통신은 자동차 분야뿐만 아니라 자동화 기기, 의료 기기 그리고 로봇 등 다양한 분야에서도 널리 쓰이고 있기 때문에 
앞으로도 매우 중요하게 쓰일 통신방법이 될 것입니다.</p>

<p>두 개의 컴퓨터를 CAN 장비를 이용해서 Serial 연결 한 후 CANPro Analyzer를 이용하여 packet을 주고 받는
실습을 진행한 후 Java Program과 Arduino를 결합하여 실습을 진행합니다.</p>

<p><strong>CANPro 장비 연결</strong></p>

<ol>
  <li>
    <p>Windows 10은 디지털 서명 해제 작업을 먼저 선행해야 한다.
<a href="/assets/downloads/windows10_canpro_digitalSignature.pdf" target="_blank">디지털 서명 해제 for Windows10</a></p>
  </li>
  <li>
    <p>드라이버를 설치하지 않고 CANPro 장비의 USB를 PC에 연결하고
제어판 &gt; 하드웨어 및 소리 &gt; 장치관리자를 확인하면 기타장치 &gt; CANPro Analyzer가 
노란색 느낌표가 표시된 상태로 등록된것을 볼 수 있다.</p>
  </li>
  <li>
    <p>제공된 드라이버 폴더 RealSYS_USB_Device_Driver(20170316)안의 
dp-chooser.exe를 관리자 모드로 실행해서 개발툴용 USB Device Driver를 설치한다. 
설치가 완료되면 노란색 느낌표가 있던 기타장치는 사라지고
장치관리자 &gt; 포트 부분에 CANPro가 등록된걸 확인할 수 있다. (혹은 USB Serial Port로 등록)
정상적으로 설치가 되었으면 리부팅.</p>
  </li>
  <li>
    <p>드라이버에 설치하면 제공된 <code class="highlighter-rouge">CANPro Analyzer for Windows10</code>을 설치한다.</p>
  </li>
  <li>
    <p>총 3대의 컴퓨터(데스크탑 PC + 노트북 + 라떼판다)에 각각 CAN 장비(Controller + Transceiver)를 연결합니다.
CAN BUS가 존재하지 않기 때문에 3대를 연결하기 위해서는 아래 그림처럼 선을 겹쳐서 연결해야 합니다.</p>
  </li>
</ol>

<p><img src="../../assets/built/images/iot-can-3computer.png" alt="CAN 연결" /></p>

<p><strong>CANPro 장비 설정</strong></p>

<ul>
  <li>노트북을 기준으로 설명하면 CANPro Analyzer를 실행시킨 후 <code class="highlighter-rouge">동작 &gt; CANPro 환경 설정 쓰기</code>를 실행합니다.</li>
</ul>

<p><img src="../../assets/built/images/iot-canpro-setting-1.png" alt="CAN 환경설정-1" /></p>

<ul>
  <li>아래 그림과 같이 CANPro 장비 설정을 바꿉니다. PC통신 인터페이스는 <code class="highlighter-rouge">Serial 통신</code>으로 설정해야 하고 
적절한 <code class="highlighter-rouge">Serial 통신 포트</code>를 설정해야 합니다. <code class="highlighter-rouge">Serial 통신 속도</code>부분과 <code class="highlighter-rouge">프로토콜</code>, <code class="highlighter-rouge">CAN BPS</code>부분은 
다른 PC의 설정들과 동일하게 설정해야 합니다. <code class="highlighter-rouge">수신 ID</code>는 자신의 수신 ID를 설정하는 부분입니다. 다른
장비과 구분되게 설정합니다. 설정버튼을 누르면 현재 설정대로 CAN장비의 설정을 변경합니다.</li>
</ul>

<p><img src="../../assets/built/images/iot-canpro-setting-2.png" alt="CAN 환경설정-2" /></p>

<ul>
  <li><code class="highlighter-rouge">동작 &gt; CANPro 환경 설정 읽기</code>를 실행해서 설정한 내용을 읽어와서 정상적으로 설정이 됬는지 확인합니다. 
데이터를 받기 위해서는 <code class="highlighter-rouge">동작 &gt; CAN 데이터 수신 시작</code>을 실행하여 데이터 수신을 시작해야 다른 CAN장비로부터
들어오는 packet을 받을 수 있습니다.</li>
</ul>

<p><img src="../../assets/built/images/iot-canpro-setting-3.png" alt="CAN 환경설정-3" /></p>

<ul>
  <li>데스크탑 PC와 노트북을 CAN장비로 연결한 후 packet을 보내고 받는 영상입니다. 수신 MASK ID를 설정하지
않았기 때문에 모든 packet을 다 받습니다.</li>
</ul>

<iframe width="560" height="420" src="https://www.youtube.com/embed/Oin10Sq2SXU"></iframe>

<ul>
  <li>CAN Message 수신시 특정한 ID 또는 어떤 범위의 ID만 받고자 할때 MASK를 이용합니다.
Mask는 Filter의 사용여부(Enable/Disable)를 결정합니다. 즉, 실제 Message ID가 CAN Rx에 수신 되었을 때, 
Filter의 각 bit값이 비교 되어 같은지 다른지 판단하여 수용하게 됩니다. 이때 각 Filter bit값이 비교 되기 
위해서는 이에 대응되는 Mask bit가 Enable,즉 1이 되어야 합니다. 
따라서 0일때는 Filter bit값에 상관없이 모두 수용하게 되는 것입니다. 이 부분은 실제 실습을 통해서 확인해야 할 듯 합니다.</li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Java 프로그램을 이용한 CAN 활용</strong></p>

<p>CANPro Analyzer를 이용하여 CANPro 환경설정과 데이터의 이동, MASK를 이용한 멀티캐스트를 이해했다면 
이제 Java 코드를 이용하여 CANPro를 통해 데이터를 주고 받아보겠습니다. 즉, Analyzer프로그램 대신
Java Program을 이용하겠다는 의미입니다.</p>

<p><a href="/assets/downloads/CANPro_User_Manual.pdf" target="_blank">CANPro 통신 프로토콜 사용자 메뉴얼</a>을 참고하여 프로그램을 작성해야 합니다.</p>

<ul>
  <li>DataFrame Sender (Using JavaFX)</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exam01_DataFrameSender</span> <span class="kd">extends</span> <span class="n">Application</span><span class="o">{</span>

	<span class="n">TextArea</span> <span class="n">textarea</span><span class="o">;</span>    <span class="c1">// 메시지창 </span>
	<span class="n">Button</span> <span class="n">connBtn</span><span class="o">,</span> <span class="n">sendBtn</span><span class="o">;</span>    <span class="c1">// 포트 연결 버튼, Data Frame 보내기 버튼</span>
	
	<span class="kd">private</span> <span class="n">CommPortIdentifier</span> <span class="n">portIdentifier</span><span class="o">;</span>
	<span class="kd">private</span> <span class="n">CommPort</span> <span class="n">commPort</span><span class="o">;</span>
	<span class="kd">private</span> <span class="n">SerialPort</span> <span class="n">serialPort</span><span class="o">;</span>
	
	<span class="kd">private</span> <span class="n">OutputStream</span> <span class="n">out</span><span class="o">;</span>
	
	<span class="c1">// TextArea에 문자열 출력하기 위한 method</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">printMSG</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Platform</span><span class="o">.</span><span class="na">runLater</span><span class="o">(()-&gt;{</span>
			<span class="n">textarea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="n">msg</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="o">});</span>
	<span class="o">}</span>
	
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">connectPort</span><span class="o">(</span><span class="n">String</span> <span class="n">portName</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">portIdentifier</span> <span class="o">=</span> <span class="n">CommPortIdentifier</span><span class="o">.</span><span class="na">getPortIdentifier</span><span class="o">(</span><span class="n">portName</span><span class="o">);</span>
			<span class="n">printMSG</span><span class="o">(</span><span class="n">portName</span> <span class="o">+</span> <span class="s">"에 연결을 시도합니다!!"</span><span class="o">);</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">portIdentifier</span><span class="o">.</span><span class="na">isCurrentlyOwned</span><span class="o">())</span> <span class="o">{</span>
				<span class="n">printMSG</span><span class="o">(</span><span class="n">portName</span> <span class="o">+</span> <span class="s">"가 현재 다른 프로그램에 의해 사용중입니다. "</span><span class="o">);</span>				
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="c1">// 포트를 열고 포트객체를 얻는다.</span>
				<span class="c1">// open()의 첫번째 인자 : Name of application making this call.</span>
				<span class="c1">// open()의 두번째 인자 : Time in milliseconds to block waiting for port open.</span>
				<span class="n">commPort</span> <span class="o">=</span> <span class="n">portIdentifier</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span> <span class="mi">5000</span><span class="o">);</span>
				<span class="k">if</span><span class="o">(</span> <span class="n">commPort</span> <span class="k">instanceof</span> <span class="n">SerialPort</span> <span class="o">)</span> <span class="o">{</span>
					<span class="n">serialPort</span> <span class="o">=</span> <span class="o">(</span><span class="n">SerialPort</span><span class="o">)</span> <span class="n">commPort</span><span class="o">;</span>
					<span class="n">serialPort</span><span class="o">.</span><span class="na">setSerialPortParams</span><span class="o">(</span><span class="mi">9600</span><span class="o">,</span> <span class="c1">// 통신속도</span>
							<span class="n">SerialPort</span><span class="o">.</span><span class="na">DATABITS_8</span><span class="o">,</span> <span class="c1">// 데이터 비트 </span>
							<span class="n">SerialPort</span><span class="o">.</span><span class="na">STOPBITS_1</span><span class="o">,</span> <span class="c1">// Stop 비트 </span>
							<span class="n">SerialPort</span><span class="o">.</span><span class="na">PARITY_NONE</span><span class="o">);</span>  <span class="c1">// Parity 비트</span>
					<span class="c1">// OutputStream 생성</span>
					<span class="n">out</span> <span class="o">=</span> <span class="n">serialPort</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span> 
					<span class="n">printMSG</span><span class="o">(</span><span class="s">"성공적으로 "</span> <span class="o">+</span> <span class="n">portName</span> <span class="o">+</span> <span class="s">"에 접속되었습니다.!!"</span><span class="o">);</span>
				<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
					<span class="n">printMSG</span><span class="o">(</span><span class="s">"Serial Port만 사용할 수 있습니다.!!"</span><span class="o">);</span>	
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">sendDataFrame</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// String msg = "W" + "28" + "10003B01" + "0000000000005011";</span>
		<span class="c1">// 데이터프레임 전송</span>
		<span class="c1">// CAN 네트워크상에 특정 CAN Message를 보내고자 할 때</span>
		<span class="c1">// 시작문자 =&gt; 1문자 =&gt; ":" 이용</span>
		<span class="c1">// 명령코드 =&gt; 1문자 =&gt; "W" (전송)</span>
		<span class="c1">// 송신데이터 특성코드 =&gt; 2문자</span>
		<span class="c1">//                   5번째 bit가 0이면 CAN2.0A, 1이면 CAN2.0B를 나타냄</span>
		<span class="c1">//                   4번째 bit가 0이면 Data Frame을 지칭, 1이면 Remote Frame</span>
		<span class="c1">//                   3번째~0번째는 송신데이터의 길이(0부터 8까지의 값을 가지게 된다.)</span>
		<span class="c1">//                   예) 28 =&gt; 00101000 =&gt; CAN2.0B이면서 데이터 길이가 8인</span>
		<span class="c1">//                             Data Frame을 의미.</span>
		<span class="c1">// CAN 송신 ID =&gt; 4문자(11bit사용시) 혹은 8문자(29bit사용시)</span>
		<span class="c1">//               16진수로 표현하고 4bit가 1문자로 표현되기때문에 29bit를 표현하기 위해서는</span>
		<span class="c1">//               8개의 16진수가 필요하고 문자로 표현.</span>
		<span class="c1">//               예) 041C0800 =&gt; 0번부터 28번 비트중에</span>
		<span class="c1">//                            =&gt; 26번, 20번, 19번, 18번, 11번 bit가 check</span>
		<span class="c1">// CAN 송신 Data =&gt; 위에서 정의한 송신데이터 특성 코드 중 송신데이터의 길이에 따라</span>
		<span class="c1">//              =&gt; 0 ~ 16문자를 표현</span>
		<span class="c1">//              =&gt; 예) 데이터 프레임 개수(송신데이터의 길이)가 8이면 ASCII형식으로는</span>
		<span class="c1">//                     8개의 문자로 Hex표현이면 16개의 문자로 표현</span>
		<span class="c1">// Checksum =&gt; 2문자(수식에 의한 Checksum계산)                       </span>
		<span class="c1">// 끝 문자 =&gt; 1문자 ( "\r" 사용 )</span>
		
		<span class="n">msg</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
		<span class="kt">char</span> <span class="n">c</span><span class="o">[]</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">checksumData</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">cc</span> <span class="o">:</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">checksumData</span> <span class="o">+=</span> <span class="n">cc</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">checksumData</span> <span class="o">=</span> <span class="o">(</span><span class="n">checksumData</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">);</span>
		<span class="n">String</span> <span class="n">sendMsg</span> <span class="o">=</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> 
				<span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">checksumData</span><span class="o">).</span><span class="na">toUpperCase</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\r"</span><span class="o">;</span>
		
		<span class="n">printMSG</span><span class="o">(</span><span class="s">"생성된 전송 메시지 : "</span> <span class="o">+</span> <span class="n">sendMsg</span><span class="o">);</span>
		
		<span class="c1">// 전송할 byte배열 생성</span>
		<span class="kt">byte</span><span class="o">[]</span> <span class="n">inputData</span> <span class="o">=</span> <span class="n">sendMsg</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">inputData</span><span class="o">);</span>
			<span class="c1">//out.flush();</span>
			<span class="n">printMSG</span><span class="o">(</span><span class="s">"성공적으로 전송되었습니다.!!"</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>					
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>

		<span class="n">BorderPane</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BorderPane</span><span class="o">();</span>
		<span class="n">root</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">700</span><span class="o">,</span> <span class="mi">500</span><span class="o">);</span>
		
		<span class="n">textarea</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextArea</span><span class="o">();</span>
		<span class="n">root</span><span class="o">.</span><span class="na">setCenter</span><span class="o">(</span><span class="n">textarea</span><span class="o">);</span>
			
		<span class="n">connBtn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="s">"COM 포트 접속"</span><span class="o">);</span>
		<span class="n">connBtn</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">connBtn</span><span class="o">.</span><span class="na">setPadding</span><span class="o">(</span><span class="k">new</span> <span class="n">Insets</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
		<span class="n">connBtn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="n">String</span> <span class="n">portName</span> <span class="o">=</span> <span class="s">"COM16"</span><span class="o">;</span>
			<span class="c1">// 포트 접속</span>
			<span class="n">connectPort</span><span class="o">(</span><span class="n">portName</span><span class="o">);</span>
		<span class="o">});</span>
		
		<span class="n">sendBtn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="s">"Data Frame 전송"</span><span class="o">);</span>
		<span class="n">sendBtn</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">sendBtn</span><span class="o">.</span><span class="na">setPadding</span><span class="o">(</span><span class="k">new</span> <span class="n">Insets</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
		<span class="n">sendBtn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="c1">// Data Frame 전송</span>
			<span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="s">"W"</span> <span class="o">+</span> <span class="s">"28"</span> <span class="o">+</span> <span class="s">"10003B01"</span> <span class="o">+</span> <span class="s">"0000000000005011"</span><span class="o">;</span>
			<span class="n">sendDataFrame</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>			
		<span class="o">});</span>				
		
		<span class="n">FlowPane</span> <span class="n">flowPane</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlowPane</span><span class="o">();</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">700</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">setHgap</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">connBtn</span><span class="o">);</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">sendBtn</span><span class="o">);</span>
		
		<span class="n">root</span><span class="o">.</span><span class="na">setBottom</span><span class="o">(</span><span class="n">flowPane</span><span class="o">);</span>
		
		<span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">"CAN DataFrame Send Test"</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setOnCloseRequest</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">});</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
		
	<span class="o">}</span>
	 
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">launch</span><span class="o">();</span>
	<span class="o">}</span>		
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>DataFrame Receiver &amp; 환경설정</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exam02_DataFrameReceiver</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>

	<span class="n">TextArea</span> <span class="n">textarea</span><span class="o">;</span>
	<span class="c1">// 포트접속버튼, 환경쓰기버튼, 데이터수신가능버튼, 데이터수신가능버튼</span>
	<span class="n">Button</span> <span class="n">connBtn</span><span class="o">,</span> <span class="n">envBtn</span><span class="o">,</span> <span class="n">revEnableBtn</span><span class="o">,</span> <span class="n">revDisableBtn</span><span class="o">;</span>
		
	<span class="kd">private</span> <span class="n">CommPortIdentifier</span> <span class="n">portIdentifier</span><span class="o">;</span>
	<span class="kd">private</span> <span class="n">CommPort</span> <span class="n">commPort</span><span class="o">;</span>
	<span class="kd">private</span> <span class="n">SerialPort</span> <span class="n">serialPort</span><span class="o">;</span>
	
	<span class="kd">private</span> <span class="n">BufferedInputStream</span> <span class="n">bin</span><span class="o">;</span>
	<span class="kd">private</span> <span class="n">OutputStream</span> <span class="n">out</span><span class="o">;</span>
	
	
	<span class="kd">class</span> <span class="nc">MyPortListener</span> <span class="kd">implements</span> <span class="n">SerialPortEventListener</span> <span class="o">{</span>
		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">serialEvent</span><span class="o">(</span><span class="n">SerialPortEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getEventType</span><span class="o">()</span> <span class="o">==</span> <span class="n">SerialPortEvent</span><span class="o">.</span><span class="na">DATA_AVAILABLE</span><span class="o">)</span> <span class="o">{</span>
				<span class="kt">byte</span><span class="o">[]</span> <span class="n">readBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
				<span class="k">try</span> <span class="o">{</span> 
					<span class="k">while</span> <span class="o">(</span><span class="n">bin</span><span class="o">.</span><span class="na">available</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
						<span class="n">bin</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">readBuffer</span><span class="o">);</span>
					<span class="o">}</span>
					<span class="n">String</span> <span class="n">revData</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">readBuffer</span><span class="o">);</span>
					<span class="n">printMSG</span><span class="o">(</span><span class="s">"Receive Low Data:"</span> <span class="o">+</span> <span class="n">revData</span><span class="o">);</span>	
					<span class="k">if</span><span class="o">(</span><span class="n">revData</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">":G01A8"</span><span class="o">))</span> <span class="o">{</span>
						<span class="n">printMSG</span><span class="o">(</span><span class="s">"지금부터 데이터 수신 가능합니다."</span><span class="o">);</span>
					<span class="o">}</span>
					<span class="k">if</span><span class="o">(</span><span class="n">revData</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">":G00A7"</span><span class="o">))</span> <span class="o">{</span>
						<span class="n">printMSG</span><span class="o">(</span><span class="s">"지금부터 데이터 수신이 불가능합니다."</span><span class="o">);</span>
					<span class="o">}</span>	
					<span class="c1">// CAN 수신 데이터 읽기 </span>
					<span class="c1">// U2800000001111100000000000044</span>
					<span class="c1">// 시작문자 =&gt; :</span>
					<span class="c1">// 명령코드 =&gt; U</span>
					<span class="c1">// 수신데이터 특성코드 : 0010 1000 =&gt; 28</span>
					<span class="c1">// CAN 수신 ID : 00000001</span>
					<span class="c1">// CAN 수신 데이터 : 1111000000000000</span>
					<span class="c1">// checksum : 44</span>
					<span class="k">if</span><span class="o">(</span><span class="n">revData</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'U'</span><span class="o">)</span> <span class="o">{</span>
						<span class="n">printMSG</span><span class="o">(</span><span class="s">"데이터를 수신했습니다."</span><span class="o">);</span>
					<span class="o">}</span>
				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
				<span class="o">}</span>				
			<span class="o">}</span>		
		<span class="o">}</span>		
	<span class="o">}</span>
	
	<span class="c1">// TextArea에 문자열 출력하기 위한 method</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">printMSG</span><span class="o">(</span><span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Platform</span><span class="o">.</span><span class="na">runLater</span><span class="o">(()-&gt;{</span>
			<span class="n">textarea</span><span class="o">.</span><span class="na">appendText</span><span class="o">(</span><span class="n">msg</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="o">});</span>
	<span class="o">}</span>
	
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">connectPort</span><span class="o">(</span><span class="n">String</span> <span class="n">portName</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">portIdentifier</span> <span class="o">=</span> <span class="n">CommPortIdentifier</span><span class="o">.</span><span class="na">getPortIdentifier</span><span class="o">(</span><span class="n">portName</span><span class="o">);</span>
			<span class="n">printMSG</span><span class="o">(</span><span class="n">portName</span> <span class="o">+</span> <span class="s">"에 연결을 시도합니다!!"</span><span class="o">);</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">portIdentifier</span><span class="o">.</span><span class="na">isCurrentlyOwned</span><span class="o">())</span> <span class="o">{</span>
				<span class="n">printMSG</span><span class="o">(</span><span class="n">portName</span> <span class="o">+</span> <span class="s">"가 현재 다른 프로그램에 의해 사용중입니다. "</span><span class="o">);</span>				
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="c1">// 포트를 열고 포트객체를 얻는다.</span>
				<span class="c1">// open()의 첫번째 인자 : Name of application making this call.</span>
				<span class="c1">// open()의 두번째 인자 : Time in milliseconds to block waiting for port open.</span>
				<span class="n">commPort</span> <span class="o">=</span> <span class="n">portIdentifier</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span> <span class="mi">5000</span><span class="o">);</span>
				<span class="k">if</span><span class="o">(</span> <span class="n">commPort</span> <span class="k">instanceof</span> <span class="n">SerialPort</span> <span class="o">)</span> <span class="o">{</span>
					<span class="n">serialPort</span> <span class="o">=</span> <span class="o">(</span><span class="n">SerialPort</span><span class="o">)</span> <span class="n">commPort</span><span class="o">;</span>
					<span class="n">serialPort</span><span class="o">.</span><span class="na">setSerialPortParams</span><span class="o">(</span><span class="mi">921600</span><span class="o">,</span> <span class="c1">// 통신속도</span>
							<span class="n">SerialPort</span><span class="o">.</span><span class="na">DATABITS_8</span><span class="o">,</span> <span class="c1">// 데이터 비트 </span>
							<span class="n">SerialPort</span><span class="o">.</span><span class="na">STOPBITS_1</span><span class="o">,</span> <span class="c1">// Stop 비트 </span>
							<span class="n">SerialPort</span><span class="o">.</span><span class="na">PARITY_NONE</span><span class="o">);</span>  <span class="c1">// Parity 비트</span>
			        <span class="n">printMSG</span><span class="o">(</span><span class="n">portName</span> <span class="o">+</span> <span class="s">"에 이벤트 리스너가 등록되었습니다."</span><span class="o">);</span>
					<span class="c1">// Stream 생성</span>
					<span class="n">bin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="n">serialPort</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
					<span class="n">out</span> <span class="o">=</span> <span class="n">serialPort</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span> 
					<span class="n">printMSG</span><span class="o">(</span><span class="s">"성공적으로 "</span> <span class="o">+</span> <span class="n">portName</span> <span class="o">+</span> <span class="s">"에 접속되었습니다.!!"</span><span class="o">);</span>
				    <span class="n">serialPort</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="k">new</span> <span class="n">MyPortListener</span><span class="o">());</span>
				    <span class="n">serialPort</span><span class="o">.</span><span class="na">notifyOnDataAvailable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
				<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
					<span class="n">printMSG</span><span class="o">(</span><span class="s">"Serial Port만 사용할 수 있습니다.!!"</span><span class="o">);</span>	
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Stage</span> <span class="n">primaryStage</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>

		<span class="n">BorderPane</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BorderPane</span><span class="o">();</span>
		<span class="n">root</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">850</span><span class="o">,</span> <span class="mi">500</span><span class="o">);</span>
		
		<span class="n">textarea</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextArea</span><span class="o">();</span>
		<span class="n">root</span><span class="o">.</span><span class="na">setCenter</span><span class="o">(</span><span class="n">textarea</span><span class="o">);</span>
		
		<span class="n">connBtn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="s">"Serial 포트 접속"</span><span class="o">);</span>
		<span class="n">connBtn</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">connBtn</span><span class="o">.</span><span class="na">setPadding</span><span class="o">(</span><span class="k">new</span> <span class="n">Insets</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
		<span class="n">connBtn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="n">String</span> <span class="n">portName</span> <span class="o">=</span> <span class="s">"COM16"</span><span class="o">;</span>
			<span class="n">connectPort</span><span class="o">(</span><span class="n">portName</span><span class="o">);</span>
		<span class="o">});</span>				
		
		<span class="n">revEnableBtn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="s">"데이터수신가능"</span><span class="o">);</span>
		<span class="n">revEnableBtn</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">revEnableBtn</span><span class="o">.</span><span class="na">setPadding</span><span class="o">(</span><span class="k">new</span> <span class="n">Insets</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
		<span class="n">revEnableBtn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="c1">// CAN 데이터 수신 여부 설정</span>
			<span class="c1">// 시작문자 =&gt; 1문자 =&gt; ":" 이용</span>
			<span class="c1">// 명령코드 =&gt; 1문자 =&gt; "G"</span>
			<span class="c1">// 수신 여부 명령 코드 =&gt; 2문자</span>
			<span class="c1">//                   00 : 현재 CANPro의 CAN 데이터 수신 여부 환경을 읽어온다.</span>
			<span class="c1">//                   10 : CANPro의 CAN 데이터 수신 동작을 중지한다.</span>
			<span class="c1">//                   11 : CANPro의 CAN 데이터 수신 동작을 시작한다.</span>
			<span class="c1">// Check Sum =&gt; 2문자</span>
			<span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"G11"</span><span class="o">;</span>
			<span class="n">String</span> <span class="n">tmpStr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
			<span class="kt">char</span> <span class="n">c</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tmpStr</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">checksumData</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">cc</span> <span class="o">:</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">checksumData</span> <span class="o">+=</span> <span class="n">cc</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="n">checksumData</span> <span class="o">=</span> <span class="o">(</span><span class="n">checksumData</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">);</span>
			<span class="n">String</span> <span class="n">checksumHexString</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">checksumData</span><span class="o">).</span><span class="na">toUpperCase</span><span class="o">();</span>
			<span class="c1">//printMSG("checksum계산값 : " + checksumHexString);</span>
			
			<span class="c1">// 끝문자 =&gt; 1문자 =&gt; "\r" 이용			</span>
			<span class="c1">// String msg = ":G11A9\r";</span>
			<span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="n">checksumHexString</span> <span class="o">+</span> <span class="s">"\r"</span><span class="o">;</span>
			
			<span class="k">try</span> <span class="o">{</span>
				<span class="kt">byte</span><span class="o">[]</span> <span class="n">inputData</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
				<span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">inputData</span><span class="o">);</span>
				<span class="c1">// 정상응답이 올경우</span>
				<span class="c1">// ":G01A8"   =&gt; 00의 의미는 현재 CAN 데이터 수신 동작이 중지.</span>
				<span class="c1">//            =&gt; 01의 의미는 현재 CAN 데이터 수신 동작이 시작.</span>
				<span class="c1">//            =&gt; A8의 의미는 G01에 대한 checksum         </span>
				
			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">});</span>				
		
		<span class="n">revDisableBtn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="s">"데이터수신중지"</span><span class="o">);</span>
		<span class="n">revDisableBtn</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">revDisableBtn</span><span class="o">.</span><span class="na">setPadding</span><span class="o">(</span><span class="k">new</span> <span class="n">Insets</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
		<span class="n">revDisableBtn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="c1">// CAN 데이터 수신 여부 설정</span>
			<span class="c1">// 시작문자 =&gt; 1문자 =&gt; ":" 이용</span>
			<span class="c1">// 명령코드 =&gt; 1문자 =&gt; "G"</span>
			<span class="c1">// 수신 여부 명령 코드 =&gt; 2문자</span>
			<span class="c1">//                   00 : 현재 CANPro의 CAN 데이터 수신 여부 환경을 읽어온다.</span>
			<span class="c1">//                   10 : CANPro의 CAN 데이터 수신 동작을 중지한다.</span>
			<span class="c1">//                   11 : CANPro의 CAN 데이터 수신 동작을 시작한다.</span>
			<span class="c1">// Check Sum =&gt; 2문자</span>
			<span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"G10"</span><span class="o">;</span>
			<span class="n">String</span> <span class="n">tmpStr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
			<span class="kt">char</span> <span class="n">c</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tmpStr</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">checksumData</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">cc</span> <span class="o">:</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">checksumData</span> <span class="o">+=</span> <span class="n">cc</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="n">checksumData</span> <span class="o">=</span> <span class="o">(</span><span class="n">checksumData</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">);</span>
			<span class="n">String</span> <span class="n">checksumHexString</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">checksumData</span><span class="o">).</span><span class="na">toUpperCase</span><span class="o">();</span>
			<span class="c1">//printMSG("checksum계산값 : " + checksumHexString);</span>
			
			<span class="c1">// 끝문자 =&gt; 1문자 =&gt; "\r" 이용			</span>
			<span class="c1">// String msg = ":G10A9\r";</span>
			<span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="n">checksumHexString</span> <span class="o">+</span> <span class="s">"\r"</span><span class="o">;</span>
			
			<span class="k">try</span> <span class="o">{</span>
				<span class="kt">byte</span><span class="o">[]</span> <span class="n">inputData</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
				<span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">inputData</span><span class="o">);</span>
				<span class="c1">// 정상응답이 올경우</span>
				<span class="c1">// ":G00A7"   =&gt; 00의 의미는 현재 CAN 데이터 수신 동작이 중지.</span>
				<span class="c1">//            =&gt; 01의 의미는 현재 CAN 데이터 수신 동작이 시작.</span>
				<span class="c1">//            =&gt; A7의 의미는 G00에 대한 checksum         </span>
			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">});</span>				
		
		<span class="n">envBtn</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Button</span><span class="o">(</span><span class="s">"환경설정"</span><span class="o">);</span>
		<span class="n">envBtn</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">envBtn</span><span class="o">.</span><span class="na">setPadding</span><span class="o">(</span><span class="k">new</span> <span class="n">Insets</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
		<span class="n">envBtn</span><span class="o">.</span><span class="na">setOnAction</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="c1">// CAN 데이터 수신 여부 설정</span>
			<span class="c1">// 시작문자 =&gt; 1문자 =&gt; ":" 이용</span>
			<span class="c1">// 명령코드 =&gt; 1문자 =&gt; "Z"</span>
			<span class="c1">// 자세한 설정내용은 CANPro User Manual 참조</span>
			<span class="c1">// CAN bit time에 대한 내용은 User Manual 3page</span>
			<span class="c1">// 250k =&gt; 0x0F, 0x34로 지정되어 있음.</span>
			<span class="c1">// https://www.mathsisfun.com/binary-decimal-hexadecimal-converter.html</span>
			<span class="c1">// 해당사이트를 이용하면 4bit의 값을 hexa로 표현 가능.</span>
			<span class="c1">// String str = "Z 1C 0F34 00000001 00000001";</span>
			<span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"Z1C0F340000000100000001"</span><span class="o">;</span>
			<span class="n">String</span> <span class="n">tmpStr</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
			<span class="kt">char</span> <span class="n">c</span><span class="o">[]</span> <span class="o">=</span> <span class="n">tmpStr</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
			<span class="kt">int</span> <span class="n">checksumData</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">cc</span> <span class="o">:</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">checksumData</span> <span class="o">+=</span> <span class="n">cc</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="n">checksumData</span> <span class="o">=</span> <span class="o">(</span><span class="n">checksumData</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">);</span>
			<span class="n">String</span> <span class="n">checksumHexString</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">checksumData</span><span class="o">).</span><span class="na">toUpperCase</span><span class="o">();</span>
			<span class="c1">//printMSG("checksum계산값 : " + checksumHexString);</span>
			
			<span class="c1">// 끝문자 =&gt; 1문자 =&gt; "\r" 이용			</span>
			<span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="n">checksumHexString</span> <span class="o">+</span> <span class="s">"\r"</span><span class="o">;</span>
			
			<span class="k">try</span> <span class="o">{</span>
				<span class="kt">byte</span><span class="o">[]</span> <span class="n">inputData</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
				<span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">inputData</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">e1</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">});</span>				
		
		<span class="n">FlowPane</span> <span class="n">flowPane</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlowPane</span><span class="o">();</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">setPrefSize</span><span class="o">(</span><span class="mi">850</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">setHgap</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">connBtn</span><span class="o">);</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">revEnableBtn</span><span class="o">);</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">revDisableBtn</span><span class="o">);</span>
		<span class="n">flowPane</span><span class="o">.</span><span class="na">getChildren</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">envBtn</span><span class="o">);</span>
		
		<span class="n">root</span><span class="o">.</span><span class="na">setBottom</span><span class="o">(</span><span class="n">flowPane</span><span class="o">);</span>
		
		<span class="n">Scene</span> <span class="n">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scene</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setScene</span><span class="o">(</span><span class="n">scene</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">"CAN DataFrame Receive Test"</span><span class="o">);</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">setOnCloseRequest</span><span class="o">(</span><span class="n">e</span><span class="o">-&gt;{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">});</span>
		<span class="n">primaryStage</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
		
	<span class="o">}</span>
	 
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">launch</span><span class="o">();</span>
	<span class="o">}</span>	
	
<span class="o">}</span>
</code></pre></div></div>

<p>End.</p>

<hr />

	  ]]></description>
	</item>

	<item>
	  <title>Hadoop 설치와 활용</title>
	  <link>http://localhost:4000/hadoop</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2020-02-02T01:40:00+09:00</pubDate>
	  <guid>http://localhost:4000/hadoop</guid>
	  <description><![CDATA[
	     <p><strong class="subtitle_fontAwesome">VMware Workstation Pro 15 설치 및 CentOS 7 설치</strong></p>

<p>Hadoop을 사용하기 위해서 Windows 10에 <code class="highlighter-rouge">VMWARE Workstation Pro 15</code>를 설치한 후 <code class="highlighter-rouge">CentOS 7</code>을 설치합니다.
(VMWare Workstation Player는 무료로 사용가능하지만 Workstation Pro 버전은 유료입니다. 30일 trial을 이용할 수 있습니다.)</p>

<p>먼저 VMware Workstation Pro를 설치하고 실행하면 다음과 같은 화면을 볼 수 있습니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-1.png" alt="VMWARE 설치-1" /></p>

<p>새로운 가상머신을 만듭니다. 가상머신을 만든 후 나중에 iso파일을 이용해서 CentOS 7을 설치합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-2.png" alt="VMWARE 설치-2" /></p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-3.png" alt="VMWARE 설치-3" /></p>

<p>가상머신의 이름을 정해주는 부분이 나오는데 우리는 가상머신을 총 4개 이용할것입니다. 각각의 가상머신 이름을
Hadoop01 ~ Hadoop04까지 사용합니다. 처음의 가상머신만 생성하고 나머지 3개의 가상머신은 clone해서 사용합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-4.png" alt="VMWARE 설치-4" /></p>

<p>디스크 공간은 50GB로 설정하고 <code class="highlighter-rouge">Customize Hardware</code>를 클릭해서 사용 메모리는 2GB로 설정합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-5.png" alt="VMWARE 설치-5" /></p>

<p>생성이 완료된 후 Virtual Machine Setting을 이용하여 <code class="highlighter-rouge">CD/DVD</code>부분에 <code class="highlighter-rouge">CentOS 7 iso image파일</code>을 연결한 후
Virtual Machine을 기동시키면 CentOS 7 설치가 진행됩니다.</p>

<p>CentOS 7 iso image는 <a href="http://mirror.kakao.com/centos/7.8.2003/isos/x86_64/" target="_blank">여기</a>를 
클릭하면 <code class="highlighter-rouge">CentOS-7-x86_64-DVD-2003.iso</code> 파일을 받으실 수 있습니다.</p>

<p>아래의 화면은 VMware Player를 이용한 설치화면입니다. WMware Workstation을 사용하는것과 차이가 없습니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-6.png" alt="VMWARE 설치-6" /></p>

<p>먼저 언어선택에서 <code class="highlighter-rouge">한국어</code>를 선택하시고 계속 진행하면 다음과 같은 화면이 나오는데 여기서 먼저 
<code class="highlighter-rouge">네트워크 및 호스트명</code>으로 들어간 후 네크워크를 연결(켬)합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-7.png" alt="VMWARE 설치-7" /></p>

<p><code class="highlighter-rouge">완료</code>를 클릭하신 후 <code class="highlighter-rouge">소프트웨어 &gt; 소프트웨어 설치</code>를 클릭한 후 다음과 같이 설정합니다. 
(<code class="highlighter-rouge">GNOME</code> 사용이 필수는 아닙니다. 사용의 편의를 위해서 GNOME을 선택한 것 뿐입니다.)</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-8.png" alt="VMWARE 설치-8" /></p>

<p>완료를 클릭한 후 <code class="highlighter-rouge">시스템 &gt; 설치대상</code>을 선택하여 파티션을 잡아줍니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-9.png" alt="VMWARE 설치-9" /></p>

<p><code class="highlighter-rouge">파티션을 설정합니다.</code> 부분을 선택하고 완료를 누르면 수동으로 파티션 설정하는 부분으로 넘어갑니다. 다음의
각 파티션을 설정합니다.</p>

<ul>
  <li><code class="highlighter-rouge">swap</code> : 2GB</li>
  <li><code class="highlighter-rouge">/boot</code> : 1GB</li>
  <li><code class="highlighter-rouge">/home</code> : 10GB</li>
  <li><code class="highlighter-rouge">/</code> : 용량을 지정하지 않으면 나머지 모든 용량을 자동으로 할당합니다.</li>
</ul>

<p><img src="../../assets/built/images/iot-hadoop-vmware-10.png" alt="VMWARE 설치-10" /></p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-11.png" alt="VMWARE 설치-11" /></p>

<p>설치시작을 눌러 설치를 시작합니다.</p>

<p>root 유저의 암호를 변경하고 새로운 사용자를 한명 추가합니다. 새로운 사용자를 추가했지만
사용의 편의를 위해 root 계정을 이용하도록 하겠습니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-12.png" alt="VMWARE 설치-12" /></p>

<p>설치가 끝나면 재부팅하고 root 계정으로 로그인합니다.</p>

<p><strong class="subtitle2_fontAwesome">Java 설치</strong></p>

<p>Hadoop은 JVM상에서 동작하기 때문에 Java를 설치해야 합니다. Java를 다시 설치하고 환경변수를 설정합니다. 
Java는 8버전을 이용합니다.</p>

<ul>
  <li>기존의 Java 삭제</li>
</ul>

<blockquote>
  <p><strong>rpm -qa | grep java</strong></p>
</blockquote>

<p>결과로 출력된 파일 중 <code class="highlighter-rouge">javapackages-tools-3.4.1-11.el7.noarch</code>, <code class="highlighter-rouge">python-javapackages-3.4.1-11.el7.noarch</code>,
<code class="highlighter-rouge">tzdata-java-2018e-3.el7.noarch</code> 3개에 대해서 삭제를 진행합니다.</p>

<blockquote>
  <p><strong>yum remove javapackages-tools-3.4.1-11.el7.noarch</strong></p>
</blockquote>

<blockquote>
  <p><strong>yum remove python-javapackages-3.4.1-11.el7.noarch</strong></p>
</blockquote>

<blockquote>
  <p><strong>yum remove tzdata-java-2018e-3.el7.noarch</strong></p>
</blockquote>

<blockquote>
  <p><strong>rpm -qa | grep java</strong></p>
</blockquote>

<p>설치된 내용이 없음을 확인한 후 Oracle에서 Java 8을 다운로드 합니다.
만약 다운로드가 잘 안되면 Windows에서 다운로드 한 후 (Linux X64 tar.gz파일) 공유폴더를 이용해서
CentOS로 복사합니다.</p>

<p>공유폴더 설정은 윈도우에서 공유폴더를 하나 생성한 후 폴더의 <code class="highlighter-rouge">속성 &gt; 공유 &gt; 고급공유</code>에서 <code class="highlighter-rouge">선택한 폴더공유</code>를
체크하고 <code class="highlighter-rouge">권한</code>부분에서 <code class="highlighter-rouge">eveyone에 모든 권한</code>을 부여합니다.</p>

<p>VMware 가상머신 설정에서 <code class="highlighter-rouge">option</code> 탭에서 아래의 그림과 같이 설정합니다. 설정이 끝나면 <code class="highlighter-rouge">VMware Tool</code>을 설치합니다.
<code class="highlighter-rouge">VM</code> 메뉴의 <code class="highlighter-rouge">Install VMware Tools</code>를 선택하면 VMware Tools가 CD형식으로 바탕화면에 나타나고 
<code class="highlighter-rouge">/run/media/root/VMware Tools/</code> 디렉토리로 이동하면 <code class="highlighter-rouge">VMwareTools-10.3.21-14772444.tar.gz</code> 파일을 확인할 수 있습니다.</p>

<p>해당 파일을 root 계정의 home으로 복사한 후 아래의 명령을 이용하여 해당 파일의 압축을 풀고 
설치 shell script를 실행하면 VMware tool을 설치할 수 있습니다.</p>

<blockquote>
  <p><strong>tar zxvf VMwareTools-10.3.21-14772444.tar.gz</strong></p>
</blockquote>

<p>VMware Tool가 설치되어야 <code class="highlighter-rouge">/mnt/hgfs</code>폴더가 생성되고 그 안에 윈도우에서 공유한 공유폴더가 보여지게 됩니다..</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-sharedfolder.png" alt="공유폴더 설정" /></p>

<p>Java 파일을 얻었으면 압축을 풀고 <code class="highlighter-rouge">/usr/local/java</code> 폴더로 <code class="highlighter-rouge">Java Home</code>을 설정합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-java-install.png" alt="Java 설치" /></p>

<p>vi를 이용해서 /etc/profile에 다음의 내용을 추가합니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export JAVA_HOME=/usr/local/java
export HADOOP_HOME=/usr/local/hadoop
export CLASSPATH=$JAVA_HOME/lib:$CLASSPATH
PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
</code></pre></div></div>

<p>변경된 profile을 적용시켜야 합니다.</p>

<blockquote>
  <p><strong>source /etc/profile</strong></p>
</blockquote>

<p>Java가 정상적으로 설치됬는지 확인합니다.</p>

<blockquote>
  <p><strong>java -version</strong></p>
</blockquote>

<p><img src="../../assets/built/images/iot-hadoop-java-version.png" alt="Java Version" /></p>

<hr />

<p><strong class="subtitle_fontAwesome">VMWARE CentOS 7 복사</strong></p>

<p>Hadoop을 사용하기 위해서 서버 4개를 이용할 것입니다. 설치가 끝나면 생성된 가상머신에서 마우스 오른쪽
클릭을 하면 메뉴가 나오는데 <code class="highlighter-rouge">Manage &gt; Clone...</code>을 선택합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-13.png" alt="VMWARE 설치-13" /></p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-14.png" alt="VMWARE 설치-14" /></p>

<p><code class="highlighter-rouge">Create a full clone</code>을 선택 후 가상 머신 이름을 입력합니다. Hadoop02 ~ Hadoop04까지 3개를 생성합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-15.png" alt="VMWARE 설치-15" /></p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-16.png" alt="VMWARE 설치-16" /></p>

<p><img src="../../assets/built/images/iot-hadoop-vmware-17.png" alt="VMWARE 설치-17" /></p>

<hr />

<p><strong class="subtitle_fontAwesome">Hadoop</strong></p>

<p>Hadoop은 Apache 최상위 오픈소스 프로젝트로 대용량의 데이터를 저장하고 분석하고 처리하기 위한 framework입니다.</p>

<p><strong class="subtitle2_fontAwesome">Hadoop의 특징은 다음과 같습니다.</strong></p>

<ul>
  <li>
    <p><strong>선형적인 확장성 제공</strong> : 일반적인 스토리지는 초기에 애플리케이션에서 사용할 용량을 예측하여 미리 스토리지 용량을 
확보한 상태에서 시스템이 오픈되나, Hadoop을 이용할 경우에는 서비스 초기에 필요한 수준으로만 
스토리지 용량을 확보해 시스템을 오픈한 후 데이터 증가 추이를 보면서 스토리지를 추가하는 방식으로 진행합니다.</p>
  </li>
  <li>
    <p><strong>데이터 분석 처리에 활용</strong> : 분석용 데이터를 HDFS에 저장하고, Map/Reduce라는 분산/병렬 처리 프레임워크를 
데이터 분석하는데 사용합니다.</p>
  </li>
  <li>
    <p><strong>API 기반의 파일 처리 시스템</strong> : 일반적인 파일시스템처럼 운영체제에서 제공하는 파일처리 명령을 이용할 수 없고, 
Hadoop을 이용하는 애플리케이션은 Hadoop에서 제공하는 명령어나 프로그램 API를 이용해야 합니다.</p>
  </li>
  <li>
    <p><strong>Immutable File System</strong> : 파일은 한번 써지면 변경되지 않는다고 가정합니다. 따라서 Hadoop은 파일을 
저장하고 저장된 파일에 대해 읽기 요청 위주(스트리밍 방식)인 응용이나 배치 작업 등에 적합합니다. 
이런 제약 때문에 파일 처리를 주로 하는 기존 솔루션이나 시스템을 수정없이 Hadoop에 적용 할 수는 없습니다.</p>
  </li>
  <li>
    <p><strong>네임스페이스 관리를 NameNode 메모리에 저장</strong> : 파일 시스템의 네임스페이스 정보를 NameNode의 메모리상에서 
관리하기 때문에 Hadoop에 저장할 수 있는 파일과 디렉토리의 개수는 NameNode의 메모리 크기에 제한을 받게됩니다.</p>
  </li>
  <li>
    <p><strong>NameNode 이중화</strong> : NameNode가 SPOF(Single Point Of Failre)입니다. NameNode에 문제가 발생하면 파일시스템 
전체 클러스터에 장애가 발생하게 됩니다. 따라서 일반적으로 Secondary NameNode를 사용해야 합니다.</p>
  </li>
</ul>

<p><strong class="subtitle2_fontAwesome">하둡 분산형 파일시스템(Hadoop Distributed FileSystem, HDFS) 특징</strong></p>

<ul>
  <li>
    <p>HDFS는 데이터를 저장하면 다수의 노드에 복제 데이터도 함께 저장하여 데이터의 유실을 방지합니다.</p>
  </li>
  <li>
    <p>HDFS에 파일을 저장하거나, 저정된 파일을 조회하려면 스트리밍 방식으로 접근해야 합니다.</p>
  </li>
  <li>
    <p>한번 저장된 파일은 수정할 수 없고(2.0부터는 append가능) 읽기만 가능합니다. 따라서 데이터의 무결성을 유지할 수 있습니다.</p>
  </li>
  <li>
    <p>데이터의 수정은 불가능하지만 파일이동, 삭제, 복사를 할 수 있는 인터페이스는 제공합니다.</p>
  </li>
</ul>

<p><strong class="subtitle2_fontAwesome">하둡 분산형 파일시스템(Hadoop Distributed FileSystem, HDFS) 아키텍쳐</strong></p>

<p><img src="../../assets/built/images/iot-hadoop-architecture.png" alt="HDFS Architecture" /></p>

<ul>
  <li>
    <p>블록 구조의 파일 시스템으로, 저장하는 파일은 특정 사이즈의 블록으로 나눠져 분산된 서버에 저장됩니다.</p>
  </li>
  <li>
    <p>기본적으로 HDFS 블록의 사이즈는 Hadoop 배포판에 따라서 64,128,256MB로 상이합니다. 일반적으로 물리적인
디스크는 블록이라는 개념을 이용합니다. 이 블록은 한번에 읽고 쓸 수 있는 데이터의 최대량을 의미합니다. 보통의
파일 시스템의 블록크기는 수 KB이지만 Hadoop의 HDFS는 128MB와 같이 굉장히 큰 단위입니다.
이렇게 큰 단위를 사용하는 이유는 데이터 탐색에 대한 비용을 최소화하기 위해서 입니다. 블록이 크면 블록의 시작점을
탐색하는데 시간이 적게 걸리고 데이터를 전송하는데 더 많은 시간을 할당해 줄 수 있기 때문입니다.
또한 HDFS 파일은 블록 크기보다 작은 데이터일 경우 전체 블록 크기에 해당하는 하위 디스크를 모두 점유하지는 않습니다.
즉, 블록의 크기가 128MB이고 1MB의 데이터를 저장한다면 128MB의 디스크를 사용하는게 아니라 1MB의 디스크만을 사용합니다.</p>
  </li>
  <li>
    <p>하나의 블록은 기본적으로 3개(변경가능)로 복제되며 각각 다른 HDFS의 노드에 분산저장됩니다.</p>
  </li>
  <li>
    <p>HDFS는 <code class="highlighter-rouge">Master</code> 역할을 하는 <code class="highlighter-rouge">NameNode</code> 서버 한 대와, <code class="highlighter-rouge">Slave</code> 역할을 하는 <code class="highlighter-rouge">DataNode</code> 서버 여러 대로 구성됩니다.</p>
  </li>
  <li>
    <p>NameNode는 HDFS의 모든 메타데이터(블록들이 저장되는 디렉토리의 이름, 파일명등)를 관리하고, HDFS 클라이언트가 이를 
이용하여 저장된 파일에 접근할 수 있습니다.</p>
  </li>
  <li>
    <p>Hadoop 어플리케이션은 HDFS에 파일을 저장하거나, 저장된 파일을 읽기 위해 HDFS 클라이언트를 사용하며, 
클라이언트는 API형태로 사용자에게 제공합니다.</p>
  </li>
  <li>
    <p>DataNode는 주기적으로 NameNode에게 블록 리포트(노드에 저장되어 있는 블록의 정보)를 전송하고 이를 통해 
NameNode는 DataNode가 정상 동작하는지 확인합니다.</p>
  </li>
  <li>
    <p>HDFS 클라이언트는 NameNode에 접속해서 원하는 파일이 저장된 블록의 위치를 확인하고, 
해당 블록이 저장된 DataNode에서 직접 데이터를 조회합니다.</p>
  </li>
</ul>

<p><strong class="subtitle2_fontAwesome">하둡 분산형 파일시스템(Hadoop Distributed FileSystem, HDFS) 파일 저장 Flow</strong></p>

<p><img src="../../assets/built/images/iot-hadoop-save-data-flow.png" alt="HDFS File Save Flow" /></p>

<ol>
  <li>
    <p>어플리케이션이 HDFS 클라이언트에게 파일 저장을 요청하면, 
HDFS 클라이언트는 NameNode에게 파일 블록들이 저장될 경로 생성을 요청합니다. 
NameNode는 해당 파일 경로가 존재하지 않으면 경로를 생성한 후, 다른 클라이언트가 해당 경로를 수정하지 못하도록 
Lock을 설정합니다. 그 후, NameNode는 클라이언트에게 해당 파일 블록들을 저장할 DataNode의 목록을 반환합니다.</p>
  </li>
  <li>
    <p>클라이언트는 첫 번째 DataNode에게 데이터를 전송합니다.</p>
  </li>
  <li>
    <p>첫 번째 DataNode는 데이터를 로컬에 저장한 후, 데이터를 두 번째 DataNode로 전송합니다.</p>
  </li>
  <li>
    <p>두 번째 DataNode는 데이터를 로컬에 저장한 후, 데이터를 세 번째 DataNode로 전송합니다.</p>
  </li>
  <li>
    <p>로컬에 데이터를 저장하였으면 자기에게 데이터를 넘겨준 DataNode에게 데이터의 로컬 저장이 
완료 되었음을 응답(Ack)합니다.</p>
  </li>
  <li>
    <p>로컬에 데이터를 저장하였으면 자기에게 데이터를 넘겨준 DataNode에게 데이터의 로컬 저장이 
완료 되었음을 응답(Ack)합니다.</p>
  </li>
  <li>
    <p>첫 번째 DataNode는 클라이언트에게 파일 저장이 완료 되었음을 응답합니다.</p>
  </li>
</ol>

<p><strong class="subtitle2_fontAwesome">하둡 분산형 파일시스템(Hadoop Distributed FileSystem, HDFS) 파일 읽기 Flow</strong></p>

<p><img src="../../assets/built/images/iot-hadoop-load-data-flow.png" alt="HDFS File Load Flow" /></p>

<ol>
  <li>
    <p>어플리케이션이 클라이언트에게 파일 읽기를 요청합니다.</p>
  </li>
  <li>
    <p>클라이언트는 NameNode에게 요청된 파일이 어떤 블록에 저장되어 있는지 정보를 요청합니다.</p>
  </li>
  <li>
    <p>메타데이터를 통해 파일이 저장된 블록 리스트를 반환합니다.</p>
  </li>
  <li>
    <p>클라이언트는 DataNode에 접근하여 블록 조회 요청합니다.</p>
  </li>
  <li>
    <p>DataNode는 클라이언트에게 요청된 블록을 전송합니다.</p>
  </li>
  <li>
    <p>클라이언트를 어플리케이션에 데이터를 전달합니다.</p>
  </li>
</ol>

<p><strong class="subtitle2_fontAwesome">MapReduce(맵리듀스)</strong></p>

<p>대용량의 데이터처리를 위한 분산 프로그래밍 모델이자 software framework입니다. 대량의 데이터를
병렬로 분석할 수 있으며 프로그래머는 Map과 Reduce라는 두 개의 method를 직접 작성해서 구성합니다.</p>

<ul>
  <li>
    <p><strong>Map</strong> : 흩어져 있는 데이터를 연관성이 있는 데이터로 key,value형태로 분류하는 작업을 지칭합니다.</p>
  </li>
  <li>
    <p><strong>Reduce</strong> : Map에서 출력된 데이터에서 중복된 데이터를 제거하고 원하는 데이터를 추출하른 작업을 수행합니다.</p>
  </li>
</ul>

<p>아래의 그림은 문자열 데이터에 포함된 단어의 빈도수를 출력해주는 과정입니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-mapreduce.png" alt="MapReduce" /></p>

<ol>
  <li>
    <p><strong>Splitting</strong> : 문자열 데이터를 라인별로 나눕니다.</p>
  </li>
  <li>
    <p><strong>Mapping</strong> : 라인별로 문자열을 입력받아, &lt;key, value&gt; 형태로 출력합니다.</p>
  </li>
  <li>
    <p><strong>Intermediate Splitting(Shuffling)</strong> : 같은 key를 가지는 데이터끼리 분류합니다.</p>
  </li>
  <li>
    <p><strong>Reducing</strong> : 각 key 별로 빈도수를 합산해서 출력합니다.</p>
  </li>
  <li>
    <p><strong>Combining</strong> : Reduce 메소드의 출력 데이터를 합쳐서 HDFS에 저장합니다.</p>
  </li>
</ol>

<hr />

<p><strong class="subtitle_fontAwesome">CentOS 7에 Hadoop 설치</strong></p>

<p>4대의 서버로 진행합니다.</p>

<ul>
  <li><strong>Hadoop01</strong> : NameNode (host명 : namenode)</li>
  <li><strong>Hadoop02</strong> : DataNode (host명 : datanode01)</li>
  <li><strong>Hadoop03</strong> : DataNode (host명 : datanode02)</li>
  <li><strong>Hadoop04</strong> : DataNode (host명 : datanode03)</li>
</ul>

<p>Hadoop의 설치 모드는 총 3개가 있습니다.</p>

<ul>
  <li><strong>Standalone</strong> : 단일 Node로 사용합니다. 테스트 및 디버깅 용도입니다.</li>
  <li><strong>Pseudo distributed</strong> : 단일 Node에서 Cluster를 구성합니다.</li>
  <li><strong>Full distributed</strong> : 두 대 이상의 Node를 CLuster로 구성합니다.</li>
</ul>

<p>여기서는 3번째 <code class="highlighter-rouge">Full distributed</code> 방식으로 진행하며 Hadoop의 버전은 <code class="highlighter-rouge">2.9.2</code>버전을 사용합니다.</p>

<p><strong class="subtitle2_fontAwesome">참고 : 암호화 방식</strong></p>

<ul>
  <li>대칭키 암호화 방식</li>
</ul>

<p>암호화를 위해서는 기본적으로 암호화의 대상이 되는 평서문(Plain Text)과 암호화를 위한 일종의 비밀번호인 
암호키(Cryptography Key) 그리고 마지막으로 암호화 알고리즘(Algorithm)이 필요한데, 
대칭키 암호화 방식은 문자 그대로 암호화와 복호화를 동일한 암호키를 이용하는 방식입니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-enc-dec.png" alt="대칭키 암호화 방식" /></p>

<p>위의 그림을 통해 살펴보면 동일한 암호키를 통해 암호화(Encryption), 복호화(Decryption)하는 것을 볼 수 있는데, 
대칭키를 사용하는 암호화 알고리즘은 <code class="highlighter-rouge">AES</code>와 <code class="highlighter-rouge">DES</code>가 대표적입니다.</p>

<ul>
  <li>RSA를 이용한 암호화</li>
</ul>

<p><code class="highlighter-rouge">RSA</code>는 공개키를 이용하는 대표적인 암호화 방식이며 전자서명이 가능한 최초의 알고리즘으로 알려져 있습니다. 
AES, DES와 같은 대칭키 암호화 방식에서 발생하는 문제점을 해결하였습니다. 과거의 암호 방식은 암호화를 위한 
키뿐만 아니라 알고리즘 역시 노출되지 않기 위해 노력하였으나 현대의 암호에서는 알고리즘을 공개하도록 
하고 있습니다. 키 이외에 암호 시스템의 모든 것이 공개되어도 안전해야 한다고 Kerckhoff라는 사람이 주장 했는데 
이것을 <code class="highlighter-rouge">Kerckhoff의 법칙</code>이라고 합니다.</p>

<p>RSA는 수학적인 기법을 통해 한 쌍의 <code class="highlighter-rouge">공개키</code>와 <code class="highlighter-rouge">비밀키</code>를 생성하는데, 각각의 키는 이론적으로 다음과 같은 용도로
사용됩니다.</p>

<p><code class="highlighter-rouge">Public Key</code> : 누구에게나 공개될 수 있으며 메세지를 보내는 발신자는 공개키를 통해 정보를 암호화한다.</p>

<p><code class="highlighter-rouge">Private Key</code> : 수신자는 비밀키를 암호화된 메세지를 복호화 하는데 사용한다. 외부에 노출되지 않도록 안전하게 보관해야 한다.</p>

<p>이와 같이 <code class="highlighter-rouge">RSA</code>를 이용한 공개키 암호화 방식은 비밀키(Private Key)를 외부에 노출할 위험이 없어 기존의 대칭키 
암호화 방식의 문제를 해결할 수 있습니다.</p>

<p><strong class="subtitle2_fontAwesome">SSH 설정</strong></p>

<p>각 서버의 IP address를 알아야 합니다. <code class="highlighter-rouge">ifconfig</code>를 이용하여 각 Host의 ip address를 파악합니다.</p>

<ul>
  <li>Hadoop01 : 192.168.64.128</li>
  <li>Hadoop02 : 192.168.64.129</li>
  <li>Hadoop03 : 192.168.64.130</li>
  <li>Hadoop04 : 192.168.64.131</li>
</ul>

<p>각 서버마다 /etc/hosts 파일을 편집해서 아래의 내용을 넣어줍니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>192.168.64.128 namenode
192.168.64.129 datanode01
192.168.64.130 datanode02
192.168.64.131 datanode03
</code></pre></div></div>

<p>각 서버마다 /etc/hostname 파일을 편집해서 각 host의 이름을 입력합니다.</p>

<ul>
  <li>192.168.64.128 =&gt; namenode</li>
  <li>192.168.64.129 =&gt; datanode01</li>
  <li>192.168.64.130 =&gt; datanode02</li>
  <li>192.168.64.131 =&gt; datanode03</li>
</ul>

<p>수정이 끝났으면 재부팅을 해줍니다.(서비스를 다시 시작해도 됩니다.)</p>

<p>Hadoop은 클러스터간에 내부 통신에 <code class="highlighter-rouge">SSH(Secure Shell)</code> 프로토콜을 이용합니다. 따라서 패스워드 인증과정없이
SSH 통신을 하기 위해 SSH 공개키를 설정하고 모든 서버에 통합 공개키를 복사하여 통신을 합니다.</p>

<p>각 서버에서 인증키를 생성합니다.</p>

<blockquote>
  <p><strong>ssh-keygen</strong></p>
</blockquote>

<p>입력을 요구하는 부분이 있는데 그냥 <code class="highlighter-rouge">enter</code>를 입력해도 무방합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-ssh-keygen.png" alt="대칭키 암호화 방식" /></p>

<p>모든 서버에서 이 작업을 수행하면 각 서버의 <code class="highlighter-rouge">/root/.ssh/</code> 안에 2개의 파일이 생성됩니다.</p>

<ul>
  <li><strong>id_rsa</strong> : 생성된 개인키(private key)입니다.</li>
  <li><strong>id_rsa.pub</strong> : 생성된 공개키(public key)입니다.</li>
</ul>

<p><img src="../../assets/built/images/iot-hadoop-rsa-rsapub.png" alt="개인키와 공개키" /></p>

<p>먼저 namenode에서 다음의 명령을 이용해 <code class="highlighter-rouge">authorized_keys</code> 파일을 생성합니다. namenode의 공개키를
<code class="highlighter-rouge">authorized_keys</code> 파일에 저장합니다.</p>

<blockquote>
  <p><strong>cp id_rsa.pub authorized_keys</strong></p>
</blockquote>

<p>namenode의 <code class="highlighter-rouge">.ssh</code> 폴더안에 <code class="highlighter-rouge">authorized_keys</code> 파일이 생성됩니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-authorized-keys.png" alt="authorized_keys" /></p>

<p><code class="highlighter-rouge">ssh-copy-id</code> 유틸리티를 이용해서 datanode01 ~ datanode03에서 각자의 공개키를 namenode에 복사합니다.</p>

<blockquote>
  <p><strong>ssh-copy-id root@namenode</strong> (모든 datanode에서 각각 수행해야 합니다.)</p>
</blockquote>

<p><img src="../../assets/built/images/iot-hadoop-key-copy.png" alt="key 복사" /></p>

<p>각 datanode(01~03)에서 namenode로 공개키를 복사하면 namenode의 authorized_keys의 내용은 아래 그림처럼
저장되게 됩니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-result_authorized_keys.png" alt="결과 authorized_keys" /></p>

<p>이제 통합된 key를 각각의 서버에 보내주면 됩니다.</p>

<blockquote>
  <p><strong>scp -rp authorized_keys root@datanode01:~/.ssh/authorized_keys</strong></p>
</blockquote>

<blockquote>
  <p><strong>scp -rp authorized_keys root@datanode02:~/.ssh/authorized_keys</strong></p>
</blockquote>

<blockquote>
  <p><strong>scp -rp authorized_keys root@datanode03:~/.ssh/authorized_keys</strong></p>
</blockquote>

<p>다음의 명령을 이용해서 <code class="highlighter-rouge">각 서버에서 다른 서버</code>로 SSH Connection을 설정합니다. 
정상적으로 Connection이 설정되면 패스워드 없이 ssh 호출이 정상적으로 이루어집니다.</p>

<blockquote>
  <p><strong>ssh datanode01 date</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">방화벽 설정(방화벽 shutdown)</strong></p>

<p>CentOS의 경우 OS를 처음 설치했을 때 기본 포트를 제외한 모든 포트를 방화벽에서 막고 있습니다.</p>

<p>Hadoop은 내부 데몬(NameNode, SecondaryNameNode, DataNode, JobTracker, TaskTracker)간에 통신을 위해 
다양한 포트를 사용합니다. 만약 Hadoop이 사용하는 포트가 막혀 있다면, Hadoop은 구동했더라도 
HDFS 파일 제어나 MapReduce Job이 정상적으로 실행되지 않게 됩니다.</p>

<p>이러한 현상을 피하기 위해서는 사용되는 Hadoop의 포트를 열어줘야 합니다.
(이 부분은 Hadoop의 공식문서를 참조합니다.)</p>

<p>포트를 하나하나 일일이 변경하고 열어주는 일은 상당히 번거로운 작업이고 대부분은 Hadoop이 
사내 내부망으로만 설치가 되어 있기 때문에 다음과 같이 방화벽을 내려주시는 게 가장 간단한 방법입니다.</p>

<blockquote>
  <p><strong>systemctl stop firewalld</strong></p>
</blockquote>

<blockquote>
  <p><strong>systemctl disable firewalld</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">Hadoop 다운로드 및 설치</strong></p>

<p>Apache site에서 Hadoop 2.9.2 버전을 
<a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.9.2/hadoop-2.9.2.tar.gz" target="_blank">다운로드</a> 합니다.</p>

<p>다운로드 한 binary 압축 파일을 CentOS로 가져옵니다. 이 부분은 <code class="highlighter-rouge">namenode</code>에서만 작업합니다.</p>

<blockquote>
  <p><strong>tar xvf hadoop-2.9.2.tar.gz</strong></p>
</blockquote>

<blockquote>
  <p><strong>mv hadoop-2.9.2 /usr/local/hadoop</strong></p>
</blockquote>

<p>Hadoop에서 사용할 디렉토리를 생성합니다. 디렉토리 생성은 모든 서버에서 수행해야 합니다.</p>

<blockquote>
  <p><strong>mkdir -p /home/hadoop/hdfs/data</strong></p>
</blockquote>

<blockquote>
  <p><strong>mkdir -p /home/hadoop/hdfs/temp</strong></p>
</blockquote>

<blockquote>
  <p><strong>mkdir -p /home/hadoop/hdfs/name</strong></p>
</blockquote>

<p>이제 Hadoop의 환경설정을 진행합니다. 이 환경설정은 namenode에서만 진행하고 설정이 다 끝나면 다른 서버로
배포하게 됩니다.</p>

<p>Hadoop의 환경설정 파일은 <code class="highlighter-rouge">/usr/local/hadoop/etc/hadoop/</code> 안에 위치하고 있습니다.</p>

<p>설정이 끝난 환경설정파일은 <a href="/assets/downloads/hadoop_config.tar.gz" target="_blank">여기</a>에서 다운로드 받을 수 있습니다.</p>

<p><code class="highlighter-rouge">hadoop-env.sh</code> 파일을 vi로 열어서 <code class="highlighter-rouge">JAVA_HOME</code>에 대한 환경변수를 우리 환경에 맞게 수정합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-hadoop-env.sh.png" alt="hadoop-env.sh 설정" /></p>

<p><code class="highlighter-rouge">hadoop-env.sh</code> 파일의 상단에 다음 내용을 추가하여 아래 그림과 같이 환경변수를 설정합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">HADOOP_HOME_WARN_SUPPRESS</span><span class="o">=</span>1
<span class="nb">export </span><span class="nv">HADOOP_HOME</span><span class="o">=</span>/usr/local/hadoop
<span class="nb">export </span><span class="nv">HADOOP_MAPRED_HOME</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>
<span class="nb">export </span><span class="nv">HADOOP_COMMON_HOME</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>
<span class="nb">export </span><span class="nv">HADOOP_HDFS_HOME</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>
<span class="nb">export </span><span class="nv">YARN_HOME</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>
<span class="nb">export </span><span class="nv">HADOOP_CONF_DIR</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>/etc/hadoop
<span class="nb">export </span><span class="nv">YARN_CONF_DIR</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>/etc/hadoop
</code></pre></div></div>

<p><img src="../../assets/built/images/iot-hadoop-hadoop-env.sh-new.png" alt="hadoop-env.sh 환경변수 설정" /></p>

<p><code class="highlighter-rouge">yarn-env.sh</code> 파일의 상단에도 다음 내용을 추가합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">HADOOP_HOME</span><span class="o">=</span>/usr/local/hadoop
<span class="nb">export </span><span class="nv">HADOOP_MAPRED_HOME</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>
<span class="nb">export </span><span class="nv">HADOOP_COMMON_HOME</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>
<span class="nb">export </span><span class="nv">HADOOP_HDFS_HOME</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>
<span class="nb">export </span><span class="nv">YARN_HOME</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>
<span class="nb">export </span><span class="nv">HADOOP_CONF_DIR</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>/etc/hadoop
<span class="nb">export </span><span class="nv">YARN_CONF_DIR</span><span class="o">=</span><span class="nv">$HADOOP_HOME</span>/etc/hadoop
</code></pre></div></div>

<p><code class="highlighter-rouge">masters</code> 파일이 존재하지 않는데 vi로 만들어서 secondary namenode를 지정해줍니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>datanode01
</code></pre></div></div>

<p><code class="highlighter-rouge">slaves</code> 파일을 vi로 열어서 기존 내용을 삭제하고 datanode 들의 서버를 지정해줍니다.
다음의 내용을 입력합니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>datanode01
datanode02
datanode03
</code></pre></div></div>

<p><code class="highlighter-rouge">core-site.xml</code> 파일을 열어 property 내용을 적어줍니다.(hive사용을 위한 설정도 들어가 있습니다.)</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>fs.defaultFS<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>hdfs://namenode:9000<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hadoop.tmp.dir<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>/home/hadoop/hdfs/temp<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hadoop.proxyuser.hive.hosts<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>*<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hadoop.proxyuser.hive.groups<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>*<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hadoop.proxyuser.root.hosts<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>*<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hadoop.proxyuser.root.groups<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>*<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">hdfs-site.xml</code> 파일을 열어 다음과 같이 수정합니다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>dfs.replication<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>3<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>dfs.namenode.name.dir<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>/home/hadoop/hdfs/name<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>dfs.datanode.name.dir<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>/home/hadoop/hdfs/data<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>dfs.webhdfs.enabled<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>dfs.namenode.http.address<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>namenode:50070<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>dfs.secondary.http.address<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>datanode01:50090<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">mapred-site.xml</code> 파일을 수정합니다. 기본적으로는 mapred-site.xml 파일은 없습니다. 
mapred-site.xml.template을 복사하여 만든 후 수정합니다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>mapreduce.framework.name<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>yarn<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>mapred.job.tracker<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>namenode:54311<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">yarn-site.xml</code> 파일을 수정합니다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>mapreduce_shuffle<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>yarn.resourcemanager.hostname<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>namenode<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>yarn.resoucemanager.resource-tracker.address<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>namenode:8025<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>yarn.resourcemanager.scheduler.address<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>namenode:8030<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>yarn.resourcemanager.address<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>namenode:8040<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<p>파일 수정이 끝났으면 Slave 들에게 설정된 Hadoop을 배포합니다.</p>

<blockquote>
  <p><strong>cd /usr/local</strong></p>
</blockquote>

<blockquote>
  <p><strong>scp -r hadoop root@datanode01:/usr/local</strong></p>
</blockquote>

<blockquote>
  <p><strong>scp -r hadoop root@datanode02:/usr/local</strong></p>
</blockquote>

<blockquote>
  <p><strong>scp -r hadoop root@datanode03:/usr/local</strong></p>
</blockquote>

<p><code class="highlighter-rouge">/etc/profile</code> 파일을 각 Slave 들에게 배포합니다.</p>

<blockquote>
  <p><strong>scp /etc/profile root@datanode01:/etc/profile</strong></p>
</blockquote>

<blockquote>
  <p><strong>scp /etc/profile root@datanode02:/etc/profile</strong></p>
</blockquote>

<blockquote>
  <p><strong>scp /etc/profile root@datanode03:/etc/profile</strong></p>
</blockquote>

<p>복사가 모두 끝나면 각 서버에서 Java와 Hadoop이 정상적으로 동작하는지 확인합니다.</p>

<blockquote>
  <p><strong>java -version</strong></p>
</blockquote>

<blockquote>
  <p><strong>hadoop version</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">Hadoop 실행</strong></p>

<p>환경 설정 및 설치가 완료되었으니 이제 hadoop 서버를 실행합니다. 우선 실행전에 포맷을 진행합니다.
이 작업은 <code class="highlighter-rouge">namenode</code>에서만 진행합니다.</p>

<blockquote>
  <p><strong>hadoop namenode -format</strong></p>
</blockquote>

<p>포맷이 끝났으면 <code class="highlighter-rouge">~$HADOOP_HOME/sbin/start-all.sh</code> 으로 실행합니다. (중지는 <code class="highlighter-rouge">stop-all.sh</code>)</p>

<p><code class="highlighter-rouge">namenode</code>에서만 실행 하면 <code class="highlighter-rouge">slaves</code>에 등록되어 있는 모든 datanode의 데몬들도 namenode에서 
구동시키므로 구동 후 각 서버에서 jps로 데몬 구동을 확인 하면 됩니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-start-all.sh.png" alt="hadoop 실헹" /></p>

<p>정상적으로 실행되었는지 확인하기 위해 각 서버에서 <code class="highlighter-rouge">jps</code>(JVM 위에서 돌아가는 프로세스 확인) 명령을 수행합니다.</p>

<blockquote>
  <p><strong>jps</strong></p>
</blockquote>

<p>master에는 <code class="highlighter-rouge">ResourceManager</code>가 구동 되어야 하고 slave들에는 <code class="highlighter-rouge">NodeManager</code>가 구동 되어야 클러스터가 정상 동작합니다.</p>

<p>다음의 URL을 이용하면 HDFS를 확인할 수 있습니다. Live Nodes : 3 ( 3개의 slave 존재 확인 )</p>

<blockquote>
  <p><strong>localhost:50070</strong></p>
</blockquote>

<p><img src="../../assets/built/images/iot-hadoop-status.png" alt="hadoop 실헹상태 확인" /></p>

<p>간단한 명령어를 이용해 파일 시스템을 다룰 수 있습니다.</p>

<ul>
  <li>디렉토리 생성</li>
</ul>

<blockquote>
  <p><strong>hadoop fs -mkdir /test</strong></p>
</blockquote>

<ul>
  <li>파일 업로드</li>
</ul>

<blockquote>
  <p><strong>hadoop fs -put (업로드 할 파일)  (타겟 디렉토리)</strong></p>
</blockquote>

<ul>
  <li>디렉토리 리스트 출력</li>
</ul>

<blockquote>
  <p><strong>hadoop fs -ls (타겟 디렉토리)</strong></p>
</blockquote>

<p>참고로 Hadoop이 비정상 종료 시 <code class="highlighter-rouge">safe</code> 모드로 전환되는데 이 경우 에러가 발생합니다.
이런 경우 다음의 명령을 이용해서 Safe mode를 OFF해야 합니다.</p>

<blockquote>
  <p><strong>hdfs dfsadmin -safemode leave</strong></p>
</blockquote>

<p>현재 모드가 Safe 모드인지 확인 하는 방법은 다음의 명령을 이용하면 됩니다.</p>

<blockquote>
  <p><strong>hdfs dfsadmin -safemode get</strong></p>
</blockquote>

<p>마지막으로 파일시스템을 검사할 수 있는데 다음의 명령을 이용하면 됩니다.</p>

<blockquote>
  <p><strong>hdfs fsck /</strong></p>
</blockquote>

<hr />

<p><strong class="subtitle_fontAwesome">Hadoop Example</strong></p>

<p><strong class="subtitle2_fontAwesome">Hadoop File 처리</strong></p>

<p>가장 기본적인 예제인 <code class="highlighter-rouge">File Read Write</code>를 통해서 Hadoop 사용법을 알아보겠습니다.</p>

<p>기본적으로 Hadoop 프로그래밍은 Maven 빌드를 사용하는데 이번에는 Maven을 사용하지 않고 직접 jar file을 다운로드 받아서
처리하겠습니다. 필요한 jar파일은 <code class="highlighter-rouge">hadoop-core jar</code>파일입니다. 다운받기 위해서는 <code class="highlighter-rouge">Maven Repository</code>에 가야합니다.</p>

<p>Maven Repository에 가서 검색창에 <code class="highlighter-rouge">hadoop core</code>를 입력하고 검색하면 <code class="highlighter-rouge">hadoop-core-1.2.1.jar</code> 파일을 다운로드 받을 수 있습니다.
이 파일을 우리 Eclipse project의 적당한 곳에 복사한 후 Build Path 설정에서 라이브러리로 등록합니다.</p>

<p>다음의 코드를 작성합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exam01_SimpleFileReadWrite</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Usage : Exam01_SimpleFileReadWrite &lt;filename&gt; &lt;contents&gt;"</span><span class="o">);</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
            <span class="c1">// Configuration class는 Hadoop의 설정값을 가져온다. </span>
            <span class="c1">// Hadoop xml 설정값들을 확인.</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">FileSystem</span> <span class="n">hdfs</span> <span class="o">=</span> <span class="n">FileSystem</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
                <span class="c1">// FileSystem은 Hadoop의 FileSystem. </span>
                <span class="c1">// Hadoop의 설정값을 보고 파일시스템을 가져온다.</span>
                <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">hdfs</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">hdfs</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">path</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="c1">// 파일 시스템을 가져온후 출력 스트림을 열어서 args[0]이름으로 파일을 생성한다. </span>
                <span class="c1">// 그후 args[1]을 파일 내용으로 저장한다.</span>
                <span class="c1">// 그 후 다시 입력 스트림을 열어서 HDFS에서 해당 파일을 가져온 후 그 내용을 출력.</span>
                <span class="n">FSDataOutputStream</span> <span class="n">outStream</span> <span class="o">=</span> <span class="n">hdfs</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
                <span class="n">outStream</span><span class="o">.</span><span class="na">writeUTF</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
                <span class="n">outStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    
                <span class="n">FSDataInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">hdfs</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
                <span class="n">String</span> <span class="n">inputString</span> <span class="o">=</span> <span class="n">inputStream</span><span class="o">.</span><span class="na">readUTF</span><span class="o">();</span>
                <span class="n">inputStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"읽은 내용 : "</span> <span class="o">+</span> <span class="n">inputString</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이제 우리 Project를 <code class="highlighter-rouge">jar</code> 파일로 export 시킵니다. 해당 jar파일을 <code class="highlighter-rouge">yarn</code>을 이용해서 실행하는 과정을 거쳐야 
합니다. <code class="highlighter-rouge">yarn</code>은 작업을 실행해주는 모듈입니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn (실행시킬 타입) (실행시킬 파일 이름) (실행시킬 클래스경로) [-옵션]
</code></pre></div></div>

<blockquote>
  <p><strong>yarn jar FileReadWriteExam.jar javaHadoop.Exam01_SimpleFileReadWrite test.txt HelloWorld</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">MapReduce</strong></p>

<p>이번에는 Hadoop의 데이터 처리 기술인 <code class="highlighter-rouge">MapReduce</code>에 대해서 알아보겠습니다. 사실 MapReduce개념은 Hadoop의 고유개념은
아니고 데이터 처리 솔루션들은 대부분 가지고 있는 기술입니다.</p>

<p>MapReduce는 <code class="highlighter-rouge">Map</code>과 <code class="highlighter-rouge">Reduce</code> 두 개의 기능으로 나뉘며 Map은 특정 데이터를 가져와서 Key와 Value의 쌍으로 만드는
일을 합니다. Reduce는 Map에서 묶은 Key와 Value을 이용해서 내가 필요한 정보로 다시 Key와 Value의 쌍으로
데이터를 조작하는 것을 의미합니다.</p>

<p>여기서는 <code class="highlighter-rouge">WordCount</code>라는 아주 유명한 입문 예제를 가지고 MapReduce를 이해해 보도록 하겠습니다.</p>

<p>MapReduce작업을 위해서는 반드시 3가지의 클래스가 필요합니다. 이는 각각 <code class="highlighter-rouge">Mapper</code>와 <code class="highlighter-rouge">Reducer</code> 그리고 <code class="highlighter-rouge">Driver</code>입니다.
Driver는 자바의 entry point인 main method가 포함된 class를 지칭합니다.</p>

<p>먼저 Mapper class를 살펴보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">WordCountMapper</span> <span class="kd">extends</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="kd">private</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">value</span><span class="o">,</span> 
    		<span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;.</span><span class="na">Context</span> <span class="n">context</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
        <span class="n">StringTokenizer</span> <span class="n">itr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Mapper class는 4개의 인자를 받습니다.</p>

<p>MapReduce에서의 인자는 일반 long형이나 int형, String형을 쓰지 않습니다. 대신 
long이나 int형은 각각 <code class="highlighter-rouge">LongWritable</code>, <code class="highlighter-rouge">IntWritable</code>이라는 Hadoop 전용 자료형을 사용합니다.
그리고 String은 <code class="highlighter-rouge">Text</code>로 사용합니다.</p>

<p>Mapper class의 인자는 순서대로 Input Key, Input Value, Output Key, Output Value를 의미합니다.
Input으로 들어오는것 역시 Key와 Value쌍이고 Output 역시 Key와 Value쌍 입니다.</p>

<p>일반적으로 Input의 경우 Key는 <code class="highlighter-rouge">LongWritable</code>이고 Value는 <code class="highlighter-rouge">Text</code>로 고정되는 경향이 있습니다.
원래 Input에는 Key값이 있을리가 없습니다. 그런데 값이 들어올때 Hadoop은 개행 단위로 끊어서 값을 받아오고 
그 순서대로 번호를 매기게 됩니다. 그리고 그 번호의 값이 Key가 됩니다. 
따라서 Key값은 숫자가 되고 빅데이터 처리에서 데이터량이 많을 수 있으므로 LongWritable로 사용하는 
것입니다. 받는 값을 Text로 하는 이유는 가공의 편의성 때문입니다.</p>

<p>따라서 Input의 경우 Key는 LongWritable이되고 Value는 Text가 됩니다.</p>

<p>반면에 Output의 경우는 Key와 Value는 임의로 지정할 수 있습니다.위의 예제에서는 
StringTokenizer로 공백단위로 들어온 텍스트를 끊어내고 그 값을 Output Key로 정하고 
그 Value는 1로 고정해서 출력합니다.</p>

<p>Reducer로 Key,Value 쌍을 보내는 작업은 <code class="highlighter-rouge">context.write</code>이 담당합니다.</p>

<p>정리하자면, <code class="highlighter-rouge">&lt;들어온순서, 라인단위 텍스트&gt;</code>로 Input값이 들어오게 되고 반대로 
Output은 <code class="highlighter-rouge">&lt;끊은 단어,1&gt;</code>값을 출력하게 됩니다.</p>

<p>이번에는 Reducer class를 살펴보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">WordCountReducer</span> <span class="kd">extends</span> <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">IntWritable</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">key</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span>
                          <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;.</span><span class="na">Context</span> <span class="n">context</span><span class="o">)</span> 
                            <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">IntWritable</span> <span class="n">val</span> <span class="o">:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sum</span> <span class="o">+=</span> <span class="n">val</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">result</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
        <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Reduce 작업은 사실 Map 로직과 거의 동일합니다. Reducer는 Mapper의 Output을 가지고 작업을 하게 되며
Reducer도 총 4개의 인자를 가지는데 Mapper와 동일합니다. 즉, Input Key, Input Value, Output Key, Output Value 입니다.
당연히 Mapper의 Output 인자와 Reducer의 Input 인자는 같아야합니다.</p>

<p>한가지 특이한점은 Reducer의 Value는 Mapper와는 다르게 복수형으로 일종의 컬렉션을 받게된다는 것입니다. 
그 이유는 Key에 중복이 존재할 수 있기 때문입니다.</p>

<p>Reducer 작업이 Mapper와 다른점이 있다면 MApper는 순서대로 값을 받으므로 Input Key는 중복될 수 없습니다.
그러나 Reducer는 Mapper의 Output을 받게되는데 Mapper의 Output Key는 중복이 안된다는 제약은 없습니다.
따라서 Reducer의 Input Key는 중복될 수 있습니다.</p>

<p>Reducer의 실질적은 역활은 <code class="highlighter-rouge">중복된 키들을 어떻게 처리하느냐</code> 입니다.
Mapper는 의미가 같다고 생각되는 데이터를 같은 Key로 만들어서 출력합니다. 그러면 
Reducer에서는 그 동일한 Key를 묶어서 처리를 한다고 보면 됩니다.</p>

<p>위의 예제에서 Value들은 모두 1로 고정되어있습니다. 같은 Key의 경우에 계속해서 더하게 됩니다. 
즉, 들어가는 데이터에 hello라는 단어가 10개가 들어왔다고 가정해 보면 &lt;hello,1&gt;이라는 Output이 
Mapper에 의해 생성될 것이고 Reducer에서는 저 hello라는 Key가 10개가 있으므로 10번 for문을 돌면서 
합을 계산해 10이라는 값을 계산하게 됩니다.</p>

<p>마지막으로 Driver class를 살펴보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exam02_WordCountMapReduce</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>

        <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Usage: Exam02_WordCountMapReduce &lt;input&gt; &lt;output&gt;"</span><span class="o">);</span>
            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
            <span class="o">;</span>
        <span class="o">}</span>
        <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="s">"WordCount"</span><span class="o">);</span>
        <span class="n">job</span><span class="o">.</span><span class="na">setJarByClass</span><span class="o">(</span><span class="n">Exam02_WordCountMapReduce</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">WordCountMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">job</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">WordCountReducer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="n">job</span><span class="o">.</span><span class="na">setInputFormatClass</span><span class="o">(</span><span class="n">TextInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">job</span><span class="o">.</span><span class="na">setOutputFormatClass</span><span class="o">(</span><span class="n">TextOutputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="n">job</span><span class="o">.</span><span class="na">setOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">job</span><span class="o">.</span><span class="na">setOutputValueClass</span><span class="o">(</span><span class="n">IntWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="n">FileInputFormat</span><span class="o">.</span><span class="na">addInputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
        <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
        <span class="n">job</span><span class="o">.</span><span class="na">waitForCompletion</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>	
<span class="o">}</span>
</code></pre></div></div>

<p>Driver로 Mapper와 Reducer를 등록하고 실행하면 됩니다.</p>

<p>이제 실행을 하기 위해서 샘플로 사용할 입력 파일을 하나 생성합니다. (wow_wordcount.txt)</p>

<p>생성한 txt 파일을 Hadoop 파일 시스템에 저장합니다.</p>

<blockquote>
  <p><strong>hdfs dfs -put wow_wordcount.txt</strong></p>
</blockquote>

<p>다음의 명령을 이용해서 파일 시스템에 정상적으로 저장되었는지를 확인합니다.</p>

<blockquote>
  <p><strong>hdfs dfs -ls</strong></p>
</blockquote>

<p>작성된 프로그램(Java Project)을 jar파일로 생성한 후 yarn으로 실행시킵니다.
output 결과는 텍스트가 아니라 폴더로 나오기에 확장자를 붙혀줄 필요는 없습니다.</p>

<blockquote>
  <p><strong>yarn jar wordCounterExam.jar javaHadoop.Exam02_WordCountMapReduce wow_wordcount.txt output</strong></p>
</blockquote>

<blockquote>
  <p><strong>hdfs dfs -ls output</strong></p>
</blockquote>

<p>output 디렉토리 안에 파일은 <code class="highlighter-rouge">part-r-00000</code>로 저장됩니다. 이 파일은 텍스트 파일이므로 cat으로 읽을 수 있습니다.
다음의 명령을 이용하여 결과를 확인합니다.</p>

<blockquote>
  <p><strong>hdfs dfs -cat output/part-r-00000</strong></p>
</blockquote>

<hr />

<p><strong class="subtitle_fontAwesome">Hive 설치 및 활용</strong></p>

<p>현재 서비스 로그 및 사용자 생성 데이터는 점점 크고 빠르게 늘어나고 있습니다. 
우리가 설치한 Hadoop은 이런 매우 큰 데이터를 저장하고 처리하기 적합한 가장 인기 있는 오픈 소스입니다.</p>

<p>하지만 데이터 분석을 위해 <code class="highlighter-rouge">MapReduce</code>를 직접 구현하기에는 코드가 매우 어려운 형태이며, 
따라서 시스템을 구현하기 위해서는 그만한 개발 능력이 되는 개발자가 있어야 하는 등 실제 시스템을 도입해서 사용하는데는
어려움도 있는게 사실입니다.</p>

<p>그런 이유로 <code class="highlighter-rouge">MapReduce</code> 처리를 쉽게 해주기 위한 대안으로 <code class="highlighter-rouge">Hive</code>를 사용합니다. (다른 framework도 존재합니다.) 
Hive는 <code class="highlighter-rouge">RDB</code>의 SQL문을 작성해 본 개발자라면 상당히 익숙한 형태로 데이터 분석 작업을 진행할 수 있습니다.</p>

<p>정리하자면, <code class="highlighter-rouge">Hive</code>는 Hadoop 상의 오픈소스 <code class="highlighter-rouge">Data Warehouse</code> 솔루션입니다.
DW(Data Warehouse)는 리포팅 및 분석을 위한 Database라고 생각하면 됩니다.</p>

<p>간단하게 Hive의 동작방법에 대해 알아보면 다음과 같습니다.</p>

<p>Hive는 Hadoop상에서 동작합니다. 당연히 데이터 또한 HDFS에 저장되어 있습니다.
Hive는 메타스토어(<code class="highlighter-rouge">Metastore</code>)라는 저장소를 만들어 Hadoop에서 처리된 메타데이터의 구조를 메타스토어에 저장합니다.
하이브는 Oracle, MySQL 등 JDBC를 지원하는 모든 데이터베이스를 이용해 메타스토어를 구축할 수 있습니다.
디폴트로 <code class="highlighter-rouge">Apache Derby</code>를 사용하지만, 일반적으로 MySQL이나 Postgres를 많이 사용합니다.</p>

<p><img src="../../assets/built/images/hive-hadoop-hive-architecture.png" alt="Hadoop Hive 구조" /></p>

<ol>
  <li>사용자가 제출한 SQL문을 <code class="highlighter-rouge">Driver</code>가 Compiler에 요청하여 MetaStore의 정보를 이용해 처리에 적합한 형태로 컴파일</li>
  <li>컴파일된 SQL을 실행엔진으로 실행</li>
  <li>리소스 매니저가 클러스터의 자원을 적절히 활용하여 실행</li>
  <li>실행 중 사용하는 원천데이터는 HDFS등의 저장장치를 이용</li>
  <li>실행결과를 사용자에게 반환</li>
</ol>

<p><strong class="subtitle2_fontAwesome">MySQL 설치</strong></p>

<p>MySQL은 Hadoop namenode에 설치하겠습니다.</p>

<p>먼저 wget을 이용해서 MySQL을 설치합니다.</p>

<blockquote>
  <p><strong>wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</strong></p>
</blockquote>

<blockquote>
  <p><strong>rpm -ivh mysql-community-release-el7-5.noarch.rpm</strong></p>
</blockquote>

<blockquote>
  <p><strong>yum install mysql-server</strong></p>
</blockquote>

<blockquote>
  <p><strong>systemctl start mysqld</strong></p>
</blockquote>

<blockquote>
  <p><strong>systemctl enable mysqld</strong></p>
</blockquote>

<blockquote>
  <p><strong>systemctl status mysqld</strong></p>
</blockquote>

<p><code class="highlighter-rouge">mysql_secure_installation</code> 명령으로 기본적인 보안 설정을 합니다. 몇가지 설정을 수행합니다.</p>

<p><code class="highlighter-rouge">root</code> 권한으로 mysql console에 진입합니다.</p>

<blockquote>
  <p><strong>mysql -u root -p</strong></p>
</blockquote>

<p>일단 mysql 버전부터 확인하고 진행하겠습니다.</p>

<blockquote>
  <p><strong>SHOW VARIABLES LIKE “%version%”;</strong></p>
</blockquote>

<p><img src="../../assets/built/images/iot-hadoop-mysql-version.png" alt="MySQL Version 확인" /></p>

<p>이제 사용자 계정을 생성합니다.</p>

<blockquote>
  <p><strong>CREATE USER hive IDENTIFIED BY “hive”;</strong></p>
</blockquote>

<blockquote>
  <p><strong>CREATE USER hive@localhost IDENTIFIED BY “hive”;</strong></p>
</blockquote>

<p>이제 사용할 database를 만들고 hive 계정에 해당 database의 권한을 부여합니다.</p>

<blockquote>
  <p><strong>CREATE DATABASE hivedb;</strong></p>
</blockquote>

<blockquote>
  <p><strong>GRANT ALL PRIVILEGES ON hivedb.* TO hive;</strong></p>
</blockquote>

<blockquote>
  <p><strong>GRANT ALL PRIVILEGES ON hivedb.* TO hive@localhost;</strong></p>
</blockquote>

<p>설정된 권한을 바로 적용하고 mysql console을 종료합니다.</p>

<blockquote>
  <p><strong>FLUSH PRIVILEGES;</strong></p>
</blockquote>

<blockquote>
  <p><strong>EXIT</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">참고 : MySQL 삭제</strong></p>

<p>기존 설치되어 있는 MySQL 패키지를 제거하려면 다음과 같은 명령을 사용해야 합니다.</p>

<blockquote>
  <p><strong>yum remove mysql mysql-server</strong></p>
</blockquote>

<p>패키지를 삭제한 후 남아있는 MySQL 디렉토리를 삭제합니다.</p>

<blockquote>
  <p><strong>rm -rf /var/lib/mysql</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">HIVE 설치</strong></p>

<p><code class="highlighter-rouge">http://hive.apache.org</code>에서 2.3.7 버젼을 다운로드 받아 압축을 풀어줍니다.</p>

<blockquote>
  <p><strong>wget http://apache.mirror.cdnetworks.com/hive/hive-2.3.7/apache-hive-2.3.7-bin.tar.gz</strong></p>
</blockquote>

<blockquote>
  <p><strong>tar -zxvf apache-hive-2.3.7-bin.tar.gz</strong></p>
</blockquote>

<blockquote>
  <p><strong>mv apache-hive-2.3.7-bin /usr/local/hive</strong></p>
</blockquote>

<p><code class="highlighter-rouge">/etc/profile</code>을 vi로 열어서 아래의 내용을 추가합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">HIVE_HOME</span><span class="o">=</span>/usr/local/hive
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HIVE_HOME</span>/bin:<span class="nv">$PATH</span>
</code></pre></div></div>

<p>위에서 설치한 MySQL과 연동하기 위해서 MySQL JDBC Connector를 설치합니다.</p>

<blockquote>
  <p><strong>wget http://www.java2s.com/Code/JarDownload/mysql/mysql-connector-java-commercial-5.1.7-bin.jar.zip</strong></p>
</blockquote>

<blockquote>
  <p><strong>unzip mysql-connector-java-commercial-5.1.7-bin.jar.zip</strong></p>
</blockquote>

<blockquote>
  <p><strong>cp mysql-connector-java-commercial-5.1.7-bin.jar  $HIVE_HOME/lib/</strong></p>
</blockquote>

<p>다음은 사용할 HDFS 디렉토리를 생성해야 합니다. 다음의 명령을 이용하여 HDFS 디렉토리를 생성합니다. 당연히 Hadoop이 
실행되고 있는 상황이어야 합니다.</p>

<blockquote>
  <p><strong>hadoop fs -mkdir /tmp</strong></p>
</blockquote>

<blockquote>
  <p><strong>hadoop fs -mkdir -p /user/hive/warehouse</strong></p>
</blockquote>

<blockquote>
  <p><strong>hadoop fs -chmod g+w /tmp</strong></p>
</blockquote>

<blockquote>
  <p><strong>hadoop fs -chmod g+w /user/hive/warehouse</strong></p>
</blockquote>

<p>$HIVE_HOME/conf안의 hive-env.sh.template를 hive-env.sh로 복사한 후에 HADOOP_HOME을 아래와 같이 수정합니다.</p>

<blockquote>
  <p><strong>mv $HIVE_HOME/conf/hive-env.sh.template $HIVE_HOME/conf/hive-env.sh</strong></p>
</blockquote>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">HADOOP_HOME</span><span class="o">=</span>/usr/local/hadoop
</code></pre></div></div>

<p>$HIVE_HOME/conf안에 hive-site.xml 파일을 생성하여 생성된 내용을 입력합니다.
<code class="highlighter-rouge">UserName</code>과 <code class="highlighter-rouge">Password</code>는 MySQL에서 사용하게될 UserName과 Password입니다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span>
<span class="cp">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span>
<span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.metastore.local<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.metastore.warehouse.dir<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>hdfs://namenode:9000/user/hive/warehouse<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>javax.jdo.option.ConnectionURL<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>jdbc:mysql://localhost:3306/hivedb?createDatabaseIfNotExist=true<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>javax.jdo.option.ConnectionUserName<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>hive<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>javax.jdo.option.ConnectionPassword<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>hive<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.metastore.schema.verification<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.server2.thrift.port<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>10000<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;description&gt;</span>TCP port number to listen on, default 10000<span class="nt">&lt;/description&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.server2.enable.doAs<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.server2.authentication<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>NONE<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.metastore.sasl.enabled<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;description&gt;</span>If true, the metastore Thrift interface will be secured with SASL.
                        Clients must authenticate with Kerberos.<span class="nt">&lt;/description&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.server2.enable.impersonation<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;description&gt;</span>Enable user impersonation for HiveServer2<span class="nt">&lt;/description&gt;</span>
                <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.server2.thrift.bind.host<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>192.168.64.128<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.support.concurrency<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.enforce.bucketing<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.exec.dynamic.partition.mode<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>nonstrict<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.txn.manager<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>org.apache.hadoop.hive.ql.lockmgr.DbTxnManager<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.compactor.initiator.on<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property&gt;</span>
                <span class="nt">&lt;name&gt;</span>hive.compactor.worker.threads<span class="nt">&lt;/name&gt;</span>
                <span class="nt">&lt;value&gt;</span>2<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/configuration&gt;</span>
</code></pre></div></div>

<p><strong class="subtitle2_fontAwesome">HIVE 실행</strong></p>

<p>Hive 2.1부터는 초기화 단계로 아래의 코드를 실행해야 합니다.
실행한 뒤 <code class="highlighter-rouge">schemaTool completed</code>가 출력되면 됩니다.</p>

<blockquote>
  <p><strong>schematool -dbType mysql -initSchema</strong></p>
</blockquote>

<p><img src="../../assets/built/images/iot-hadoop-hive-init.png" alt="HIVE 초기화" /></p>

<p>초기화가 정상적으로 진행되면 <code class="highlighter-rouge">hive</code> 명령을 실행합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-hive-run.png" alt="HIVE 실행" /></p>

<p>정상적으로 동작하는지 확인하기 위해 Hive QL을 이용하여 Table을 생성하고 조회합니다.</p>

<blockquote>
  <p><strong>CREATE TABLE mytbl(seq INT, contents STRING);</strong></p>
</blockquote>

<blockquote>
  <p><strong>SELECT * FROM mysql</strong></p>
</blockquote>

<p><img src="../../assets/built/images/iot-hadoop-hive-create-table.png" alt="HIVE CREATE Table" /></p>

<p>MySQL Server에 접속해서 생성된 Table이 존재하는지 확인합니다.</p>

<blockquote>
  <p><strong>show databases;</strong></p>
</blockquote>

<blockquote>
  <p><strong>show tables;</strong></p>
</blockquote>

<blockquote>
  <p><strong>SELECT * FROM hivedb.TBLS;</strong></p>
</blockquote>

<p><strong class="subtitle2_fontAwesome">HIVE java 연동</strong></p>

<p>먼저 Host PC의 Eclipse에서 작성된 Java 프로그램이 VMware로 생성한 Hadoop01 가상머신에 내부 IP를 이용하여
접속이 가능하도록 VMware의 <code class="highlighter-rouge">Edit &gt; Virtual Network Editor</code>를 선택합니다.</p>

<p>설정을 바꾸기 위해 하단의 <code class="highlighter-rouge">change settings</code>를 클릭합니다.</p>

<p>아래의 그림과 같이 <code class="highlighter-rouge">VMnet8</code>을 선택한 후 <code class="highlighter-rouge">connect a host virtual adapter to this network</code> 체크박스를 체크합니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-hive-network.png" alt="네트워크 설정" /></p>

<p>Host PC의 네트워크 설정을 살펴보면 다음과 같이 표현됩니다.</p>

<p><img src="../../assets/built/images/iot-hadoop-hive-host-network.png" alt="네트워크 설정" /></p>

<p>자바 프로그램에서 Hive에 접근할 수 있게 Hive를 기동합니다.</p>

<blockquote>
  <p><strong>hiveserver2</strong></p>
</blockquote>

<p>Host PC의 Eclipse에서 Maven Project를 생성합니다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
  <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

  <span class="nt">&lt;groupId&gt;</span>test.bbb<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>SampleTest<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>

  <span class="nt">&lt;name&gt;</span>SampleTest<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;url&gt;</span>http://maven.apache.org<span class="nt">&lt;/url&gt;</span>

  <span class="nt">&lt;properties&gt;</span>
    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
  <span class="nt">&lt;/properties&gt;</span>

  <span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>3.8.1<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>org.apache.hive<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>hive-jdbc<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>0.12.0<span class="nt">&lt;/version&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>jdk.tools<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>jdk.tools<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>1.8.0_221<span class="nt">&lt;/version&gt;</span>	
            <span class="nt">&lt;scope&gt;</span>system<span class="nt">&lt;/scope&gt;</span>
            <span class="nt">&lt;systemPath&gt;</span>C:/Program Files/Java/jdk1.8.0_221/lib/tools.jar<span class="nt">&lt;/systemPath&gt;</span>	
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>                                                                                                                                       
    	<span class="nt">&lt;groupId&gt;</span>org.apache.hadoop<span class="nt">&lt;/groupId&gt;</span>                                                                                                           
    	<span class="nt">&lt;artifactId&gt;</span>hadoop-common<span class="nt">&lt;/artifactId&gt;</span>                                                                                                         
    	<span class="nt">&lt;version&gt;</span>3.2.0<span class="nt">&lt;/version&gt;</span>                                                                                            
	<span class="nt">&lt;/dependency&gt;</span>  
  <span class="nt">&lt;/dependencies&gt;</span>
<span class="nt">&lt;/project&gt;</span> 
</code></pre></div></div>

<p>일반적은 JDBC 코드를 작성합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
       
        <span class="k">try</span> <span class="o">{</span>           
            <span class="n">String</span> <span class="n">driver</span> <span class="o">=</span> <span class="s">"org.apache.hive.jdbc.HiveDriver"</span><span class="o">;</span>
            <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">driver</span><span class="o">);</span>
           
            <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"jdbc:hive2://192.168.64.128:10000/hivedb"</span><span class="o">;</span>
            <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="s">"hive"</span><span class="o">;</span>
            <span class="n">String</span> <span class="n">pw</span> <span class="o">=</span> <span class="s">"hive"</span><span class="o">;</span>
           
            <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">pw</span><span class="o">);</span>
           
            <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"SELECT count(*) FROM mytbl"</span><span class="o">;</span>
            <span class="n">Statement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
            <span class="n">rs</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
           
            <span class="k">while</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">()){</span>
                <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>                       
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="s">"결과 : "</span> <span class="o">+</span> <span class="n">col</span><span class="o">);</span>
            <span class="o">}</span>
           
            <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
           
        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">){</span>
            <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">try</span><span class="o">{</span>
                <span class="k">if</span><span class="o">(</span> <span class="n">rs</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">){</span>
                    <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>               
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span> <span class="n">conn</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">){</span>
                    <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>               
                <span class="o">}</span>                
            <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">){</span>
                <span class="n">rs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>End.</p>

<hr />

	  ]]></description>
	</item>

	<item>
	  <title>Gulp CSS Compile 문제 해결</title>
	  <link>http://localhost:4000/gulp-css-compile</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-03-03T19:00:00+09:00</pubDate>
	  <guid>http://localhost:4000/gulp-css-compile</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p>Jekyll에서 CSS를 수정한 후 적용하기 위해서 Gulp를 이용하는 방법에 대한 내용입니다.</p>

<hr />

<p>제 블로그를 예로 들어 설명하면 사용하는 CSS 파일은 <code class="highlighter-rouge">/assets/css</code> 폴더안에 위치해 있습니다. 
CSS 파일을 수정한 후 Gulp를 이용하여 compile을 해야 하는데 사용하는 gulpfile.js의 내용은 
다음과 같습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp'</span><span class="p">);</span>

<span class="c1">// gulp plugins and utils</span>
<span class="kd">var</span> <span class="nx">gutil</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-util'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">postcss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-postcss'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">sourcemaps</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-sourcemaps'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">imagemin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-imagemin'</span><span class="p">);</span>

<span class="c1">// postcss plugins</span>
<span class="kd">var</span> <span class="nx">autoprefixer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'autoprefixer'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">colorFunction</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'postcss-color-function'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">cssnano</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'cssnano'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">customProperties</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'postcss-custom-properties'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">easyimport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'postcss-easy-import'</span><span class="p">);</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'images'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">'assets/images/*'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">imagemin</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">'assets/built/images/'</span><span class="p">))</span>
<span class="p">});</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'css'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">processors</span> <span class="o">=</span> <span class="p">[</span>
        <span class="nx">easyimport</span><span class="p">,</span>
        <span class="nx">customProperties</span><span class="p">,</span>
        <span class="nx">colorFunction</span><span class="p">(),</span>
        <span class="nx">autoprefixer</span><span class="p">({</span><span class="na">browsers</span><span class="p">:</span> <span class="p">[</span><span class="s1">'last 2 versions'</span><span class="p">]}),</span>
        <span class="nx">cssnano</span><span class="p">()</span>
    <span class="p">];</span>

    <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">'assets/css/*.css'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">init</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">postcss</span><span class="p">(</span><span class="nx">processors</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">sourcemaps</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">'.'</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">'assets/built/'</span><span class="p">))</span>
<span class="p">});</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">nodejs</code>를 설치한 후 <code class="highlighter-rouge">npm</code>을 이용하여 필요한 module을 설치합니다. 여기서 주의할 점은 node의 버전이 12버전이면
js파일에서 오류가 발생할 수 있습니다. gulp의 버전과 node의 버전에 따라서 compile 오류가 발생할 여지가 있기
때문에 만약 오류가 발생하면 버전문제를 해결해야 합니다. (저의 경우는 nodejs 버전을 11버전으로 낮추어서 사용했습니다.)</p>

<p>compile이 성공하면 결과 파일은 <code class="highlighter-rouge">/assets/built</code> 폴더 하단에 CSS파일로 저장되게 됩니다.</p>

<p>End.</p>

<hr />

	  ]]></description>
	</item>

	<item>
	  <title>MySQL 5.7.2 Windows용 ZIP Archive 설치</title>
	  <link>http://localhost:4000/mysql-5.7-archive-setting</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-05T20:11:00+09:00</pubDate>
	  <guid>http://localhost:4000/mysql-5.7-archive-setting</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p>MySQL을 install하지 않고 ZIP Archive를 다운받고 압축 풀어서 사용하는 사용하는 방식에 대한 설명입니다. 
기존 5.6버전은 JSON에 대한 지원이 되지 않기 때문에 5.7버전을 대상으로 진행합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> MySQL 5.7.2 ZIP Archive Download</strong></p>

<p>MySQL을 다운로드 받기 위해 <a href="https://dev.mysql.com/downloads/mysql/" target="_blank">링크</a>를 눌러 이동합니다.</p>

<p>아래의 그림처럼 다운로드 링크가 보이게 되는데 이 중 Windows (x86, 64-bit), ZIP Archive으로 되어있는 것을 찾아 
다운로드 링크를 눌러 다운로드를 받습니다. 링크를 누르면 로그인하거나 회원가입하라는 화면이 나오는데 화면 하단에 보면
그냥 다운로드 할 수 있는 링크가 있습니다.</p>

<p><img src="../../assets/built/images/mysql-download.jpg" alt="mysql-download" /></p>

<p>다운로드가 끝나면 적절한 위치에 압축을 풀어줍니다. 저는 <code class="highlighter-rouge">D:/[Tools]/mysql</code> 이라는 폴더로 압축된 내용을 풀었습니다. 
해당 폴더 하단에 보면 기본적으로 다음과 같은 폴더와 파일들이 보이게 됩니다.</p>

<p><img src="../../assets/built/images/mysql-folder.png" alt="mysql-folder" /></p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> MySQL System Database 생성</strong></p>

<p>ZIP Archive 버전은 MySQL을 기동하기 위한 System Database가 제공되지 않기 때문에 기본 System Database부터 생성해야 합니다.</p>

<p><strong>먼저 mysql 폴더 하단에 <code class="highlighter-rouge">data</code>라는 폴더를 생성합니다.</strong></p>

<p>그런 다음 <strong>관리자 권한으로 command 창을 열고</strong> 다음의 명령을 실행합니다. 
명령을 실행시키는 폴더는 mysql하단의 bin folder에서 실행합니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysqld --initialize
</code></pre></div></div>

<p>약간의 시간이 지나면 <code class="highlighter-rouge">data</code> 폴더 하단에 필요한 파일들이 생성됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> root 계정 패스워드 변경</strong></p>

<p>root계정의 패스워드를 변경하는 부분입니다. 꼭 필요한건 아니지만 현재 root계정은 패스워드 없이 바로 사용할 수 있기 
때문에 보안상 설정하는게 좋습니다.</p>

<p>다음과 같이 <code class="highlighter-rouge">mysqld</code> 명령을 이용해 MySQL 서버를 기동시킵니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysqld --console --explicit_defaults_for_timestamp --skip-grant-tables
</code></pre></div></div>

<p>정상적으로 MySQL 서버가 기동되면 다음과 같은 화면을 보실 수 있습니다.</p>

<p><img src="../../assets/built/images/mysql-daemon-execute.png" alt="mysql-daemon-execute" /></p>

<p>이제 별도의 command창을 열고 다음의 명령을 입력해서 MySQL console에 진입합니다. 정상적으로 수행되면 <code class="highlighter-rouge">mysql&gt;</code> 프롬프트가
떨어지게 됩니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql -u root mysql
</code></pre></div></div>

<p>이제 다음의 SQL문을 이용해서 root 계정의 패스워드를 갱신합니다. 패스워드를 <code class="highlighter-rouge">root1234</code>로 변경한다면 다음과 같이 하시면 됩니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>update USER set authentication_string=password('root1234') where user='root';
</code></pre></div></div>

<p>변경이 정상적으로 수행되었으면 다음의 구문을 실행합니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flush privileges;
</code></pre></div></div>

<p>이제 마지막으로 다음과 같은 구문을 실행합니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alter user 'root'@'localhost' identified by 'root1234', 'root'@'localhost' password expire never;
</code></pre></div></div>

<p>이제 <code class="highlighter-rouge">exit</code>를 입력해 MySQL console을 빠져나옵니다. 그런다음 다음의 명령을 실행하면 root 계정의 패스워드를 입력하라고 합니다. 
아까 설정한 <code class="highlighter-rouge">root1234</code>를 입력하면 MySQL console에 정상적으로 진입할 수 있습니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql -u root -p
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> MySQL 서버 중지</strong></p>

<p>현재 동작중인 MySQL 서버를 중지시킬려면 command 창에서 다음과 같은 명령을 실행시키시면 됩니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysqladmin -u root -p shutdown
</code></pre></div></div>

<p>성공적으로 수행되면 실행되고 있던 MySQL 서버의 실행이 중지됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 새로운 사용자 생성 및 권한 부여</strong></p>

<p>이전까지 정상적으로 수행되었다면 현재 MySQL 서버는 기동이 중지되어 있을겁니다.</p>

<p>초기화 작업이 이미 진행되었기 때문에 이제 MySQL 서버를 기동시키기 위해서 다음과 같이 실행하시면 됩니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysqld
</code></pre></div></div>

<p>새로운 사용자 계정을 생성하기 위해 새로운 command 창을 열어서 root계정으로 MySQL console에 진입합니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql -u root -p
</code></pre></div></div>

<p>새로운 사용자를 생성합니다. 아이디는 <code class="highlighter-rouge">java</code>, 패스워드 <code class="highlighter-rouge">java</code>로 설정해서 생성하도록 하겠습니다. 아래의 두 문장을 
실행합니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create user java identified by 'java';
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create user java@localhost identified by 'java';
</code></pre></div></div>

<p>이제 데이터가 입력될 새로운 데이터베이스를 하나 생성 합니다. 다음의 명령을 이용해 <code class="highlighter-rouge">library</code>라는 이름의 데이터베이스를
생성하겠습니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create database library;
</code></pre></div></div>

<p><img src="../../assets/built/images/mysql-new-user.png" alt="mysql-new-user" /></p>

<p>새로 생성된 library database에 대한 모든 권한을 조금 전에 추가한 java 계정에게 부여하려면 다음과 같이 하시면 됩니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grant all privileges on library.* to java;
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grant all privileges on library.* to java@localhost;
</code></pre></div></div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> SQL Script 파일을 이용해 Database 구축</strong></p>

<p>만일 기존에 사용하던 Database에 대한 SQL Script 파일을 가지고 있다면 해당 파일을 이용해 간단하게 데이터베이스를
구축할 수 있습니다.</p>

<p>command 창을 열어서 다음과 같은 명령어로 Script를 실행시켜 데이터베이스를 구축할 수 있습니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql -u java -p library &lt; SQL_Script_File.sql
</code></pre></div></div>

<p>End.</p>

<hr />

	  ]]></description>
	</item>

	<item>
	  <title>Git과 GitHub의 간단 사용법</title>
	  <link>http://localhost:4000/git-github</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-02-02T23:21:00+09:00</pubDate>
	  <guid>http://localhost:4000/git-github</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p><code class="highlighter-rouge">Git</code>과 <code class="highlighter-rouge">GitHub</code>에 대한 간단한 설명입니다. 간단한 이론과 함께 실습을 통해 command 기반의 명령어로 
어떤일을 처리할 수 있는지를 알아보도록 하겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 누구나 한번쯤은 겪었던 일</strong></p>

<p><img src="../../assets/built/images/need-of-vcs.png" alt="need-of-vcs" /></p>

<p>위의 그림은 누구나 한번쯤 겪어봤을 만한 상황입니다. 파일을 계속 수정해 나가면서 이름을 바꾸어 저장하는 경우입니다.
그 당시야 최종 파일이 어떤것인지 알 수 있겠지만 시간이 흐르면 당연히 저 중 어떤 파일이 최종 Report파일인지 알 수
없게 됩니다.</p>

<p>아래의 그림은 조금 다른 경우입니다.</p>

<p><img src="../../assets/built/images/vcs-conflict.png" alt="vcs-conflict" /></p>
<div class="img-reference">( 이미지 출처 : http://slidedeck.io/cursor-education )</div>

<p>여러명이 공동으로 같은 파일을 작업할 때 파일 내용을 덮어쓰는 문제가 생길 수 있습니다. 다른 사람이 작업한 사항을
유실할 수 있다는 것이죠.</p>

<p>이와 같은 문제가 항시 빈번하게 발생하게되고 이를 해결하기 위해 나온 시스템이 바로 <code class="highlighter-rouge">VCS</code>( Version Control System )
입니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Version Control System ( VCS )</strong></p>

<p><code class="highlighter-rouge">VCS</code> 는 파일의 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템을 의미합니다. 이런 VCS는
다음과 같은 특징을 가지고 있습니다.</p>

<ul>
  <li>각 파일을 이전 상태로 되돌릴 수 있습니다.</li>
  <li>시간에 따라 수정 내용을 비교해 볼 수 있습니다.</li>
  <li>누가 문제를 일으켰는지 쉽게 추적할 수 있습니다.</li>
  <li>파일을 잘못 고쳤을 때 쉽게 복구할 수 있습니다.</li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Centralized Version Control System ( CVCS )</strong></p>

<p><code class="highlighter-rouge">CVCS</code>는 중앙집중식 버전 관리 시스템입니다. 우리가 예전에 사용했던 <code class="highlighter-rouge">CVS</code>나 <code class="highlighter-rouge">Subversion</code>같은 제품이 이 범주에 
들어갑니다.</p>

<p>파일을 관리하는 서버가 별도록 존재하고 클라이언트는 중앙 서버에서 파일을 받아서 사용하는 개념입니다. 그림으로
표현하면 다음과 같습니다.</p>

<p><img src="../../assets/built/images/centralized-version-control-system.png" alt="centralized-version-control-system" /></p>
<div class="img-reference">( 이미지 출처 : https://git-scm.com/ )</div>

<p>여기서 <code class="highlighter-rouge">Checkout</code>이라는 용어가 나오는데 나중에 우리가 살펴볼 Git의 Checkout과는 다른 
개념임에 유의하셔야 합니다.</p>

<p>이런 CVCS는 중앙서버에 문제가 발생하면 다른 사람과의 협업 자체가 불가능해지게 됩니다. 또한 중앙서버의 하드디스크에
문제가 발생하면 프로젝트의 모든 History를 잃어버리게 됩니다.</p>

<p>Backup서버를 운영하면 이런 문제점을 일시 해결할 순 있지만 본질적인 문제는 남아있게 됩니다. 
( 백업서버까지 날라간다면??? )</p>

<p>이런 문제점을 해결하기 위해 분산형 VCS가 등장하게 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Distributed Version Control System ( DVCS )</strong></p>

<p><code class="highlighter-rouge">DVCS</code>는 분산 버전 관리 시스템입니다. 우리가 알고 있는 <code class="highlighter-rouge">Git</code>이 대표적 제품입니다. 이 외에 다른 제품들도 있지만
Git만 알아도 됩니다.</p>

<p>이 방식은 <code class="highlighter-rouge">CVCS</code>처럼 클라이언트가 파일의 마지막 Snapshot을 Checkout하는 방식이 아닙니다. 클라이언트는 서버 저장소를
통째로 로컬에 복제해서 사용합니다. 즉, 그림으로 보면 다음과 같습니다.</p>

<p><img src="../../assets/built/images/distributed-version-control-system.png" alt="distributed-version-control-system" /></p>
<div class="img-reference">( 이미지 출처 : https://git-scm.com/ )</div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Git의 탄생</strong></p>

<p><code class="highlighter-rouge">Linux</code> kernel은 대규모의 open source project입니다. 이 project의 버전관리를 위해 초기에는
<code class="highlighter-rouge">BitKeeper</code>라는 상용 DVCS를 사용했었는데 2005년도에 이 BitKeeper의 무료사용이 제고되면서 <code class="highlighter-rouge">리누스 토발즈</code>의 주도로
Linux 개발 커뮤니티가 자체 VCS를 개발했는데 이게 바로 <code class="highlighter-rouge">Git</code>입니다.</p>

<p><code class="highlighter-rouge">Git</code>은 다음과 같은 특징을 가집니다.</p>

<ul>
  <li>단순한 구조에서 오는 빠른 속도</li>
  <li>완벽한 분산처리</li>
  <li>branch를 사용한 비선형적 개발 가능</li>
  <li>속도나 크기면에서 대형 Project에 적합</li>
</ul>

<p>Git의 데이터 저장 방식은 이 포스트의 범주를 넘어가니 그 부분은 제외하겠습니다. 실제 Git이 어떤 방식으로 데이터를 저장하는가에
대한 내용은 <a href="https://git-scm.com/book/en/v2/Getting-Started-Git-Basics" target="_blank">여기</a>를 클릭해 살펴보시면 
될 듯 합니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Git의 기본</strong></p>

<p><code class="highlighter-rouge">Git</code>은 파일을 3가지 상태로 관리합니다. <code class="highlighter-rouge">Committed</code>, <code class="highlighter-rouge">Modified</code>, <code class="highlighter-rouge">Staged</code>라고 불리는 3가지 상태로 파일을 관리하게 되는데
각각의 의미는 다음과 같습니다.</p>

<blockquote>
  <p>Git의 파일 상태</p>
  <ul>
    <li><code class="highlighter-rouge">Committed</code> : 파일을 수정한 후 해당 파일에 대해 <code class="highlighter-rouge">commit</code>명령을 실행해 파일을 
로컬 데이터베이스(로컬 <code class="highlighter-rouge">Repository</code>)에 안전하게 저장한 상태를 의미합니다.</li>
    <li><code class="highlighter-rouge">Modified</code> : 파일을 수정한 후 아직 로컬 데이터베이스에 commit하지 않은 상태를 의미합니다.</li>
    <li><code class="highlighter-rouge">Staged</code> : 파일을 수정한 후 수정할 파일을 곧 commit할 것이라고 표시한 상태를 의미합니다.</li>
  </ul>
</blockquote>

<p>Git은 파일상태 관리와 더불어 3가지 영역을 사용합니다.</p>

<blockquote>
  <p>Git의 사용 영역</p>
  <ul>
    <li><code class="highlighter-rouge">Git directory</code> : Git이 project의 메타데이터와 객체 데이터베이스를 저장하는 곳을 의미합니다.
다른말로 <code class="highlighter-rouge">Local Repository</code>라고 하며 만약 특정 폴더를 Git directory(Local Repository)로 설정하려면 <code class="highlighter-rouge">git init</code>명령을
이용하면 됩니다. Repository로 설정되면 <code class="highlighter-rouge">.git</code>이라는 숨김폴더가 생성되고 이 안에 Git 관리 정보들이 생성되게 됩니다.</li>
    <li><code class="highlighter-rouge">Working directory</code> : project의 특정 branch를 checkout한 내용이 들어있는 폴더입니다.</li>
    <li><code class="highlighter-rouge">Staging Area</code> : Git directory에 존재하며 단순한 파일입니다. 곧 commit할 파일에 대한 정보를 가지고 있게 됩니다.</li>
  </ul>
</blockquote>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Git으로 하는 작업의 기본 순서</strong></p>

<p>작업의 기본순서는 다음과 같습니다.</p>

<ul>
  <li>Working directory에서 파일 수정</li>
  <li>Staging Area에 수정한 파일을 Stage해서 commit할 Snapshot 생성 ( <code class="highlighter-rouge">git add</code> )</li>
  <li>Staging Area에 있는 수정된 파일을 commit해서 Git directory에 영구적인 Snapshot으로 저장 ( <code class="highlighter-rouge">git commit</code> )</li>
</ul>

<p><img src="../../assets/built/images/git-local-operation.png" alt="git-local-operation" /></p>
<div class="img-reference">( 이미지 출처 : https://git-scm.com/ )</div>

<p><img src="../../assets/built/images/git-local-operation-1.png" alt="git-local-operation-another" /></p>
<div class="img-reference">( 이미지 출처 : http://egloos.zum.com/incredible/v/7278471 )</div>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Git 설치 &amp; 기본 설정</strong></p>

<p><a href="http://git-scm.com" target="_blank">http://git-scm.com</a>를 클릭해서 Git Official HomePage로 이동해서 Git을
다운로드 한 후 기본설정으로 install하시면 됩니다.</p>

<p>Git을 설치하신 후 <code class="highlighter-rouge">git config</code>를 이용해 기본적인 환경설정을 하시면 됩니다. 설정파일은 크게 3가지 종류가 존재하는데 
다음과 같습니다.</p>

<blockquote>
  <p>Git의 환경설정파일( Windows system 기준 )</p>
  <ul>
    <li><code class="highlighter-rouge">$GIT_HOME/mingw64/etc/gitconfig</code> : 시스템의 모든 사용자와 모든 저장소에 적용되는 설정으로
<code class="highlighter-rouge">git config --system</code>으로 설정합니다.</li>
    <li><code class="highlighter-rouge">$USER_HOME/.gitconfig</code> : 특정 사용자에게만 적용되는 설정입니다. <code class="highlighter-rouge">git config --global</code>으로 설정합니다.</li>
    <li><code class="highlighter-rouge">.git/config</code> : Git directory안에 위치하며 특정 저장소에만 적용되는 설정입니다.</li>
  </ul>
</blockquote>

<p>각각의 설정파일은 위에 나열된 순서의 역순으로 적용된다는 것도 같이 기억해 두셔야 합니다.</p>

<p>Windows system에서 Git을 설치하면 <code class="highlighter-rouge">Git Bash</code> 메뉴가 생성되는데 이를 실행해 console을 실행시킨 후 사용자 이름과
Email주소를 설정하시면 됩니다.</p>

<p><img src="../../assets/built/images/git-config-user.png" alt="git-config-user" /></p>

<blockquote>
  <p>참고로 <code class="highlighter-rouge">MINGW64</code>는 Windows system으로 porting한 GNU 소프트웨어 도구 모음입니다.</p>
</blockquote>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Git Local Repository 생성</strong></p>

<p>그럼 <code class="highlighter-rouge">Git</code>을 이용해 Git Repository를 만들어서 사용해 보도록 하겠습니다. 가지고 있는 project가 없기 때문에 간단하게
폴더를 하나 생성하고 그 폴더를 project 폴더로 간주하고 진행하겠습니다.</p>

<p><code class="highlighter-rouge">Git</code>의 기본 명령과 개념을 이해하는 목적이기 때문에 command 창에서 명령어를 이용해서 작업을 진행하겠습니다.
추후에 실제 project에 적용하실 때는 <code class="highlighter-rouge">IDE</code>의 기능을 이용하거나 <code class="highlighter-rouge">SourceTree</code>와같은 GUI툴을 이용하시는게 좋습니다.</p>

<p>다음과 같은 순서로 진행합니다.</p>

<ul>
  <li>윈도우 탐색기를 이용해 먼저 프로젝트 폴더를 생성합니다. <code class="highlighter-rouge">D:/MyProject</code>로 생성합니다. 나중에 Git으로 관리할
파일을 하나 생성합니다. 다음과 같은 내용을 가지고 있는 파일을 생성하고 파일 이름은 <code class="highlighter-rouge">readme.txt</code>로 저장합니다.
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This is a sample text.
</code></pre></div>    </div>
  </li>
  <li>project 폴더로 이동해 console을 통해 <code class="highlighter-rouge">git init</code>을 실행해 Git Repository를 생성합니다. 다음과 같은 메시지가 출력되는걸
확인하실 수 있습니다.
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Initialized empty Git repository in D:/MyProject/.git/
</code></pre></div>    </div>
  </li>
  <li>
    <p>메시지에서 나온것 처럼 <code class="highlighter-rouge">.git</code> 폴더가 생성되고 그 안에 Git Repository가 생성됩니다. 또한 Repository에
필요한 각종 Skeleton들도 같이 생성됩니다.</p>
  </li>
  <li>
    <p>이 상태에서 <code class="highlighter-rouge">git status</code>를 실행합니다. 그러면 Git이 아직 추적하고 있지 않은 readme.txt가 존재한다고 알려줍니다.
<img src="../../assets/built/images/git-status.png" alt="git-status" /></p>
  </li>
  <li>
    <p>Git Repository를 생성했지만 아직 어떠한 파일도 관리를 하고 있지 않습니다. 이제 Git이 파일을 관리하게
하려면 Repository에 <code class="highlighter-rouge">git add</code>를 이용해 파일을 추가하고 <code class="highlighter-rouge">git commit</code>을 이용해 commit까지 진행해야 합니다.
다음의 그림처럼 명령을 이용하여 Repository에 파일 추가, 확인, commit까지 진행합니다. ( <code class="highlighter-rouge">-m option</code>은 commit message를 작성하기 위해서
사용합니다. )
<img src="../../assets/built/images/git-commit.png" alt="git-commit" /></p>
  </li>
  <li>이제 마지막으로 <code class="highlighter-rouge">readme.txt</code> 파일의 내용을 에디터를 이용해 적당히 수정한 후에 다시 <code class="highlighter-rouge">git status</code>를 실행시켜 보시면 됩니다. 
그럼 Git은 해당 파일이 변경(Modified)됬다는 것을 인식해서 보여주게 됩니다. 변경된 내용을 적용해 Repository에 저장하려면 
다시 <code class="highlighter-rouge">git add</code>를 이용해 해당 파일을 staging 한 후 <code class="highlighter-rouge">git commit</code>을 실행해야 합니다.
<img src="../../assets/built/images/git-modify-commit.png" alt="git-modify-commit" /></li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Branch 생성</strong></p>

<p>그 다음에 알아볼 내용은 <code class="highlighter-rouge">branch</code> 입니다. branch는 기본 project에 영향이 가지 않는 상태에서 새로운 기능을 추가하거나
기존 기능을 변경해야 하는 경우에 유용하게 사용할 수 있습니다. 필요에 의해 만들어지는 이런 각각의 branch들은 서로간의 
영향을 받지 않습니다. 그렇기 때문에 여러 작업을 동시에 진행시킬 수 있습니다.</p>

<p><img src="../../assets/built/images/git-branches.png" alt="git-branches" /></p>
<div class="img-reference">( 이미지 출처 : https://rogerdudler.github.io/git-guide/index.ko.html )</div>

<p>Repository를 처음 생성하게 되면 Git는 <code class="highlighter-rouge">master</code>라는 이름의 branch를 만들어 줍니다. 위에서 우리가 <code class="highlighter-rouge">readme.txt</code> 파일을
Repository에 추가하고 내용을 변경해서 commit까지 진행했었는데 모두 이 master라는 branch에서 처리했던 겁니다.</p>

<p><code class="highlighter-rouge">master</code>가 아닌 다른 branch를 생성할 수 있습니다. 또한 <strong>“이제부터의 작업은 xxx branch에서 진행할꺼야!”</strong> 라는 식으로
명령을 줄 수 있는데 이걸 <code class="highlighter-rouge">checkout</code>이라고 합니다. 즉, <code class="highlighter-rouge">checkout</code>은 특정 branch의 내용을 가져와서 Working directory를 
설정하는 작업이라고 보시면 됩니다. 특정 branch에서 일어나지 않는 모든 작업은 당연히 <code class="highlighter-rouge">master</code> branch에서 일어나게 됩니다.</p>

<p>현재 어떤 branch가 존재하는지 알아볼려면 <code class="highlighter-rouge">git branch</code> 명령을 이용하시면 됩니다. 만약 새로운 branch를 생성하고 싶으면 
<code class="highlighter-rouge">git branch branch_name</code>형태로 branch이름을 명시하시면 새로운 branch가 생성됩니다.</p>

<p>현재 작업중인 branch는 <code class="highlighter-rouge">*</code> 기호로 표시됩니다. 아래 그림은 새로운 branch를 생성하고 <code class="highlighter-rouge">git checkout</code> 명령을 이용하여 hotfix
branch를 Working directory에 가져온 것입니다. 지금부터 하는 작업은 모두 <code class="highlighter-rouge">hotfix</code> branch에서 발생하는 것이고 master branch와는
무관하게 동작합니다.</p>

<p><img src="../../assets/built/images/git-branches-hotfix.png" alt="git-branches-hotfix" /></p>

<p>실제로 파일을 변경하거나 추가해서 hotfix branch에서 작업한 후 다시 master branch를 checkout해보시면 아까 했던 작업이 master
branch에는 영향을 미치지 않는다는 것을 확인하실 수 있습니다. 이 부분은 개별적으로 실습해 보시길 바랍니다.</p>

<p>참고로 모든 branch를 확인하기 위해서는 다음의 명령을 실행하시면 됩니다.</p>

<blockquote>
  <p><strong>git branch -a</strong></p>
</blockquote>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Branch Merge</strong></p>

<p><code class="highlighter-rouge">Merge</code> 작업은 현재 작업중인 branch에 다른 branch를 가져와서 병합하는 작업을 의미합니다. <code class="highlighter-rouge">git merge branch_name</code>을 이용하여
현재 branch에 명시된 이름의 branch를 가져와 파일을 병합하게 됩니다.</p>

<p>만약 두개의 branch에서 같은 파일의 같은 곳을 수정했을 경우 해당 파일을 병합할 때 당연히 문제가 발생하게 됩니다. 그냥 합쳐질 수가
없기 때문이지요. <code class="highlighter-rouge">conflict</code>가 발생했다고 표현합니다. 이런 경우 충돌이 일어난 내용을 살펴보고 수동으로 해결해야 합니다.</p>

<blockquote>
  <p><strong>Git은 병합이 실패했을 때 그 해결을 모두 사용자에게 일임합니다.</strong></p>
</blockquote>

<p>그래서 수동으로 파일을 수정한 후 다시 commit작업을 진행해야 합니다. <code class="highlighter-rouge">merge</code> 작업은 
<code class="highlighter-rouge">Remote Repository</code> 를 설명하는 부분에서 다시 한번 다뤄보기로 하겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> .gitignore 파일</strong></p>

<p>project 폴더 안에서 굳이 추적할 필요가 없는 파일들도 존재합니다. 입출력 데이터파일이나 로그파일, 혹은 <code class="highlighter-rouge">.class</code>와 같은 파일들은
굳이 Git을 이용해서 관리할 필요가 없습니다. 즉, 임시로 사용되거나 결과물로 생성되는 파일들이 이 범주에 들어갑니다.</p>

<p>이런경우 <code class="highlighter-rouge">.gitignore</code> 파일을 이용해 추적 관리할 필요가 없는 파일을 배제시킬 수 있습니다. 그냥 만들어도 되지만 
<a href="https://www.gitignore.io/" target="_blank">여기</a>로 이동해 보시면 조금 쉽게 <code class="highlighter-rouge">.gitignore</code> 파일의 내용을 만들어 복사해서 
사용하실 수 있습니다.</p>

<p><img src="../../assets/built/images/gitignore-io.png" alt="gitignore-io" /></p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Remote Repository</strong></p>

<p>Git은 혼자 사용할 수 도 있지만 기본적으로 다른 사람과 협업을 하기 위한 도구입니다. 협업 도구로서 Git의 
가장 큰 유용함은 <code class="highlighter-rouge">Remote Repository</code>(원격 저장소)에 있습니다.</p>

<p>이 Remote Repository는 우리가 따로 구축해서 사용할 수 있습니다. 또한 이런 Remote Repository를 서비스하는 회사도 굉장히 많이 
있습니다. Git 기반의 Remote Repository 중 가장 대표적인 것이 바로 <code class="highlighter-rouge">GitHub</code>입니다.</p>

<p>Remote Repository를 쉽게 생각하자면 로컬에서 작업한 Git Local Repository가 외부에 있는거라고 생각하시면 됩니다. <code class="highlighter-rouge">GitHub</code>는
이런 Remote Repository를 전세계적으로 서비스하고 있고 굉장히 많은 사람들이 GitHub를 자신들이 수행하고 있는 project의 
Remote Repository로 이용하고 있습니다.</p>

<p>GitHub에 있는 이런 Remote Repository는 크게 <code class="highlighter-rouge">public repository</code>와 <code class="highlighter-rouge">private repository</code>로 구분됩니다. 
말 그대로 public repository는 아무나 파일들을 열람할 수 있도록 공개되어 있는 repository이고
private repository는 권한을 가진 사람들만 사용할 수 있는 repository입니다.</p>

<p>GitHub는 <code class="highlighter-rouge">Fork</code>와 <code class="highlighter-rouge">Pull Request</code>라는 기능을 제공하고 있습니다. 정확히 말하자면 이 Fork와 Pull Request는 Git이 제공하는 것이
아니라 GitHub가 제공하는 서비스 입니다.</p>

<ul>
  <li>
    <p>Fork : 다른 사람의 Repository를 통째로 내 GitHub 계정으로 복사해 오는 기능입니다. 즉, GitHub 계정간 Repository를 서로
복사해 갈 수 있는 기능이라고 보시면 됩니다.</p>
  </li>
  <li>
    <p>Pull Request : 다른 사람의 Repository를 Fork한 후 그 내용을 수정한 다음 원본 Repository에 수정된 내용을 보내 병합을
요청할 수 있는데 이 작업을 Pull Request라고 합니다. 아무나 Repository를 수정할 수 있는 권한을 주게 되면 Repository는 금방
엉망이 될 테니 READ기능(Fork)만 제공하고 병합시에는 요청을 받아서 처리하도록 합니다.</p>
  </li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> GitHub에 Remote Repository 생성</strong></p>

<p>그럼 이제 GitHub에 계정을 생성하고 Remote Repository를 생성해 사용하는 방법에 대해서 알아보겠습니다.</p>

<p>GitHub에 계정을 생성하고 새로운 Repository를 생성하는 버튼을 클릭하면 다음과 같은 화면을 보실 수 있습니다. 
Repository이름을 입력하고 간단한 설명을 입력합니다. Repository의 종류를 선택할 수 있는데 private은 비용을 지불해야 사용할 수 
있습니다. 우리는 아까 만들어 놓은 Local Repository와 연결시키는 목적으로 사용할 것이기 때문에 README 파일을 만들지 않고
Repository를 생성합니다.</p>

<p><img src="../../assets/built/images/github-repository-create.png" alt="github-repository-create" /></p>

<p>Repostiroy를 생성하면 다음과 같은 화면을 보실 수 있습니다. Repository에 현재 파일이 존재하지 않기 때문에
이렇게 나오는 것이고 만약 특정 파일들이 저장되어 있으면 파일의 목록들이 보여지게 됩니다.</p>

<p><img src="../../assets/built/images/github-repository-create-result.png" alt="github-repository-create-result" /></p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Remote Repository 관리 명령어</strong></p>

<p>GitHub에 생성한 Remote Repository를 관리하기 위해서 Git은 몇몇개의 명령어를 제공합니다.</p>

<ul>
  <li><code class="highlighter-rouge">git clone</code> : Remote Repository의 모든 내용을 Local Repository로 복사합니다.</li>
  <li><code class="highlighter-rouge">git remote</code> : Local Repository를 특정 Remote Repository와 연결시킬 때 사용합니다.</li>
  <li><code class="highlighter-rouge">git push</code> : Local Repository에 추가된 파일이나 변경 사항을 연결된 Remote Repository에 저장하기 위해서 사용합니다.</li>
  <li><code class="highlighter-rouge">get fetch</code> : Remote Repository와 Local Repository의 변경 사항이 다를 때 이를 비교 대조해서 충돌을 해결하고
최신 데이터를 반영하기 위해서 사용합니다.</li>
  <li><code class="highlighter-rouge">git pull</code> : 연결된 Remote Repository의 최신 내용을 Local Repository로 가져오면서 merge합니다. <code class="highlighter-rouge">git push</code>와 반대의 
개념이라고 보시면 되지만 merge할 때 문제가 발생했을 때 추적이 어렵습니다. 따라서 <code class="highlighter-rouge">git pull</code>을 이용하는 것 보다는 일단
<code class="highlighter-rouge">git fetch</code>로 변경사항을 받고 이를 확인해서 코드를 수정한 후 Local Repository에 commit한 다음 <code class="highlighter-rouge">git push</code>로 최종 변경 사항을
Remote Repository에 반영하는게 더 좋은 방법입니다.</li>
</ul>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> git clone</strong></p>

<p><code class="highlighter-rouge">git clone</code>은 Remote Repository에 있는 project를 내 컴퓨터로 가져올 때 사용합니다. 즉, GitHub에서 Local 환경으로 복사하는 
작업입니다. 위에서 생성했던 MyProjectRemote란 GitHub Remote Repository를 Local로 clone해 보도록 하겠습니다.</p>

<ul>
  <li>
    <p>먼저 Remote Repository의 주소를 복사합니다.
<img src="../../assets/built/images/git-remote-repository-url.png" alt="git-remote-repository-url" /></p>
  </li>
  <li>
    <p>로컬 컴퓨터에서 프로젝트를 저장할 폴더를 생성한 후 git clone을 이용해 저장소를 복사합니다. 
<code class="highlighter-rouge">D:/GitHub</code> 폴더를 생성한 후 이 폴더 안에서 다음의 명령을 실행시킵니다.</p>
  </li>
</ul>

<blockquote>
  <p><strong>git clone https://github.com/moon9342/MyProjectRemote.git</strong></p>
</blockquote>

<p><img src="../../assets/built/images/github-repository-clone.png" alt="github-repository-clone" /></p>

<p>정상적으로 clone이 진행되면 저장소 이름으로 폴더가 하나 생성되는것을 볼 수 있습니다. 당연히 이 폴더는 
Remote Repository와 연결되어 있는 Local Repository가 됩니다.</p>

<p>이해를 돕기 위해 순차적으로 생각해보면 다음과 같이 project가 진행될 수 있습니다.</p>

<ul>
  <li>
    <p>협업을 책임지는 사람(PM)이 GitHub에 빈 Remote Repository를 생성합니다.</p>
  </li>
  <li>
    <p>PM은 자신의 Local Repository에 project에 필요한 기본 구조와 여러가지 환경설정 그리고 개발한 필요한 기타 사항들을
만들어서 저장합니다.</p>
  </li>
  <li>
    <p>PM은 project의 뼈대가 담겨있는 이 Local Repository를 GitHub에 생성해 놓은 빈 Remote Repository와 연결합니다. 이때 
<code class="highlighter-rouge">git remote</code> 명령을 이용하게 됩니다.</p>
  </li>
  <li>
    <p>PM은 자신이 Local Repository에 가지고 있는 내용을 Remote Repository에 <code class="highlighter-rouge">push</code> 합니다.</p>
  </li>
  <li>
    <p>이제 협업하는 사람 모두가 이 Remote Repository를 clone해서 로컬로 복사해 간 다음 자신이 해야 하는 작업을 진행합니다.</p>
  </li>
</ul>

<p>위와 같은 식으로 생각하면 <code class="highlighter-rouge">git remote</code>와 <code class="highlighter-rouge">git clone</code>의 차이점을 이해할 수 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> git remote</strong></p>

<p>GitHub에 빈 Remote Repository를 생성한 후 <code class="highlighter-rouge">git remote</code>를 이용하여 Local Repository와 연결할 수 있습니다.
다음과 같은 명령을 이용합니다.</p>

<blockquote>
  <p><strong>git remote add origin “Remote Repository URL”</strong></p>
</blockquote>

<p>연결이 성공했는지를 다음의 명령어를 이용해서 확인해 볼 수 있습니다.</p>

<blockquote>
  <p><strong>git remote -v</strong></p>
</blockquote>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> git push</strong></p>

<p><code class="highlighter-rouge">git remote</code>를 이용하여 Local Repository와 Remote Repository가 연결되었으면 이제 자신이 작업한 내용을
Remote Repository에 upload를 할 수 있습니다.</p>

<p>이 때 <code class="highlighter-rouge">git push</code> 명령을 이용하면 파일을 upload할 수 있는데 기본적으로 Remote Repository의 master branch에
upload되게 됩니다. 따라서 만약 다른 branch의 내용을 upload하려 하면 다음과 같이 명령을 실행시켜야 합니다.</p>

<blockquote>
  <p><strong>git push origin “local branch명”</strong></p>
</blockquote>

<p>위의 명령에서 origin은 원격 저장소의 별칭입니다. <code class="highlighter-rouge">git remote</code>를 이용하여 Remote Repository를 연결할 때 
이 <code class="highlighter-rouge">origin</code>이라는 별칭을 이용해서 원격 연결을 했었습니다.</p>

<p>만약 <code class="highlighter-rouge">origin</code> 저장소에 Local의 모든 branch를 push하려면 다음과 같이 명령을 수행하시면 됩니다.</p>

<blockquote>
  <p><strong>git push origin --all</strong></p>
</blockquote>

<p><code class="highlighter-rouge">git push</code>가 진행될 때 Remote Repository에 같은 이름의 branch가 존재한다면 내용이 변경될 것이고 만약
해당 branch가 존재하지 않는다면 새로운 branch를 Remote Repository에 생성하게 됩니다. 같은 이름의 branch가
존재하지만 내역이 다르다면 당연히 push는 일어나지 않고 작업이 거부됩니다.</p>

<p>간단한 예를 들자면 Local Repository의 master branch의 내용을 Remote Repository에 push하려면 다음과 같이
실행하시면 됩니다.</p>

<blockquote>
  <p><strong>git push origin master</strong></p>
</blockquote>

<p>만약 Local Repository의 hotfix branch의 내용을 Remote Repository에 push하려면 다음과 같이 실행하시면 됩니다.</p>

<blockquote>
  <p><strong>git push origin hotfix</strong></p>
</blockquote>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> git fetch &amp; git pull</strong></p>

<p>Remote Repository를 이용하다 보면 다른 누군가가 먼저 commit할 경우가 있습니다. 이런 경우
git은 당연히 파일의 내용이 서로 상이하기 때문에 push를 허용하지 않습니다.</p>

<p>Remote Repository와 Local Repository를 적절히 서로 맞춰야 하며 이럴 때 사용하는 것이 <code class="highlighter-rouge">git fetch</code> 입니다.
즉, fetch는 Remote Repository의 commit들을 Local Repository로 가져오는 역할을 하고 사용자는 
Local Repository로 가져온 commit들을 자신의 작업과 적절히 병합하여 Remote Repository에 push해야 합니다.</p>

<p><code class="highlighter-rouge">git pull</code>은 Remote Repository의 정보를 가져오면서 자동으로 Local branch에 병합하는 명령어 입니다. 편하게 
사용할 수 는 있지만 만약 conflict가 발생하면 내역 확인이 쉽지 않은 단점이 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Remote Branch를 Local로 가져오기</strong></p>

<p>만약 Local Repository에 Remote Repository의 branch가 존재하지 않는다면 <code class="highlighter-rouge">git pull</code>을 이용한다해도 
자동으로 Remote Repository에 있는 branch를 가져오지 못합니다.
Remote Repository에 있는 branch를 Local Repository로 가져오실려면 다음과 같이 작업하셔야 합니다.</p>

<p>우선 git remote에 대한 내역을 갱신해야 합니다. 해당 명령을 하지 않을 경우 나중에 branch를 찾지 못한다는 오류가 발생할 수 있기
때문입니다. 다음과 같은 명령을 이용합니다.</p>

<blockquote>
  <p><strong>git remote update</strong></p>
</blockquote>

<p>그 다음은 Remote Repository의 branch내역을 확인해야겠죠. <code class="highlighter-rouge">-a</code> option을 이용하면 Remote Repository와 
Local Repository의 모든 branch를 확인할 수 있습니다.</p>

<blockquote>
  <p><strong>git branch -r</strong></p>
</blockquote>

<p>이제 Local Repository에 동일 이름의 branch를 생성하면서 Remote Repostiroy의 branch를 가져온 후 
해당 branch로 checkout을 해 보죠. 다음과 같이 실행하시면 됩니다.</p>

<blockquote>
  <p><strong>git checkout -t &lt;Remote_Branch_Name&gt;</strong></p>
</blockquote>

<p>만약 Local Repository에 같은 이름의 branch가 아니라 다름이름의 branch를 생성하고 싶을 경우는 
아래처럼 <code class="highlighter-rouge">-b</code> option을 이용하시면 됩니다.</p>

<blockquote>
  <p><strong>git checkout -b &lt;Local_Branch_Name&gt; &lt;Remote_Branch_Name&gt;</strong></p>
</blockquote>

<p>End.</p>

<hr />


	  ]]></description>
	</item>

	<item>
	  <title>Front-End 발전 역사와 개발 생태계</title>
	  <link>http://localhost:4000/front-end-ecosystem</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-01-29T22:31:00+09:00</pubDate>
	  <guid>http://localhost:4000/front-end-ecosystem</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p>이번 포스트는 과거 JavaScript 탄생부터 시작해서 어떻게 발전해왔는지에 대한 내용과 <br />
현재 Front End 개발에 있어서 무엇을 알아야 하는 지에 대한 전반적인 기술 상황에 대해서 알아보겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> JavaScript 탄생</strong></p>

<p>JavaScript라는 언어의 역사는 저의 <a href="./javascript-history.html" target="_blank">다른 포스트</a>에서도 볼 수 있지만 
여기서도 간단하게 언급하고 넘어가겠습니다.</p>

<p><code class="highlighter-rouge">JavaScript</code>언어의 역사는 1995년 Netscape사의 Brendan Eich(브랜든 아이크)에 의해 개발된 <code class="highlighter-rouge">Mocha</code>라는 언어부터 시작됩니다.
이 Mocha라는 언어는 <strong>“Prototype의 개념과 Functional Language(함수형 언어)의 특성을 가지고 Web에 동적으로 활용할 수 있는 
언어를 만들어보자”</strong> 라는 취지로 2주일 이라는 굉장히 짧은 기간안에 만들어졌습니다.</p>

<p>추후에 <strong>Mocha -&gt; LiveScript -&gt; JavaScript</strong>로 개명되었고 ECMA에 <code class="highlighter-rouge">ECMA-262</code> 기술규격으로 <code class="highlighter-rouge">ECMAScript</code>라는 이름으로 표준화를
진행하게 됩니다. 이에 대응해 1996년 MicroSoft 측에서는 <code class="highlighter-rouge">JScript</code>라는 걸 만들어내서 자사의 IE 3안에 포함시켜 제공하기 시작했습니다.</p>

<p>이런 JavaScript는 여러가지 문제점을 내포하고 있었는데 가장 큰 문제를 꼽자면</p>

<ul>
  <li>구현의 어려움</li>
  <li>언어의 모호성</li>
  <li>Cross Browsing의 한계</li>
</ul>

<p>정도를 들 수 있습니다. 즉, 사용자 입력값을 검사하는 용도, 사용자의 이벤트를 감지해서 처리하는 용도로는 사용할 수 있지만 
언어 자체가 가지고 있는 근본적인 문제때문에 사용이 힘들었습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 구세주의 등장 - jQuery</strong></p>

<p>이 때 구세주가 등장합니다. 우리가 잘 알고 있는 <code class="highlighter-rouge">jQuery</code> library입니다.</p>

<p>jQuery는 open source javascript library로 순수 javascript가 가지고 있었던 DOM처리의 어려움과 Cross Browsing에 대한 issue를
해결하면서 <strong>JavaScript의 대표적 library</strong>로 사용되게 되었습니다. jQuery로 인해 JavaScript가 조금은 쓸만한 언어로 여기지면서
사용되기 시작했습니다.</p>

<p>그러면서 그냥 그냥 아주 소소하게 client web browser안에서 JavaScript 코드와 jQuery 코드가 이용되었던 거지요. 특별히 중요하지도 않은
단위코드 위주로 사용이 되는 그런 수준이었습니다. 그러면서 우리 기억에도 “알면 좋고 몰라도 상관없는 언어”로 인식되었습니다.</p>

<p>그렇게시간은 흘러갑니다.!!</p>

<p>1997년 <code class="highlighter-rouge">ECMAScript</code>의 초판이 나오게 됩니다. <code class="highlighter-rouge">ES1</code>이라고 합니다. 그 후 1999년에 <code class="highlighter-rouge">ES3</code>가 나오게 됩니다. 여기까지 하고 한동안
ECMAScript 표준은 쿨쿨 잠을 자게 됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 다시 JavaScript에 날개를 달아보자 - HTML5</strong></p>

<p>1999년 12월 <code class="highlighter-rouge">W3C</code>(World Wide Web Consortium)에서 하나의 발표를 합니다. 아시다시피 W3C는 <code class="highlighter-rouge">HTML</code>과 <code class="highlighter-rouge">CSS</code>의 표준을 
관장하는 기구입니다. 이때까지 우리가 사용하는 HTML의 버전은 4.01버전이었습니다. W3C는 이 버전을 마지막으로 더 이상 
HTML의 버전업은 없을 것이라고 공표하게 됩니다. 그때까지 잘 사용해왔던 HTML을 왜 버전업하지 하지 않겠다고 했을까요?</p>

<p>여러가지 이유가 있지만 프로그래밍 언어의 측면에서 바라보면 HTML이란 언어는 다음과 같은 한계점이 있습니다.</p>

<ul>
  <li><strong>정형성 : HTML언어는 정형성이 없기때문에 유지보수에 적합하지 않다.</strong></li>
  <li><strong>확장성 : 정해진 Tag만 이용하기 때문에 언어자체에 대한 기능적 확장이 어렵다.</strong></li>
</ul>

<p>W3C는 저 두가지 이유를 들어 HTML언어를 이대로 끌고 가기 보다는 좀 더 다른 수단을 강구해야 겠다고 판단합니다. W3C의 선택은
바로 <code class="highlighter-rouge">XML</code>의 도입이었습니다. 즉, HTML이 가지는 두가지 문제점을 해결할 수 있는 XML을 도입해서 새로운 Web언어의 표준을
끌고 나갈 생각이었습니다. 그 결과 2000년 들어오면서 HTML과 XML이 결합된 새로운 표준인 <code class="highlighter-rouge">XHTML 1.0</code>이 발표되게 됩니다.</p>

<p>W3C의 이런 의도와는 다르게 몇몇개의 회사들이 모여서 조금 다른 접근을 모색합니다. XML을 도입하지 말고 순수하게 HTML을 기능을
버전업시킬 수 있는 방법을 찾기 시작한 것이죠. 그래서 <code class="highlighter-rouge">WHATWG</code>(Web Hypertext Application Technology Working Group)이라는 
Working Group이 만들어지고 이 안에서 기존의 HTML을 발전시킬 방법을 연구하게 됩니다. 
( 사실 여기서 할 말이 많기 한데 자꾸 산으로 가는 느낌이라 적당히 짜르겠습니다. ) 
이 WG에서 나온것이 바로 현재의 표준인 <code class="highlighter-rouge">HTML5</code>입니다. HTML을 이용해서 Web Application을 만들자는 취지입니다. 
이 HTML5안에 Client Web Application을 작성할 수 있는 API가 포함되어 있는데 이게 <code class="highlighter-rouge">JavaScript</code>로
되어 있습니다. 결국 HTML5가 issue화 되면서 JavaScript의 위상도 조금씩 더 올라가게 됩니다.</p>

<p>그래서인지 쿨쿨 잠을자던 ECMAScript 개정판(<code class="highlighter-rouge">ES5</code>)이 2009년에 등장합니다. 참고로 4판(<code class="highlighter-rouge">ES4</code>)은 버려졌습니다. 이제 슬슬
JavaScript에 대한 발전이 시작됩니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> JavaScript의 획기적 전환점 - Node.js</strong></p>

<p>2013년 <code class="highlighter-rouge">Node.js</code>가 출시됩니다. 아무리 HTML5라고 해도 이때까지의 JavaScript는 Browser안에서 동작하는 언어였습니다.
우리가 알고 있는 <code class="highlighter-rouge">Java</code>, <code class="highlighter-rouge">C#</code>과 같은 언어가 될 수 없는 태생적 한계가 있는거죠. 이런 browser에 갇힌 JavaScript를
browser 외부로 탈출하게끔 만들어준 일등공신이 바로 Node.js입니다. 결국 JavaScript로 다른 언어처럼 OS위에서 동작하는
일반 application을 작성할 수 있는 길이 열린것이고 그에 따라 언어의 위상이 완전히 변했습니다.</p>

<p>그에 발맞춰 ECMAScript도 빠르게 변화하기 시작했습니다. 2015년에 ECMAScript 2015(<code class="highlighter-rouge">ES6</code>)가 등장하면서 JavaScript 언어자체에
아주 큰 변화들이 많이 생겼습니다. 현재 ECMAScript 2016(<code class="highlighter-rouge">ES7</code>)까지 나온 상태입니다. 조금 지나면 <code class="highlighter-rouge">ES8</code>이 표준화되어서 나오겠네요.
거의 1년마다 새로운 배포판이 나올정도로 빠르게 변화하면서 언어적 측면에서 가지고 있던 많은 문제점들을 극복하려고 노력하고 있습니다.</p>

<p>현재(2018년 1월) 대부분의 browser들은 <code class="highlighter-rouge">ES6</code>를 지원하고 있습니다. 
<a href="https://kangax.github.io/compat-table/es6/" target="_blank">여기</a>에 접속해 보시면 특정 browser에 대해 
각 ECMAScript의 버전 호환성을 보실 수 있습니다.</p>

<blockquote>
  <p><strong>이제 IE는 고만쓰도록 해요. 제발….</strong></p>
</blockquote>

<p>아직 완벽하게 Cross Browsing이 안되는데 어떻게 하느냐에 대한 문제는 <code class="highlighter-rouge">Babel</code>, <code class="highlighter-rouge">TypeScript</code>와 같은 
transpiler를 이용해서 해결할 수 있습니다. 
Babel, TypeScript는 ES6(ES7) 문법으로 쓰여있는 JavaScript code를 ES5 형태의 JavaScript로 변환시켜주기 때문에 
IE에서 ES6지원이 안됨에도 불구하고 ES5로 변환해서 사용할 수 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 변화의 속도가 너무 빠름</strong></p>

<p>그런데 문제는 기술의 발전 속도가 너무 빠르다는데 있습니다. 또한 알아야 할게 한두 가지가 아니구요. 
과거 Back End에서 사용했던 프로그래밍 기술과 여러가지 개발 툴의 개념들이 다 Front End로 넘어왔기 때문입니다.
너무 많은기술들이 빠르게 생기고 빠르게 사라지고 있습니다.</p>

<p>사실 2-3년전에 자주 사용했던 JavaScript Library와 Framework들 중 많은 것들이 이미 다른 것으로 대체되었습니다. 
그렇다고 손 놓고 있을 순 없으니 현재 상태에서 우리가 Front End 개발을 하기 위해 필수적으로 알아야 하는 것 몇가지만
살펴보도록 하겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 이것정도는 알고 가자</strong></p>

<ul>
  <li><strong>Package Manager</strong> : <code class="highlighter-rouge">NPM</code>, Yarn</li>
</ul>

<p><img src="assets/built/images/npm-vs-yarn.png" alt="npm vs yarn" /></p>

<p>외부 라이브러리를 사용할 경우 해당 라이브러리를 설치, 삭제, 의존성 관리등을 해야 하는데 이를 위한 도구가 
몇몇 존재합니다. 그중 하나만 하자면 당연 <code class="highlighter-rouge">npm</code>입니다. Node Package Manager의 약자이고 Node.js를 살짝 맛보시면
npm이 어떻게 동작하는지 아실 수 있습니다. 굳이 Node.js에 대해서 학습할 필요는 없습니다. 당연히 알면 좋지만요.</p>

<ul>
  <li><strong>Transpiler</strong> : Babel, <code class="highlighter-rouge">TypeScript</code></li>
</ul>

<p><img src="assets/built/images/typescript-vs-babel.jpg" alt="babel vs typescript" /></p>
<div class="img-reference">( 이미지 출처 : http://news.softpedia.com/news )</div>

<p>Cross Browsing을 위한 Transpiler입니다. 비교 대상은 아닙니다. 둘 다 알아둘 필요는 있지만 
저는 <code class="highlighter-rouge">TypeScript</code>는 반드시 해야 한다고 생각합니다. 앞으로 TypeScript는 더 발전할 듯 보이거든요. 
하지만 배우기 쉽지 않습니다. 언어적 측면을 파고 들면 내용이 꽤나 많습니다.
다행히 TypeScript는 ECMAScript의 superset이니 ECMAScript 공부한다고 생각하시면 속 편합니다.</p>

<p>또한 제 개인적인 생각과는 반대로 TypeScript언어의 단점도 분명히 존재합니다. 엄격한 type checking덕분에
JavaScript가 가지는 프로그래밍의 유연함이 많이 떨어진다는 것이죠.</p>

<ul>
  <li><strong>자동화 도구</strong> : Grunt, <code class="highlighter-rouge">Gulp</code></li>
</ul>

<p><img src="assets/built/images/grunt-vs-gulp.jpg" alt="Grunt vs Gulp" /></p>

<p>빌드, 테스트, 배포등을 위한 자동화 도구입니다. 과거에는 Grunt를 많이 사용했지만 현재는 Gulp인듯 합니다. 
시간 좀 지나면 Gulp도 Grunt와 마찬가지로 역사속으로 사라지게 되겠지만 지금은 Gulp가 대세입니다.</p>

<ul>
  <li><strong>module bundler</strong> : <code class="highlighter-rouge">webpack</code>, rollup</li>
</ul>

<p><img src="assets/built/images/webpack-vs-rollup.png" alt="webpack vs rollup" /></p>

<p>코드 재사용을 위한 모듈화 도구들과 bundler 역시 여러가지 있는데 요즘 많이 사용하는 건 <code class="highlighter-rouge">webpack</code>입니다.
ES6 들어오면서 언어적 차원에서 Module을 지원하기 시작했고 이런 Module들을 하나로 모아 Packaing하는 작업이
필요하게 되었습니다. 이를 위한 도구 역시 발전을 하고 있구요. 과거에는 Common.js, Require.js를 이용하여
처리했다면 최근에는 webpack, rollup을 이용하여 처리합니다.</p>

<ul>
  <li>Framework &amp; Library : <code class="highlighter-rouge">Angular</code>, <code class="highlighter-rouge">React</code>, <code class="highlighter-rouge">Vue.js</code></li>
</ul>

<p>우리의 목적은 사실 저 위의 3가지를 배우는 것입니다. 각기 나름대로의 장점과 특징들을 가지고 있습니다. 개인적으로는 
블로그내에 저 세가지의 강좌를 개설하는게 2018년 상반기의 블로그 목표입니다. 대세는 Angular이지만 React의 성장세
역시 가히 폭발적입니다. 아직까지(2018년 1월기준) Vue.js는 Angular와 React 만큼의 성장세는 보이지 않고 있지만 이 역시 어떻게 될지는
모를일이죠</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> 정리</strong></p>

<p>위에서 <strong>“이것정도는 알고가자”</strong>라고 했지만 그 내용을 전부 다 알고 있으면 상당한 경험과 실력을 가진
Front End 개발자일 것입니다. 또 위에 포함을 안했지만  <code class="highlighter-rouge">Git</code>같은 것은 기본적으로 숙지해야 할 것이구요. 할게 너무 많네요
천천히 하나씩 해보도록 하죠 머…</p>

<p>그리고 <strong>“이것정도는 알고가자”</strong>에서 제가 강조한 것들은 제가 현재 사용하는 것들입니다.
그것들이 더 좋다는 보장은 어디에도 없습니다. 자기 손에 익숙한게 최고입니다. ^^</p>

<p>End.</p>

<hr />

	  ]]></description>
	</item>

	<item>
	  <title>What is Continuous Integration?</title>
	  <link>http://localhost:4000/continuous-integration</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-01-28T00:30:00+09:00</pubDate>
	  <guid>http://localhost:4000/continuous-integration</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p>CI는 <code class="highlighter-rouge">Continuous Integration</code>의 약자로 우리나라 말로 굳이 번역하자면 
<strong>“지속적인 통합”</strong> 정도가 되겠네요.</p>

<p>여기서는 간단하게 Continuous Integration이 어떤 개념인지 살펴보도록 하겠습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> CI(Continuous Integration)란 무엇인가?</strong></p>

<p>소프트웨에 개발은 다음과 같은 라이프 사이클을 가지고 있습니다.</p>

<blockquote>
  <p><strong>계획 =&gt; 요구사항 분석 =&gt; 설계 =&gt; 코드화 =&gt; Build =&gt; Testing =&gt; Release =&gt; Deploy</strong></p>
</blockquote>

<p>waterfall 방식으로 한 단계가 끝나면 다음 단계로 이동하기도 하지만 일반적으로는 프로젝트가
진행되는 동안 <strong>이 안의 단계가 반복적으로 실행</strong>되게 됩니다.</p>

<p>하지만 우리는 코드를 작성한 후 통합 <code class="highlighter-rouge">Build</code>작업과 통합 <code class="highlighter-rouge">Test</code>작업을 하지 않고 넘어가는 경우가 많습니다. 
가장 큰 이유는 Build작업과 Test작업에 시간이 오래 걸리고 만약 중간에 문제가 발생하면 이걸 수정하는게 
쉽지 않고 결국 또 시간을 잡아먹게 되기 때문이죠. 
심한경우 프로젝트의 중반 이후에 개별적으로 작성한 코드를 통합 build하고 Test하는 경우도 있습니다. 
<strong>이런 경우 소프트웨어 통합작업은 결국 산으로 올라가게 됩니다.</strong></p>

<p><code class="highlighter-rouge">Continuous Integration</code>은 이런 문제점을 해결하기 위해 <strong>코드를 최대한 자주 통합하여 개발</strong>하는 소프트웨에 개발 방법론중의
하나라고 볼 수 있습니다. 이런 CI를 도와주는 여러가지 툴들이 존재하는데 이를 이용하면 통합 시 필요한 여러가지 자잘한(?) 
문제들을 자동화시켜서 최대한 빨리 오류를 발견하고 문제를 해결해 나갈 수 있습니다. 결과적으로는 상당히 품질이 좋은 소프트웨어를
개발할 수 있게 되는 거지요.</p>

<p>그림으로 표현하면 아래와 같이 단순하게 표현할 수 있겠네요.</p>

<p><img src="../../assets/built/images/fail-fast-continuous-integration.png" alt="CI 동작방식-Simple" /></p>
<div class="img-reference">( 이미지 출처 : https://blog.snap-ci.com/categories/continuous-integration )</div>

<p>사실 더 복잡하지만 위의 그림처럼 단순하게 바라보시면 될 듯 합니다. <code class="highlighter-rouge">CI Server</code>가 통합된 코드를 자동으로 
Build-Test-Release-Deploy까지 진행하고 그 결과를 개발자나 다른 관련있는 사람에게 알려주게 됩니다.</p>

<p><strong>CI Server가 일련의 과정을 자동으로 처리해 줌으로써 개발자는 Business Logic 작성에 더 집중</strong>할 수 있고 오류에 대한 내용도 빨리
수정을 할 수 있습니다. 일반적으로 Git과 같은 VCS(Version Control System)과 연계해서 사용하게 됩니다.</p>

<p>현재 많이 사용되는 CI 제품들은 다음과 같습니다.</p>

<ul>
  <li>
    <p><code class="highlighter-rouge">Jenkins</code> : Java로 작성된 open source CI tool입니다. open source CI 진영에서는 압도적 사용자를 보유하고 있습니다. 
<strong>Java 개발자들에겐 진리입니다.</strong> 설치형이기 때문에 설정이 조금 복잡합니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">Travis CI</code>: <strong>Github와의 편한 연동 및 public repository에 대해서는 무료</strong>로 사용할 수 있다는 장점이 있습니다. 설정이 Jenkins만큼
복잡하지 않고 Travis Server를 이용하여 동작시키는 것이기 때문에 편합니다. private repository에 대해서는 일정량의 비용을 지불해야
합니다.</p>
  </li>
  <li>
    <p>TEAMCITY, BAMBOO, GITLAB CI, CIRCLECI, CODESHIP 등등이 있습니다. 이놈들은 저도 써보질 않아서 할말이 없네요.</p>
  </li>
</ul>

<p>간단하게 CI의 개념에 대해서만 살펴보았습니다. <code class="highlighter-rouge">Travis CI</code>와 같은 것은 사용하기 그리 어렵지 않으니 한번 사용해 보시면 느낌이 확
오실겁니다.</p>

<p>End.</p>

<hr />


	  ]]></description>
	</item>

	<item>
	  <title>Library, Framework, Architecture, Platform</title>
	  <link>http://localhost:4000/architecture-platform-terminology</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-01-26T22:39:00+09:00</pubDate>
	  <guid>http://localhost:4000/architecture-platform-terminology</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p><code class="highlighter-rouge">Library</code>, <code class="highlighter-rouge">Framework</code>, <code class="highlighter-rouge">Architecture</code>, <code class="highlighter-rouge">Platform</code>은 우리가 너무나 많이 들어본 용어이고 그 의미도 
대충 알고 있습니다. 하지만 <strong>명확하게 설명해봐!!</strong> 라고 한다면 주춤 주춤하게 만드는 용어이기도 합니다.</p>

<p>이번 포스트는 저 위에 나열된 4개의 용어에 대한 간략한 정리입니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Library</strong></p>

<p>가장 쉬운 개념입니다. 일반적으로 <code class="highlighter-rouge">Library</code>는 다른 프로그램에서 링크 되기 위해 사용되는 하나 이상의 <code class="highlighter-rouge">function</code> 혹은 <code class="highlighter-rouge">class</code>
들의 집합이며 이들은 일반적으로 파일형태로 존재합니다.</p>

<p>Library를 사용하는 가장 큰 목적은 <strong>코드의 재사용성을 높이기 위함</strong>이지요. 
자주 사용되는 기능들은 매번 새롭게 작성하지 말고 function이나 class 형태로 만들어 놓고 필요할 때 
그 기능을 쉽게 불러다가 사용하자는 개념입니다.</p>

<ul>
  <li>
    <p>Library의 가장 간단한 예로는 <code class="highlighter-rouge">jQuery</code>가 있습니다. Front-End 작업을 할 때 DOM 구조에서 내가 원하는 Element를 
빠르고 쉽게 찾아 DOM 에서 제거하고 싶을 때 jQuery Library를 이용하면 단 1줄에 해결할 수 있습니다. 순수 JavaScript로 
작업하려면 많은 양의 복잡한 코드를 직접 작성해야 합니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">Java</code>에서 사용하는 여러 외부 <code class="highlighter-rouge">class</code> 역시 모두 Library입니다. Java에서 랜덤값을 얻고싶을 때 우리는 Random class를
이용해 instance를 생성하고 method를 호출해서 간단하게 원하는 범위의 랜덤값을 도출할 수 있습니다. 만약 Library를
이용하지 않고 랜덤값을 구할려면 역시나 복잡한 로직과 연산을 우리가 직접 구현해야 됩니다.</p>
  </li>
  <li>
    <p>비슷한 예로 Java에서 <code class="highlighter-rouge">JSON</code> 데이터를 처리할 때 역시 특정 Library class를 이용하면 쉽게 처리할 수 있습니다. 
가장 대표적인 Library는 <code class="highlighter-rouge">Jackson</code>이 아닐까 합니다. 이 Library class들을 이용하면 프로그램에서 
JSON 데이터를 아주 쉽게 핸들링 할 수 있습니다.</p>
  </li>
</ul>

<p>이렇듯 <code class="highlighter-rouge">Library</code>는 <strong>프로그램을 작성할 때 필요한 단위 기능을 모아놓은 모듈</strong>이라고 볼 수 있습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Platform</strong></p>

<p><code class="highlighter-rouge">Platform</code>은 <strong>“Software를 실행시킬 수 있는 실행환경(Runtime Environment)”</strong>을 의미합니다.</p>

<p>예를 들어 보자면, 우리가 사용하는 모든 <code class="highlighter-rouge">OS</code>(Operation System)는 모두 Platform입니다. Windows Platform은
windows 응용 프로그램을 실행시키기 위한 실행 환경이고 Linux Platform은 Linux 응용 프로그램을 실행시키기 위한
실행 환경이란 말이지요.</p>

<p>Java 배울 때 처음에 <code class="highlighter-rouge">JVM</code>(Java Virtual Machine)이란 걸 배우게 됩니다. 우리가 작성한 모든 Java 프로그램은 JVM위에서 
동작하게 됩니다. 다시 말하면 JVM은 Platform입니다. Java 프로그램을 실행시켜 줄 수 있는 실행 환경이란 말이지요.</p>

<p>개념적으로 본다면 우리가 사용하는 <code class="highlighter-rouge">Web</code>이라는 서비스 역시 Platform 범주에 들어가게 됩니다. 정확하게는 Web 이라는 서비스가 아닌
Web Server와 Web Client(browser)로 구성되는 실행환경이 우리가 작성한 Front-End Web Application이 실행되는 Platform 이라
볼 수 있습니다.</p>

<p>Java의 예에서 알 수 있듯이 Platform은 <code class="highlighter-rouge">Hierarchical</code> 구조를 가질 수 있습니다. 제일 하단에 OS Platform이 있고 그 위에 JVM이
실행되는 것이죠. 다시 JVM은 Java 프로그램을 실행시킬 수 있는 Platform이 되고 그 위에 사용자가 작성한 Java 프로그램이
실행되는 것입니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Architecture</strong></p>

<p>알고는 있지만 딱히 설명하라면 어버버하게 만드는 개념입니다. <code class="highlighter-rouge">Architecture</code>는 소프트웨어의 특징을 결정짓는 설계 구조
입니다. 말이 좀 어렵습니다.</p>

<p>Architecture는 다음과 같은 내용을 포함합니다.</p>

<ul>
  <li>
    <p><strong>소프트웨어의 주요 구성 요소에 대한 정의</strong>가 포함됩니다. 소프트웨어의 주요 구성 요소란 소프트웨어를 구성하고 
있는 컴포넌트 혹은 모듈을 의미합니다. 어떤 기능의 컴포넌트들이 소프트웨어에 필요한지를 구상해서 구성 요소를 정의합니다.
( View Component, Service Component, Database Component, Transaction component, Message Component 등등)</p>
  </li>
  <li>
    <p>이런 <strong>소프트웨어 주요 구성 요소들 간에 어떤식의 구성이 이루어지고 있는지 정의</strong>합니다. 
한 컴포넌트가 다른 컴포넌트와 어떤 관계로 연결되는지에 대한 정의를 지칭한다고 보시면 됩니다. 일반적으로 유지보수성을
높이기 위해 Layered Model을 기반으로 컴포넌트간의 연결 관계를 정의합니다.</p>
  </li>
  <li>
    <p>결국 <strong>소프트웨어의 주요 구성 요소들 간에 연관관계가 맺어지는데 이들 간의 상호 인터페이스는 어떻게 할지를 정의</strong>합니다. 
어떤 값이 넘어가고 이 값을 받아서 결과값으로 어떤 값을 리턴해주는지에 대한 명세를 포함합니다.</p>
  </li>
  <li>
    <p>소프트웨어의 주요 구성 요소가 하는 중요한 동작 방식을 정의합니다.</p>
  </li>
</ul>

<p>위와 같은 내용으로 Architecture를 이해하시면 됩니다. Architecture는 결국 소프트웨어의 주요 특징을 결정하기 때문에 
개발에 미치는 영향이 아주 높은 상당히 중요한 부분이라 볼 수 있습니다.</p>

<p>Architecture에 대해 한가지 더 기억하셔야 할 점은 <code class="highlighter-rouge">Architecture</code>는 <strong>구체적인 구현을 포함하지 않습니다.</strong> 
즉, 어떤 프로그래밍 언어를 사용할 것인지, Library는 어떤것을 사용할 것인지, 개발 지원 프로그램은 어떤것들을 이용할 
것인지에 대한 내용은 Architecture에는 포함되지 않습니다. 
하지만 특수한 경우 Architecture안에 구체적인 표현이 포함 될 수는 있습니다. 하지만 본질적으로 
Architecture는 기술적인 설계를 명시하는 것이지 구체적인 구현 방법은 포함하지 않습니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Framework</strong></p>

<p><code class="highlighter-rouge">Framework</code>은 소프트웨어 프로젝트가 개발 될 수 있는 뼈대 구조를 지칭합니다. 역시 말이 좀 어려운데요. 다음과 같은 사항을
포함합니다.</p>

<ul>
  <li>소프트웨어 개발시 필요한 지원프로그램</li>
  <li>Library (Framework은 Library를 포함하는 상위개념입니다.)</li>
  <li>프로그래밍 언어</li>
  <li>소프트웨어 구성 요소들을 연결시켜주고 동작시켜주는 소프트웨어(일반적으로 Container라고 합니다.)</li>
</ul>

<p>Framework은 소프트웨어 구성 요소들이 어떻게 동작하는지에 대한 규약이 정해져 있습니다. 이 규약대로
프로그램은 진행이 될 것이고 프로그래머는 기능 구현에만 초점을 맞추어 빠르게 개발을 진행 시킬 수 있습니다.</p>

<p>Framework 도입의 가장 큰 목적 중 하나는 바로 <strong>유지보수</strong>입니다. 정해진 규칙대로 프로그램이 동작하고 작성되어야 하다보니
다른 사람이 프로그램을 분석하는데 시간이 오래 걸리지 않고 유지보수하는것도 상대적으로 쉽게 진행이 됩니다. Library를
기반으로 하는 프로그램은 모든 로직을 개발자가 직접 구현하기 때문에 다른 개발자가 유지보수하기 쉽지 않은 것에 비해
Framework은 이런 유지보수 측면에서 강점을 가질 수 있습니다.</p>

<p>개발 시 기본 골격이 되는 프로그램 코드가 제공되는것이 일반적인데 이 또한 Framework의 특징이라고 할 수 있습니다.
( <code class="highlighter-rouge">Scaffolding</code> 이라고 합니다. )</p>

<p>Framework부분은 사실 더 써야 하는 사항이 많습니다. 하지만 차이점 위주로 살펴본 것이니 위의 내용 정도만
이해해도 충분하지 않을까 합니다.</p>

<p>End.</p>

<hr />


	  ]]></description>
	</item>

	<item>
	  <title>클라이언트 Browser 확인방법</title>
	  <link>http://localhost:4000/browser-detect-script</link>
		
				
						<author>moon9342</author>
				
		
	  <pubDate>2018-01-26T19:48:00+09:00</pubDate>
	  <guid>http://localhost:4000/browser-detect-script</guid>
	  <description><![CDATA[
	     <p><strong class="post_introduction">Introduction</strong></p>

<p>사이트에 접속한 Client Web Browser의 종류를 알아내는 방법입니다.</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> Client Browser를 확인하기 위한 JavaScript code</strong></p>

<p>제 블로그는 <code class="highlighter-rouge">Chrome</code> 전용입니다. <code class="highlighter-rouge">IE</code>를 이용하면 화면이 보란듯이 깨지게됩니다. 
그래서 접속한 client의 browser를 알아내서 만약 chrome이 아니면 안내를 해 줄 필요가 있습니다.</p>

<blockquote>
  <p><strong>실제 업무에서는 당연히 <code class="highlighter-rouge">cross browsing</code>을 염두에 두고 작업을 해야되겠죠?</strong></p>
</blockquote>

<p>다음과 같은 JavaScript 코드를 이용하시면 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">agent</span> <span class="o">=</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">agent</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"chrome"</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>    
    <span class="nx">alert</span><span class="p">(</span><span class="s2">"Chrome browser"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">agent</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"safari"</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>    
    <span class="nx">alert</span><span class="p">(</span><span class="s2">"Safari browser"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">agent</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">"firefox"</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">"FireFox browser"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>JavaScript의 <code class="highlighter-rouge">navigator</code>객체를 조사하면 browser의 종류를 판별할 수 있습니다. 
<code class="highlighter-rouge">IE 10</code>까지는 저 위의 방법으로 알아낼 수 있으나 Edge와 그 이후 버전은 이름이 또 바뀌어서 다른 식으로 
판단해야 합니다. 전 IE는 관심밖이라…</p>

<hr />

<p><strong><i class="fa fa-bolt" style="color:#01077c"></i> userAgent 객체의 값 확인</strong></p>

<p>위의 방법은 가장 간단한 방법 중 하나입니다. Mobile browser까지 생각한다면 경우의 수가 훨씬 더 많아지겠죠.</p>

<p>특정 사이트와 Chrome 확장 프로그램을 이용하면 간단하게 어떤 browser로 접속했을 때 <code class="highlighter-rouge">userAgent</code>객체에 어떤
데이터가 들어가는지 확인해 볼 수 있습니다.</p>

<p>그럼 간단히 한번 해 볼까요?</p>

<p>먼저 <a href="https://chrome.google.com/webstore/category/extensions?hl=ko" target="_blank">크롬 웹 스토어</a>에 접속해서
<code class="highlighter-rouge">user-agent switcher</code>로 검색합니다. 확장 프로그램이 검색되는데 다음 그림과 같은 것을 설치합니다. (전 이미 설치되어 있습니다.)</p>

<p><img src="../../assets/built/images/user-agent-switcher.png" alt="user-agent switcher" /></p>

<p>확장 프로그램이 설치되면 Chrome browser 우측 상단에 안경 모양의 아이콘이 보이실 겁니다. 그걸 누르면 다른 browser로 switching
할 수 있습니다.</p>

<p>자 이제 <a href="http://detectmobilebrowsers.com/mobile" target="_blank">링크</a>로 접속해 보시면 <code class="highlighter-rouge">userAgent</code> 객체의 값을
보실 수 있습니다. user-agent switcher를 이용하여 다른 browser로 바꾸어서 접속하면 browser마다 userAgent값이 바뀌는 것을
확인할 수 있습니다.</p>

<p>아래 그림은 <code class="highlighter-rouge">iPhone6</code>로 browser를 switch한 후 사이트에 접속한 결과 화면입니다.</p>

<p><img src="../../assets/built/images/detect-browser.jpg" alt="접속 화면" /></p>

<p>추가적으로 해당 구현에 대한 소스코드까지 프로그래밍 언어별로 제공하고 있으니 필요하면 다운로드 받아서 사용하면 될 듯 싶습니다.</p>

<p>여하간 제 블로그는 <code class="highlighter-rouge">Chrome</code> 전용이기 때문에 제가 사용하는 Jasper2 theme의 <code class="highlighter-rouge">head.html</code>에 저 위의 코드를
적당히 수정해서 이용중입니다. 언제까지 이런 <strong>cross browsing issue</strong>에 시달려야하는지 안타깝습니다. ㅎㅎ</p>

<p>End.</p>

<hr />


	  ]]></description>
	</item>


</channel>
</rss>
